function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],a=!0,o=!1,r=void 0;try{for(var i,s=e[Symbol.iterator]();!(a=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);a=!0);}catch(l){o=!0,r=l}finally{try{a||null==s.return||s.return()}finally{if(o)throw r}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw r}}}}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function _construct(e,t,n){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function(e,t,n){var a=[null];a.push.apply(a,t);var o=new(Function.bind.apply(e,a));return n&&_setPrototypeOf(o,n.prototype),o}).apply(null,arguments)}function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var a=_superPropBase(e,t);if(a){var o=Object.getOwnPropertyDescriptor(a,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,a=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(a,arguments,o)}else n=a.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(e,t,n){e.exports=n("zUnb")},zUnb:function(e,t,n){"use strict";function a(e){return"function"==typeof e}n.r(t);var o=!1,r={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){if(e){var t=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+t.stack)}else o&&console.log("RxJS: Back to a better error behavior. Thank you. <3");o=e},get useDeprecatedSynchronousErrorHandling(){return o}};function i(e){setTimeout((function(){throw e}),0)}var s={closed:!0,next:function(e){},error:function(e){if(r.useDeprecatedSynchronousErrorHandling)throw e;i(e)},complete:function(){}},l=Array.isArray||function(e){return e&&"number"==typeof e.length};function u(e){return null!==e&&"object"==typeof e}var c,p=function(){function e(e){return Error.call(this),this.message=e?"".concat(e.length," errors occurred during unsubscription:\n").concat(e.map((function(e,t){return"".concat(t+1,") ").concat(e.toString())})).join("\n  ")):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}(),d=((c=function(){function e(t){_classCallCheck(this,e),this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return _createClass(e,[{key:"unsubscribe",value:function(){var t;if(!this.closed){var n=this._parentOrParents,o=this._unsubscribe,r=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof e)n.remove(this);else if(null!==n)for(var i=0;i<n.length;++i)n[i].remove(this);if(a(o))try{o.call(this)}catch(f){t=f instanceof p?h(f.errors):[f]}if(l(r))for(var s=-1,c=r.length;++s<c;){var d=r[s];if(u(d))try{d.unsubscribe()}catch(f){t=t||[],f instanceof p?t=t.concat(h(f.errors)):t.push(f)}}if(t)throw new p(t)}}},{key:"add",value:function(t){var n=t;if(!t)return e.EMPTY;switch(typeof t){case"function":n=new e(t);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof e)){var a=n;(n=new e)._subscriptions=[a]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=n._parentOrParents;if(null===o)n._parentOrParents=this;else if(o instanceof e){if(o===this)return n;n._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return n;o.push(this)}var r=this._subscriptions;return null===r?this._subscriptions=[n]:r.push(n),n}},{key:"remove",value:function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}}}]),e}()).EMPTY=function(e){return e.closed=!0,e}(new c),c);function h(e){return e.reduce((function(e,t){return e.concat(t instanceof p?t.errors:t)}),[])}var f="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),m=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;switch(_classCallCheck(this,n),(r=t.call(this)).syncErrorValue=null,r.syncErrorThrown=!1,r.syncErrorThrowable=!1,r.isStopped=!1,arguments.length){case 0:r.destination=s;break;case 1:if(!e){r.destination=s;break}if("object"==typeof e){e instanceof n?(r.syncErrorThrowable=e.syncErrorThrowable,r.destination=e,e.add(_assertThisInitialized(r))):(r.syncErrorThrowable=!0,r.destination=new _(_assertThisInitialized(r),e));break}default:r.syncErrorThrowable=!0,r.destination=new _(_assertThisInitialized(r),e,a,o)}return r}return _createClass(n,[{key:f,value:function(){return this}},{key:"next",value:function(e){this.isStopped||this._next(e)}},{key:"error",value:function(e){this.isStopped||(this.isStopped=!0,this._error(e))}},{key:"complete",value:function(){this.isStopped||(this.isStopped=!0,this._complete())}},{key:"unsubscribe",value:function(){this.closed||(this.isStopped=!0,_get(_getPrototypeOf(n.prototype),"unsubscribe",this).call(this))}},{key:"_next",value:function(e){this.destination.next(e)}},{key:"_error",value:function(e){this.destination.error(e),this.unsubscribe()}},{key:"_complete",value:function(){this.destination.complete(),this.unsubscribe()}},{key:"_unsubscribeAndRecycle",value:function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this}}],[{key:"create",value:function(e,t,a){var o=new n(e,t,a);return o.syncErrorThrowable=!1,o}}]),n}(d),_=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,o,r,i){var l,u;_classCallCheck(this,n),(l=t.call(this))._parentSubscriber=e;var c=_assertThisInitialized(l);return a(o)?u=o:o&&(u=o.next,r=o.error,i=o.complete,o!==s&&(a((c=Object.create(o)).unsubscribe)&&l.add(c.unsubscribe.bind(c)),c.unsubscribe=l.unsubscribe.bind(_assertThisInitialized(l)))),l._context=c,l._next=u,l._error=r,l._complete=i,l}return _createClass(n,[{key:"next",value:function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;r.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}}},{key:"error",value:function(e){if(!this.isStopped){var t=this._parentSubscriber,n=r.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):i(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;i(e)}}}},{key:"complete",value:function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};r.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}}},{key:"__tryOrUnsub",value:function(e,t){try{e.call(this._context,t)}catch(n){if(this.unsubscribe(),r.useDeprecatedSynchronousErrorHandling)throw n;i(n)}}},{key:"__tryOrSetError",value:function(e,t,n){if(!r.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,n)}catch(a){return r.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=a,e.syncErrorThrown=!0,!0):(i(a),!0)}return!1}},{key:"_unsubscribe",value:function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()}}]),n}(m),g="function"==typeof Symbol&&Symbol.observable||"@@observable";function v(e){return e}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return b(t)}function b(e){return 0===e.length?v:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var x,w=((x=function(){function e(t){_classCallCheck(this,e),this._isScalar=!1,t&&(this._subscribe=t)}return _createClass(e,[{key:"lift",value:function(t){var n=new e;return n.source=this,n.operator=t,n}},{key:"subscribe",value:function(e,t,n){var a=this.operator,o=function(e,t,n){if(e){if(e instanceof m)return e;if(e[f])return e[f]()}return e||t||n?new m(e,t,n):new m(s)}(e,t,n);if(o.add(a?a.call(o,this.source):this.source||r.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),r.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o}},{key:"_trySubscribe",value:function(e){try{return this._subscribe(e)}catch(t){r.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),function(e){for(;e;){var t=e,n=t.closed,a=t.destination,o=t.isStopped;if(n||o)return!1;e=a&&a instanceof m?a:null}return!0}(e)?e.error(t):console.warn(t)}}},{key:"forEach",value:function(e,t){var n=this;return new(t=C(t))((function(t,a){var o;o=n.subscribe((function(t){try{e(t)}catch(n){a(n),o&&o.unsubscribe()}}),a,t)}))}},{key:"_subscribe",value:function(e){var t=this.source;return t&&t.subscribe(e)}},{key:g,value:function(){return this}},{key:"pipe",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?this:b(t)(this)}},{key:"toPromise",value:function(e){var t=this;return new(e=C(e))((function(e,n){var a;t.subscribe((function(e){return a=e}),(function(e){return n(e)}),(function(){return e(a)}))}))}}]),e}()).create=function(e){return new x(e)},x);function C(e){if(e||(e=r.Promise||Promise),!e)throw new Error("no Promise impl found");return e}var k,T=function(){function e(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return e.prototype=Object.create(Error.prototype),e}(),P=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this)).subject=e,o.subscriber=a,o.closed=!1,o}return _createClass(n,[{key:"unsubscribe",value:function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}}}]),n}(d),S=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this,e)).destination=e,a}return n}(m),O=((k=function(e){_inherits(n,e);var t=_createSuper(n);function n(){var e;return _classCallCheck(this,n),(e=t.call(this)).observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return _createClass(n,[{key:f,value:function(){return new S(this)}},{key:"lift",value:function(e){var t=new M(this,this);return t.operator=e,t}},{key:"next",value:function(e){if(this.closed)throw new T;if(!this.isStopped)for(var t=this.observers,n=t.length,a=t.slice(),o=0;o<n;o++)a[o].next(e)}},{key:"error",value:function(e){if(this.closed)throw new T;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,a=t.slice(),o=0;o<n;o++)a[o].error(e);this.observers.length=0}},{key:"complete",value:function(){if(this.closed)throw new T;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),a=0;a<t;a++)n[a].complete();this.observers.length=0}},{key:"unsubscribe",value:function(){this.isStopped=!0,this.closed=!0,this.observers=null}},{key:"_trySubscribe",value:function(e){if(this.closed)throw new T;return _get(_getPrototypeOf(n.prototype),"_trySubscribe",this).call(this,e)}},{key:"_subscribe",value:function(e){if(this.closed)throw new T;return this.hasError?(e.error(this.thrownError),d.EMPTY):this.isStopped?(e.complete(),d.EMPTY):(this.observers.push(e),new P(this,e))}},{key:"asObservable",value:function(){var e=new w;return e.source=this,e}}]),n}(w)).create=function(e,t){return new M(e,t)},k),M=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this)).destination=e,o.source=a,o}return _createClass(n,[{key:"next",value:function(e){var t=this.destination;t&&t.next&&t.next(e)}},{key:"error",value:function(e){var t=this.destination;t&&t.error&&this.destination.error(e)}},{key:"complete",value:function(){var e=this.destination;e&&e.complete&&this.destination.complete()}},{key:"_subscribe",value:function(e){return this.source?this.source.subscribe(e):d.EMPTY}}]),n}(O);function I(e){return e&&"function"==typeof e.schedule}var F=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this)).parent=e,r.outerValue=a,r.outerIndex=o,r.index=0,r}return _createClass(n,[{key:"_next",value:function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)}},{key:"_error",value:function(e){this.parent.notifyError(e,this),this.unsubscribe()}},{key:"_complete",value:function(){this.parent.notifyComplete(this),this.unsubscribe()}}]),n}(m),D=function(e){return function(t){for(var n=0,a=e.length;n<a&&!t.closed;n++)t.next(e[n]);t.complete()}};var A="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator",E=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function R(e){return!!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var N=function(e){if(e&&"function"==typeof e[g])return a=e,function(e){var t=a[g]();if("function"!=typeof t.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return t.subscribe(e)};if(E(e))return D(e);if(R(e))return n=e,function(e){return n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,i),e};if(e&&"function"==typeof e[A])return t=e,function(e){for(var n=t[A]();;){var a=n.next();if(a.done){e.complete();break}if(e.next(a.value),e.closed)break}return"function"==typeof n.return&&e.add((function(){n.return&&n.return()})),e};var t,n,a,o=u(e)?"an invalid object":"'".concat(e,"'");throw new TypeError("You provided ".concat(o," where a stream was expected. You can provide an Observable, Promise, Array, or Iterable."))};function j(e,t,n,a){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new F(e,n,a);if(!o.closed)return t instanceof w?t.subscribe(o):N(t)(o)}var z=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return _createClass(n,[{key:"notifyNext",value:function(e,t,n,a,o){this.destination.next(t)}},{key:"notifyError",value:function(e,t){this.destination.error(e)}},{key:"notifyComplete",value:function(e){this.destination.complete()}}]),n}(m);function L(e,t){return function(n){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new X(e,t))}}var X=function(){function e(t,n){_classCallCheck(this,e),this.project=t,this.thisArg=n}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new U(e,this.project,this.thisArg))}}]),e}(),U=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e)).project=a,r.count=0,r.thisArg=o||_assertThisInitialized(r),r}return _createClass(n,[{key:"_next",value:function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++)}catch(n){return void this.destination.error(n)}this.destination.next(t)}}]),n}(m);function B(e,t){return new w((function(n){var a=new d,o=0;return a.add(t.schedule((function(){o!==e.length?(n.next(e[o++]),n.closed||a.add(this.schedule())):n.complete()}))),a}))}function V(e,t){return t?function(e,t){if(null!=e){if(function(e){return e&&"function"==typeof e[g]}(e))return function(e,t){return new w((function(n){var a=new d;return a.add(t.schedule((function(){var o=e[g]();a.add(o.subscribe({next:function(e){a.add(t.schedule((function(){return n.next(e)})))},error:function(e){a.add(t.schedule((function(){return n.error(e)})))},complete:function(){a.add(t.schedule((function(){return n.complete()})))}}))}))),a}))}(e,t);if(R(e))return function(e,t){return new w((function(n){var a=new d;return a.add(t.schedule((function(){return e.then((function(e){a.add(t.schedule((function(){n.next(e),a.add(t.schedule((function(){return n.complete()})))})))}),(function(e){a.add(t.schedule((function(){return n.error(e)})))}))}))),a}))}(e,t);if(E(e))return B(e,t);if(function(e){return e&&"function"==typeof e[A]}(e)||"string"==typeof e)return function(e,t){if(!e)throw new Error("Iterable cannot be null");return new w((function(n){var a,o=new d;return o.add((function(){a&&"function"==typeof a.return&&a.return()})),o.add(t.schedule((function(){a=e[A](),o.add(t.schedule((function(){if(!n.closed){var e,t;try{var o=a.next();e=o.value,t=o.done}catch(r){return void n.error(r)}t?n.complete():(n.next(e),this.schedule())}})))}))),o}))}(e,t)}throw new TypeError((null!==e&&typeof e||e)+" is not observable")}(e,t):e instanceof w?e:new w(N(e))}function H(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.POSITIVE_INFINITY;return"function"==typeof t?function(a){return a.pipe(H((function(n,a){return V(e(n,a)).pipe(L((function(e,o){return t(n,e,a,o)})))}),n))}:("number"==typeof t&&(n=t),function(t){return t.lift(new q(e,n))})}var q=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.POSITIVE_INFINITY;_classCallCheck(this,e),this.project=t,this.concurrent=n}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new W(e,this.project,this.concurrent))}}]),e}(),W=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.POSITIVE_INFINITY;return _classCallCheck(this,n),(o=t.call(this,e)).project=a,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return _createClass(n,[{key:"_next",value:function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)}},{key:"_tryNext",value:function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(a){return void this.destination.error(a)}this.active++,this._innerSub(t,e,n)}},{key:"_innerSub",value:function(e,t,n){var a=new F(this,t,n),o=this.destination;o.add(a);var r=j(this,e,void 0,void 0,a);r!==a&&o.add(r)}},{key:"_complete",value:function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}},{key:"notifyNext",value:function(e,t,n,a,o){this.destination.next(t)}},{key:"notifyComplete",value:function(e){var t=this.buffer;this.remove(e),this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}]),n}(z);function G(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.POSITIVE_INFINITY;return H(v,e)}function Z(e,t){return t?B(e,t):new w(D(e))}function K(){return function(e){return e.lift(new Q(e))}}var J,Q=function(){function e(t){_classCallCheck(this,e),this.connectable=t}return _createClass(e,[{key:"call",value:function(e,t){var n=this.connectable;n._refCount++;var a=new Y(e,n),o=t.subscribe(a);return a.closed||(a.connection=n.connect()),o}}]),e}(),Y=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).connectable=a,o}return _createClass(n,[{key:"_unsubscribe",value:function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var n=this.connection,a=e._connection;this.connection=null,!a||n&&a!==n||a.unsubscribe()}}else this.connection=null}}]),n}(m),$={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:(J=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this)).source=e,o.subjectFactory=a,o._refCount=0,o._isComplete=!1,o}return _createClass(n,[{key:"_subscribe",value:function(e){return this.getSubject().subscribe(e)}},{key:"getSubject",value:function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject}},{key:"connect",value:function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new d).add(this.source.subscribe(new ee(this.getSubject(),this))),e.closed&&(this._connection=null,e=d.EMPTY)),e}},{key:"refCount",value:function(){return K()(this)}}]),n}(w).prototype)._subscribe},_isComplete:{value:J._isComplete,writable:!0},getSubject:{value:J.getSubject},connect:{value:J.connect},refCount:{value:J.refCount}},ee=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).connectable=a,o}return _createClass(n,[{key:"_error",value:function(e){this._unsubscribe(),_get(_getPrototypeOf(n.prototype),"_error",this).call(this,e)}},{key:"_complete",value:function(){this.connectable._isComplete=!0,this._unsubscribe(),_get(_getPrototypeOf(n.prototype),"_complete",this).call(this)}},{key:"_unsubscribe",value:function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}}}]),n}(S);function te(){return new O}function ne(e){return{toString:e}.toString()}function ae(e,t,n){return ne((function(){var a=function(e){return function(){if(e){var t=e.apply(void 0,arguments);for(var n in t)this[n]=t[n]}}}(t);function o(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(this instanceof o)return a.apply(this,t),this;var r=_construct(o,t);return i.annotation=r,i;function i(e,t,n){for(var a=e.hasOwnProperty("__parameters__")?e.__parameters__:Object.defineProperty(e,"__parameters__",{value:[]}).__parameters__;a.length<=n;)a.push(null);return(a[n]=a[n]||[]).push(r),e}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}))}var oe=ae("Inject",(function(e){return{token:e}})),re=ae("Optional"),ie=ae("Self"),se=ae("SkipSelf"),le=function(e){return e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional",e}({});function ue(e){for(var t in e)if(e[t]===ue)return t;throw Error("Could not find renamed property on target object.")}function ce(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}function pe(e){return{factory:e.factory,providers:e.providers||[],imports:e.imports||[]}}function de(e){return he(e,e[me])||he(e,e[ve])}function he(e,t){return t&&t.token===e?t:null}function fe(e){return e&&(e.hasOwnProperty(_e)||e.hasOwnProperty(ye))?e[_e]:null}var me=ue({"\u0275prov":ue}),_e=ue({"\u0275inj":ue}),ge=ue({"\u0275provFallback":ue}),ve=ue({ngInjectableDef:ue}),ye=ue({ngInjectorDef:ue});function be(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(be).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return""+e.overriddenName;if(e.name)return""+e.name;var t=e.toString();if(null==t)return""+t;var n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function xe(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}var we=ue({__forward_ref__:ue});function Ce(e){return e.__forward_ref__=Ce,e.toString=function(){return be(this())},e}function ke(e){return"function"==typeof(t=e)&&t.hasOwnProperty(we)&&t.__forward_ref__===Ce?e():e;var t}var Te,Pe="undefined"!=typeof globalThis&&globalThis,Se="undefined"!=typeof window&&window,Oe="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,Me="undefined"!=typeof global&&global,Ie=Pe||Me||Se||Oe,Fe=ue({"\u0275cmp":ue}),De=ue({"\u0275dir":ue}),Ae=ue({"\u0275pipe":ue}),Ee=ue({"\u0275mod":ue}),Re=ue({"\u0275loc":ue}),Ne=ue({"\u0275fac":ue}),je=ue({__NG_ELEMENT_ID__:ue}),ze=function(){function e(t,n){_classCallCheck(this,e),this._desc=t,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,"number"==typeof n?this.__NG_ELEMENT_ID__=n:void 0!==n&&(this.\u0275prov=ce({token:this,providedIn:n.providedIn||"root",factory:n.factory}))}return _createClass(e,[{key:"toString",value:function(){return"InjectionToken "+this._desc}}]),e}(),Le=new ze("INJECTOR",-1),Xe={},Ue=/\n/gm,Be=ue({provide:String,useValue:ue}),Ve=void 0;function He(e){var t=Ve;return Ve=e,t}function qe(e){var t=Te;return Te=e,t}function We(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:le.Default;if(void 0===Ve)throw new Error("inject() must be called from an injection context");return null===Ve?Ze(e,void 0,t):Ve.get(e,t&le.Optional?null:void 0,t)}function Ge(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:le.Default;return(Te||We)(ke(e),t)}function Ze(e,t,n){var a=de(e);if(a&&"root"==a.providedIn)return void 0===a.value?a.value=a.factory():a.value;if(n&le.Optional)return null;if(void 0!==t)return t;throw new Error("Injector: NOT_FOUND [".concat(be(e),"]"))}function Ke(e){for(var t=[],n=0;n<e.length;n++){var a=ke(e[n]);if(Array.isArray(a)){if(0===a.length)throw new Error("Arguments array must have arguments.");for(var o=void 0,r=le.Default,i=0;i<a.length;i++){var s=a[i];s instanceof re||"Optional"===s.ngMetadataName||s===re?r|=le.Optional:s instanceof se||"SkipSelf"===s.ngMetadataName||s===se?r|=le.SkipSelf:s instanceof ie||"Self"===s.ngMetadataName||s===ie?r|=le.Self:o=s instanceof oe||s===oe?s.token:s}t.push(Ge(o,r))}else t.push(Ge(a))}return t}var Je=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Xe;if(t===Xe){var n=new Error("NullInjectorError: No provider for ".concat(be(e),"!"));throw n.name="NullInjectorError",n}return t}}]),e}(),Qe=function e(){_classCallCheck(this,e)},Ye=function e(){_classCallCheck(this,e)};function $e(e,t){e.forEach((function(e){return Array.isArray(e)?$e(e,t):t(e)}))}function et(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function tt(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function nt(e,t,n){var a=ot(e,t);return a>=0?e[1|a]=n:function(e,t,n,a){var o=e.length;if(o==t)e.push(n,a);else if(1===o)e.push(a,e[0]),e[0]=n;else{for(o--,e.push(e[o-1],e[o]);o>t;)e[o]=e[o-2],o--;e[t]=n,e[t+1]=a}}(e,a=~a,t,n),a}function at(e,t){var n=ot(e,t);if(n>=0)return e[1|n]}function ot(e,t){return function(e,t,n){for(var a=0,o=e.length>>1;o!==a;){var r=a+(o-a>>1),i=e[r<<1];if(t===i)return r<<1;i>t?o=r:a=r+1}return~(o<<1)}(e,t)}var rt=function(){var e={OnPush:0,Default:1};return e[e.OnPush]="OnPush",e[e.Default]="Default",e}(),it=function(){var e={Emulated:0,Native:1,None:2,ShadowDom:3};return e[e.Emulated]="Emulated",e[e.Native]="Native",e[e.None]="None",e[e.ShadowDom]="ShadowDom",e}(),st={},lt=[],ut=0;function ct(e){return ne((function(){var t=e.type,n=t.prototype,a={},o={type:t,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:a,inputs:null,outputs:null,exportAs:e.exportAs||null,onChanges:null,onInit:n.ngOnInit||null,doCheck:n.ngDoCheck||null,afterContentInit:n.ngAfterContentInit||null,afterContentChecked:n.ngAfterContentChecked||null,afterViewInit:n.ngAfterViewInit||null,afterViewChecked:n.ngAfterViewChecked||null,onDestroy:n.ngOnDestroy||null,onPush:e.changeDetection===rt.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||lt,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||it.Emulated,id:"c",styles:e.styles||lt,_:null,setInput:null,schemas:e.schemas||null,tView:null},r=e.directives,i=e.features,s=e.pipes;return o.id+=ut++,o.inputs=mt(e.inputs,a),o.outputs=mt(e.outputs),i&&i.forEach((function(e){return e(o)})),o.directiveDefs=r?function(){return("function"==typeof r?r():r).map(pt)}:null,o.pipeDefs=s?function(){return("function"==typeof s?s():s).map(dt)}:null,o}))}function pt(e){return vt(e)||function(e){return e[De]||null}(e)}function dt(e){return function(e){return e[Ae]||null}(e)}var ht={};function ft(e){var t={type:e.type,bootstrap:e.bootstrap||lt,declarations:e.declarations||lt,imports:e.imports||lt,exports:e.exports||lt,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&ne((function(){ht[e.id]=e.type})),t}function mt(e,t){if(null==e)return st;var n={};for(var a in e)if(e.hasOwnProperty(a)){var o=e[a],r=o;Array.isArray(o)&&(r=o[1],o=o[0]),n[o]=a,t&&(t[o]=r)}return n}var _t=ct;function gt(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function vt(e){return e[Fe]||null}function yt(e,t){return e.hasOwnProperty(Ne)?e[Ne]:null}function bt(e,t){var n=e[Ee]||null;if(!n&&!0===t)throw new Error("Type ".concat(be(e)," does not have '\u0275mod' property."));return n}function xt(e){return Array.isArray(e)&&"object"==typeof e[1]}function wt(e){return Array.isArray(e)&&!0===e[1]}function Ct(e){return 0!=(8&e.flags)}function kt(e){return 2==(2&e.flags)}function Tt(e){return 1==(1&e.flags)}function Pt(e){return null!==e.template}function St(e){return 0!=(512&e[2])}var Ot=void 0;function Mt(e){return!!e.listen}var It={createRenderer:function(e,t){return void 0!==Ot?Ot:"undefined"!=typeof document?document:void 0}};function Ft(e){for(;Array.isArray(e);)e=e[0];return e}function Dt(e,t){return Ft(t[e+20])}function At(e,t){return Ft(t[e.index])}function Et(e,t){return e.data[t+20]}function Rt(e,t){return e[t+20]}function Nt(e,t){var n=t[e];return xt(n)?n:n[0]}function jt(e){var t=function(e){return e.__ngContext__||null}(e);return t?Array.isArray(t)?t:t.lView:null}function zt(e){return 4==(4&e[2])}function Lt(e){return 128==(128&e[2])}function Xt(e,t){return null===e||null==t?null:e[t]}function Ut(e){e[18]=0}function Bt(e,t){e[5]+=t;for(var n=e,a=e[3];null!==a&&(1===t&&1===n[5]||-1===t&&0===n[5]);)a[5]+=t,n=a,a=a[3]}var Vt={lFrame:pn(null),bindingsEnabled:!0,checkNoChangesMode:!1};function Ht(){return Vt.bindingsEnabled}function qt(){return Vt.lFrame.lView}function Wt(){return Vt.lFrame.tView}function Gt(e){Vt.lFrame.contextLView=e}function Zt(){return Vt.lFrame.previousOrParentTNode}function Kt(e,t){Vt.lFrame.previousOrParentTNode=e,Vt.lFrame.isParent=t}function Jt(){return Vt.lFrame.isParent}function Qt(){return Vt.checkNoChangesMode}function Yt(e){Vt.checkNoChangesMode=e}function $t(){var e=Vt.lFrame,t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function en(){return Vt.lFrame.bindingIndex}function tn(){return Vt.lFrame.bindingIndex++}function nn(e){var t=Vt.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function an(e,t){var n=Vt.lFrame;n.bindingIndex=n.bindingRootIndex=e,on(t)}function on(e){Vt.lFrame.currentDirectiveIndex=e}function rn(){return Vt.lFrame.currentQueryIndex}function sn(e){Vt.lFrame.currentQueryIndex=e}function ln(e,t){var n=cn();Vt.lFrame=n,n.previousOrParentTNode=t,n.lView=e}function un(e,t){var n=cn(),a=e[1];Vt.lFrame=n,n.previousOrParentTNode=t,n.lView=e,n.tView=a,n.contextLView=e,n.bindingIndex=a.bindingStartIndex}function cn(){var e=Vt.lFrame,t=null===e?null:e.child;return null===t?pn(e):t}function pn(e){var t={previousOrParentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:0,contextLView:null,elementDepthCount:0,currentNamespace:null,currentSanitizer:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null};return null!==e&&(e.child=t),t}function dn(){var e=Vt.lFrame;return Vt.lFrame=e.parent,e.previousOrParentTNode=null,e.lView=null,e}var hn=dn;function fn(){var e=dn();e.isParent=!0,e.tView=null,e.selectedIndex=0,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.currentSanitizer=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function mn(){return Vt.lFrame.selectedIndex}function _n(e){Vt.lFrame.selectedIndex=e}function gn(){var e=Vt.lFrame;return Et(e.tView,e.selectedIndex)}function vn(e,t){for(var n=t.directiveStart,a=t.directiveEnd;n<a;n++){var o=e.data[n];o.afterContentInit&&(e.contentHooks||(e.contentHooks=[])).push(-n,o.afterContentInit),o.afterContentChecked&&((e.contentHooks||(e.contentHooks=[])).push(n,o.afterContentChecked),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,o.afterContentChecked)),o.afterViewInit&&(e.viewHooks||(e.viewHooks=[])).push(-n,o.afterViewInit),o.afterViewChecked&&((e.viewHooks||(e.viewHooks=[])).push(n,o.afterViewChecked),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,o.afterViewChecked)),null!=o.onDestroy&&(e.destroyHooks||(e.destroyHooks=[])).push(n,o.onDestroy)}}function yn(e,t,n){wn(e,t,3,n)}function bn(e,t,n,a){(3&e[2])===n&&wn(e,t,n,a)}function xn(e,t){var n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function wn(e,t,n,a){for(var o=null!=a?a:-1,r=0,i=void 0!==a?65535&e[18]:0;i<t.length;i++)if("number"==typeof t[i+1]){if(r=t[i],null!=a&&r>=a)break}else t[i]<0&&(e[18]+=65536),(r<o||-1==o)&&(Cn(e,n,t,i),e[18]=(4294901760&e[18])+i+2),i++}function Cn(e,t,n,a){var o=n[a]<0,r=n[a+1],i=e[o?-n[a]:n[a]];o?e[2]>>11<e[18]>>16&&(3&e[2])===t&&(e[2]+=2048,r.call(i)):r.call(i)}var kn=function e(t,n,a){_classCallCheck(this,e),this.factory=t,this.resolving=!1,this.canSeeViewProviders=n,this.injectImpl=a};function Tn(e,t,n){for(var a=Mt(e),o=0;o<n.length;){var r=n[o];if("number"==typeof r){if(0!==r)break;o++;var i=n[o++],s=n[o++],l=n[o++];a?e.setAttribute(t,s,l,i):t.setAttributeNS(i,s,l)}else{var u=r,c=n[++o];Sn(u)?a&&e.setProperty(t,u,c):a?e.setAttribute(t,u,c):t.setAttribute(u,c),o++}}return o}function Pn(e){return 3===e||4===e||6===e}function Sn(e){return 64===e.charCodeAt(0)}function On(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else for(var n=-1,a=0;a<t.length;a++){var o=t[a];"number"==typeof o?n=o:0===n||Mn(e,n,o,null,-1===n||2===n?t[++a]:null)}return e}function Mn(e,t,n,a,o){var r=0,i=e.length;if(-1===t)i=-1;else for(;r<e.length;){var s=e[r++];if("number"==typeof s){if(s===t){i=-1;break}if(s>t){i=r-1;break}}}for(;r<e.length;){var l=e[r];if("number"==typeof l)break;if(l===n){if(null===a)return void(null!==o&&(e[r+1]=o));if(a===e[r+1])return void(e[r+2]=o)}r++,null!==a&&r++,null!==o&&r++}-1!==i&&(e.splice(i,0,t),r=i+1),e.splice(r++,0,n),null!==a&&e.splice(r++,0,a),null!==o&&e.splice(r++,0,o)}function In(e){return-1!==e}function Fn(e){return 32767&e}function Dn(e){return e>>16}function An(e,t){for(var n=Dn(e),a=t;n>0;)a=a[15],n--;return a}function En(e){return"string"==typeof e?e:null==e?"":""+e}function Rn(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():En(e)}var Nn=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(Ie);function jn(e){return e instanceof Function?e():e}var zn=!0;function Ln(e){var t=zn;return zn=e,t}var Xn=0;function Un(e,t){var n=Vn(e,t);if(-1!==n)return n;var a=t[1];a.firstCreatePass&&(e.injectorIndex=t.length,Bn(a.data,e),Bn(t,null),Bn(a.blueprint,null));var o=Hn(e,t),r=e.injectorIndex;if(In(o))for(var i=Fn(o),s=An(o,t),l=s[1].data,u=0;u<8;u++)t[r+u]=s[i+u]|l[i+u];return t[r+8]=o,r}function Bn(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Vn(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null==t[e.injectorIndex+8]?-1:e.injectorIndex}function Hn(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;for(var n=t[6],a=1;n&&-1===n.injectorIndex;)n=(t=t[15])?t[6]:null,a++;return n?n.injectorIndex|a<<16:-1}function qn(e,t,n){!function(e,t,n){var a="string"!=typeof n?n[je]:n.charCodeAt(0)||0;null==a&&(a=n[je]=Xn++);var o=255&a,r=1<<o,i=64&o,s=32&o,l=t.data;128&o?i?s?l[e+7]|=r:l[e+6]|=r:s?l[e+5]|=r:l[e+4]|=r:i?s?l[e+3]|=r:l[e+2]|=r:s?l[e+1]|=r:l[e]|=r}(e,t,n)}function Wn(e,t,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:le.Default,o=arguments.length>4?arguments[4]:void 0;if(null!==e){var r=function(e){if("string"==typeof e)return e.charCodeAt(0)||0;var t=e[je];return"number"==typeof t&&t>0?255&t:t}(n);if("function"==typeof r){ln(t,e);try{var i=r();if(null!=i||a&le.Optional)return i;throw new Error("No provider for ".concat(Rn(n),"!"))}finally{hn()}}else if("number"==typeof r){if(-1===r)return new $n(e,t);var s=null,l=Vn(e,t),u=-1,c=a&le.Host?t[16][6]:null;for((-1===l||a&le.SkipSelf)&&(u=-1===l?Hn(e,t):t[l+8],Yn(a,!1)?(s=t[1],l=Fn(u),t=An(u,t)):l=-1);-1!==l;){u=t[l+8];var p=t[1];if(Qn(r,l,p.data)){var d=Zn(l,t,n,s,a,c);if(d!==Gn)return d}Yn(a,t[1].data[l+8]===c)&&Qn(r,l,t)?(s=p,l=Fn(u),t=An(u,t)):l=-1}}}if(a&le.Optional&&void 0===o&&(o=null),0==(a&(le.Self|le.Host))){var h=t[9],f=qe(void 0);try{return h?h.get(n,o,a&le.Optional):Ze(n,o,a&le.Optional)}finally{qe(f)}}if(a&le.Optional)return o;throw new Error("NodeInjector: NOT_FOUND [".concat(Rn(n),"]"))}var Gn={};function Zn(e,t,n,a,o,r){var i=t[1],s=i.data[e+8],l=Kn(s,i,n,null==a?kt(s)&&zn:a!=i&&3===s.type,o&le.Host&&r===s);return null!==l?Jn(t,i,l,s):Gn}function Kn(e,t,n,a,o){for(var r=e.providerIndexes,i=t.data,s=65535&r,l=e.directiveStart,u=r>>16,c=o?s+u:e.directiveEnd,p=a?s:s+u;p<c;p++){var d=i[p];if(p<l&&n===d||p>=l&&d.type===n)return p}if(o){var h=i[l];if(h&&Pt(h)&&h.type===n)return l}return null}function Jn(e,t,n,a){var o=e[n],r=t.data;if(o instanceof kn){var i=o;if(i.resolving)throw new Error("Circular dep for "+Rn(r[n]));var s,l=Ln(i.canSeeViewProviders);i.resolving=!0,i.injectImpl&&(s=qe(i.injectImpl)),ln(e,a);try{o=e[n]=i.factory(void 0,r,e,a),t.firstCreatePass&&n>=a.directiveStart&&function(e,t,n){var a=t.onChanges,o=t.onInit,r=t.doCheck;a&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,a),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,a)),o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(-e,o),r&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,r))}(n,r[n],t)}finally{i.injectImpl&&qe(s),Ln(l),i.resolving=!1,hn()}}return o}function Qn(e,t,n){var a=64&e,o=32&e;return!!((128&e?a?o?n[t+7]:n[t+6]:o?n[t+5]:n[t+4]:a?o?n[t+3]:n[t+2]:o?n[t+1]:n[t])&1<<e)}function Yn(e,t){return!(e&le.Self||e&le.Host&&t)}var $n=function(){function e(t,n){_classCallCheck(this,e),this._tNode=t,this._lView=n}return _createClass(e,[{key:"get",value:function(e,t){return Wn(this._tNode,this._lView,e,void 0,t)}}]),e}();function ea(e){return e.ngDebugContext}function ta(e){return e.ngOriginalError}function na(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];e.error.apply(e,n)}var aa=function(){function e(){_classCallCheck(this,e),this._console=console}return _createClass(e,[{key:"handleError",value:function(e){var t=this._findOriginalError(e),n=this._findContext(e),a=function(e){return e.ngErrorLogger||na}(e);a(this._console,"ERROR",e),t&&a(this._console,"ORIGINAL ERROR",t),n&&a(this._console,"ERROR CONTEXT",n)}},{key:"_findContext",value:function(e){return e?ea(e)?ea(e):this._findContext(ta(e)):null}},{key:"_findOriginalError",value:function(e){for(var t=ta(e);t&&ta(t);)t=ta(t);return t}}]),e}(),oa=function(){function e(t){_classCallCheck(this,e),this.changingThisBreaksApplicationSecurity=t}return _createClass(e,[{key:"toString",value:function(){return"SafeValue must use [property]=binding: "+this.changingThisBreaksApplicationSecurity+" (see http://g.co/ng/security#xss)"}}]),e}();function ra(e){return e instanceof oa?e.changingThisBreaksApplicationSecurity:e}var ia=!0,sa=!1;function la(){return sa=!0,ia}var ua=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,ca=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i,pa=function(){var e={NONE:0,HTML:1,STYLE:2,SCRIPT:3,URL:4,RESOURCE_URL:5};return e[e.NONE]="NONE",e[e.HTML]="HTML",e[e.STYLE]="STYLE",e[e.SCRIPT]="SCRIPT",e[e.URL]="URL",e[e.RESOURCE_URL]="RESOURCE_URL",e}();function da(e){var t,n,a=(t=qt())&&t[12];return a?a.sanitize(pa.URL,e)||"":function(e,t){var n=function(e){return e instanceof oa&&e.getTypeName()||null}(e);if(null!=n&&"URL"!==n){if("ResourceURL"===n)return!0;throw new Error("Required a safe ".concat("URL",", got a ").concat(n," (see http://g.co/ng/security#xss)"))}return"URL"===n}(e)?ra(e):(n=En(e),(n=String(n)).match(ua)||n.match(ca)?n:(la()&&console.warn("WARNING: sanitizing unsafe URL value ".concat(n," (see http://g.co/ng/security#xss)")),"unsafe:"+n))}function ha(e,t){e.__ngContext__=t}function fa(e){throw new Error("Multiple components match node with tagname "+e.tagName)}function ma(){throw new Error("Cannot mix multi providers and regular providers")}function _a(e,t,n){for(var a=e.length;;){var o=e.indexOf(t,n);if(-1===o)return o;if(0===o||e.charCodeAt(o-1)<=32){var r=t.length;if(o+r===a||e.charCodeAt(o+r)<=32)return o}n=o+1}}function ga(e,t,n){for(var a=0;a<e.length;){var o=e[a++];if(n&&"class"===o){if(-1!==_a((o=e[a]).toLowerCase(),t,0))return!0}else if(1===o){for(;a<e.length&&"string"==typeof(o=e[a++]);)if(o.toLowerCase()===t)return!0;return!1}}return!1}function va(e){return 0===e.type&&"ng-template"!==e.tagName}function ya(e,t,n){return t===(0!==e.type||n?e.tagName:"ng-template")}function ba(e,t,n){for(var a=4,o=e.attrs||[],r=function(e){for(var t=0;t<e.length;t++)if(Pn(e[t]))return t;return e.length}(o),i=!1,s=0;s<t.length;s++){var l=t[s];if("number"!=typeof l){if(!i)if(4&a){if(a=2|1&a,""!==l&&!ya(e,l,n)||""===l&&1===t.length){if(xa(a))return!1;i=!0}}else{var u=8&a?l:t[++s];if(8&a&&null!==e.attrs){if(!ga(e.attrs,u,n)){if(xa(a))return!1;i=!0}continue}var c=wa(8&a?"class":l,o,va(e),n);if(-1===c){if(xa(a))return!1;i=!0;continue}if(""!==u){var p;p=c>r?"":o[c+1].toLowerCase();var d=8&a?p:null;if(d&&-1!==_a(d,u,0)||2&a&&u!==p){if(xa(a))return!1;i=!0}}}}else{if(!i&&!xa(a)&&!xa(l))return!1;if(i&&xa(l))continue;i=!1,a=l|1&a}}return xa(a)||i}function xa(e){return 0==(1&e)}function wa(e,t,n,a){if(null===t)return-1;var o=0;if(a||!n){for(var r=!1;o<t.length;){var i=t[o];if(i===e)return o;if(3===i||6===i)r=!0;else{if(1===i||2===i){for(var s=t[++o];"string"==typeof s;)s=t[++o];continue}if(4===i)break;if(0===i){o+=4;continue}}o+=r?1:2}return-1}return function(e,t){var n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){var a=e[n];if("number"==typeof a)return-1;if(a===t)return n;n++}return-1}(t,e)}function Ca(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=0;a<t.length;a++)if(ba(e,t[a],n))return!0;return!1}function ka(e,t){return e?":not("+t.trim()+")":t}function Ta(e){for(var t=e[0],n=1,a=2,o="",r=!1;n<e.length;){var i=e[n];if("string"==typeof i)if(2&a){var s=e[++n];o+="["+i+(s.length>0?'="'+s+'"':"")+"]"}else 8&a?o+="."+i:4&a&&(o+=" "+i);else""===o||xa(i)||(t+=ka(r,o),o=""),a=i,r=r||!xa(a);n++}return""!==o&&(t+=ka(r,o)),t}var Pa={};function Sa(e){var t=e[3];return wt(t)?t[3]:t}function Oa(e){return Ia(e[13])}function Ma(e){return Ia(e[4])}function Ia(e){for(;null!==e&&!wt(e);)e=e[4];return e}function Fa(e){Da(Wt(),qt(),mn()+e,Qt())}function Da(e,t,n,a){if(!a)if(3==(3&t[2])){var o=e.preOrderCheckHooks;null!==o&&yn(t,o,n)}else{var r=e.preOrderHooks;null!==r&&bn(t,r,0,n)}_n(n)}function Aa(e,t){return e<<17|t<<2}function Ea(e){return e>>17&32767}function Ra(e){return 2|e}function Na(e){return(131068&e)>>2}function ja(e,t){return-131069&e|t<<2}function za(e){return 1|e}function La(e,t){var n=e.contentQueries;if(null!==n)for(var a=0;a<n.length;a+=2){var o=n[a],r=n[a+1];if(-1!==r){var i=e.data[r];sn(o),i.contentQueries(2,t[r],r)}}}function Xa(e,t,n){return Mt(t)?t.createElement(e,n):null===n?t.createElement(e):t.createElementNS(n,e)}function Ua(e,t,n,a,o,r,i,s,l,u){var c=t.blueprint.slice();return c[0]=o,c[2]=140|a,Ut(c),c[3]=c[15]=e,c[8]=n,c[10]=i||e&&e[10],c[11]=s||e&&e[11],c[12]=l||e&&e[12]||null,c[9]=u||e&&e[9]||null,c[6]=r,c[16]=2==t.type?e[16]:c,c}function Ba(e,t,n,a,o,r){var i=n+20,s=e.data[i]||function(e,t,n,a,o,r){var i=Zt(),s=Jt(),l=s?i:i&&i.parent,u=e.data[n]=Qa(0,l&&l!==t?l:null,a,n,o,r);return null===e.firstChild&&(e.firstChild=u),i&&(!s||null!=i.child||null===u.parent&&2!==i.type?s||(i.next=u):i.child=u),u}(e,t,i,a,o,r);return Kt(s,!0),s}function Va(e,t,n){un(t,t[6]);try{var a=e.viewQuery;null!==a&&bo(1,a,n);var o=e.template;null!==o&&Wa(e,t,o,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&La(e,t),e.staticViewQueries&&bo(2,e.viewQuery,n);var r=e.components;null!==r&&function(e,t){for(var n=0;n<t.length;n++)mo(e,t[n])}(t,r)}catch(i){throw e.firstCreatePass&&(e.incompleteFirstPass=!0),i}finally{t[2]&=-5,fn()}}function Ha(e,t,n,a){var o=t[2];if(256!=(256&o)){un(t,t[6]);var r=Qt();try{Ut(t),Vt.lFrame.bindingIndex=e.bindingStartIndex,null!==n&&Wa(e,t,n,2,a);var i=3==(3&o);if(!r)if(i){var s=e.preOrderCheckHooks;null!==s&&yn(t,s,null)}else{var l=e.preOrderHooks;null!==l&&bn(t,l,0,null),xn(t,0)}if(function(e){for(var t=Oa(e);null!==t;t=Ma(t))if(t[2])for(var n=t[9],a=0;a<n.length;a++){var o=n[a],r=o[3];0==(1024&o[2])&&Bt(r,1),o[2]|=1024}}(t),function(e){for(var t=Oa(e);null!==t;t=Ma(t))for(var n=10;n<t.length;n++){var a=t[n],o=a[1];Lt(a)&&Ha(o,a,o.template,a[8])}}(t),null!==e.contentQueries&&La(e,t),!r)if(i){var u=e.contentCheckHooks;null!==u&&yn(t,u)}else{var c=e.contentHooks;null!==c&&bn(t,c,1),xn(t,1)}!function(e,t){try{var n=e.expandoInstructions;if(null!==n)for(var a=e.expandoStartIndex,o=-1,r=0;r<n.length;r++){var i=n[r];"number"==typeof i?i<=0?(_n(0-i),o=a+=9+n[++r]):a+=i:(null!==i&&(an(a,o),i(2,t[o])),o++)}}finally{_n(-1)}}(e,t);var p=e.components;null!==p&&function(e,t){for(var n=0;n<t.length;n++)fo(e,t[n])}(t,p);var d=e.viewQuery;if(null!==d&&bo(2,d,a),!r)if(i){var h=e.viewCheckHooks;null!==h&&yn(t,h)}else{var f=e.viewHooks;null!==f&&bn(t,f,2),xn(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),r||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Bt(t[3],-1))}finally{fn()}}}function qa(e,t,n,a){var o=t[10],r=!Qt(),i=zt(t);try{r&&!i&&o.begin&&o.begin(),i&&Va(e,t,a),Ha(e,t,n,a)}finally{r&&!i&&o.end&&o.end()}}function Wa(e,t,n,a,o){var r=mn();try{_n(-1),2&a&&t.length>20&&Da(e,t,0,Qt()),n(a,o)}finally{_n(r)}}function Ga(e,t,n){Ht()&&(function(e,t,n,a){var o=n.directiveStart,r=n.directiveEnd;e.firstCreatePass||Un(n,t),ha(a,t);for(var i=n.initialInputs,s=o;s<r;s++){var l=e.data[s],u=Pt(l);u&&uo(t,n,l);var c=Jn(t,e,s,n);ha(c,t),null!==i&&co(0,s-o,c,l,0,i),u&&(Nt(n.index,t)[8]=c)}}(e,t,n,At(n,t)),128==(128&n.flags)&&function(e,t,n){var a=n.directiveStart,o=n.directiveEnd,r=e.expandoInstructions,i=e.firstCreatePass,s=n.index-20,l=Vt.lFrame.currentDirectiveIndex;try{_n(s);for(var u=a;u<o;u++){var c=e.data[u],p=t[u];on(u),null!==c.hostBindings||0!==c.hostVars||null!==c.hostAttrs?ao(c,p):i&&r.push(null)}}finally{_n(-1),on(l)}}(e,t,n))}function Za(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:At,a=t.localNames;if(null!==a)for(var o=t.index+1,r=0;r<a.length;r+=2){var i=a[r+1],s=-1===i?n(t,e):e[i];e[o++]=s}}function Ka(e){var t=e.tView;return null===t||t.incompleteFirstPass?e.tView=Ja(1,-1,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts):t}function Ja(e,t,n,a,o,r,i,s,l,u){var c=20+a,p=c+o,d=function(e,t){for(var n=[],a=0;a<t;a++)n.push(a<e?null:Pa);return n}(c,p);return d[1]={type:e,id:t,blueprint:d,template:n,queries:null,viewQuery:s,node:null,data:d.slice().fill(null,c),bindingStartIndex:c,expandoStartIndex:p,expandoInstructions:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof r?r():r,pipeRegistry:"function"==typeof i?i():i,firstChild:null,schemas:l,consts:u,incompleteFirstPass:!1}}function Qa(e,t,n,a,o,r){return{type:n,index:a,injectorIndex:t?t.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,tagName:o,attrs:r,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}function Ya(e,t,n){for(var a in e)if(e.hasOwnProperty(a)){var o=e[a];(n=null===n?{}:n).hasOwnProperty(a)?n[a].push(t,o):n[a]=[t,o]}return n}function $a(e,t,n,a,o,r,i,s){var l,u,c=At(t,n),p=t.inputs;!s&&null!=p&&(l=p[a])?(To(e,n,l,a,o),kt(t)&&function(e,t){var n=Nt(t,e);16&n[2]||(n[2]|=64)}(n,t.index)):3===t.type&&(a="class"===(u=a)?"className":"for"===u?"htmlFor":"formaction"===u?"formAction":"innerHtml"===u?"innerHTML":"readonly"===u?"readOnly":"tabindex"===u?"tabIndex":u,o=null!=i?i(o,t.tagName||"",a):o,Mt(r)?r.setProperty(c,a,o):Sn(a)||(c.setProperty?c.setProperty(a,o):c[a]=o))}function eo(e,t,n,a){var o=!1;if(Ht()){var r=function(e,t,n){var a=e.directiveRegistry,o=null;if(a)for(var r=0;r<a.length;r++){var i=a[r];Ca(n,i.selectors,!1)&&(o||(o=[]),qn(Un(n,t),e,i.type),Pt(i)?(2&n.flags&&fa(n),ro(e,n),o.unshift(i)):o.push(i))}return o}(e,t,n),i=null===a?null:{"":-1};if(null!==r){var s=0;o=!0,so(n,e.data.length,r.length);for(var l=0;l<r.length;l++){var u=r[l];u.providersResolver&&u.providersResolver(u)}oo(e,n,r.length);for(var c=!1,p=!1,d=0;d<r.length;d++){var h=r[d];n.mergedAttrs=On(n.mergedAttrs,h.hostAttrs),lo(e,t,h),io(e.data.length-1,h,i),null!==h.contentQueries&&(n.flags|=8),null===h.hostBindings&&null===h.hostAttrs&&0===h.hostVars||(n.flags|=128),!c&&(h.onChanges||h.onInit||h.doCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index-20),c=!0),p||!h.onChanges&&!h.doCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index-20),p=!0),to(e,h),s+=h.hostVars}!function(e,t){for(var n=t.directiveEnd,a=e.data,o=t.attrs,r=[],i=null,s=null,l=t.directiveStart;l<n;l++){var u=a[l],c=u.inputs,p=null===o||va(t)?null:po(c,o);r.push(p),i=Ya(c,l,i),s=Ya(u.outputs,l,s)}null!==i&&(i.hasOwnProperty("class")&&(t.flags|=16),i.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=r,t.inputs=i,t.outputs=s}(e,n),no(e,t,s)}i&&function(e,t,n){if(t)for(var a=e.localNames=[],o=0;o<t.length;o+=2){var r=n[t[o+1]];if(null==r)throw new Error("Export of name '".concat(t[o+1],"' not found!"));a.push(t[o],r)}}(n,a,i)}return n.mergedAttrs=On(n.mergedAttrs,n.attrs),o}function to(e,t){var n=e.expandoInstructions;n.push(t.hostBindings),0!==t.hostVars&&n.push(t.hostVars)}function no(e,t,n){for(var a=0;a<n;a++)t.push(Pa),e.blueprint.push(Pa),e.data.push(null)}function ao(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function oo(e,t,n){var a=20-t.index,o=e.data.length-(65535&t.providerIndexes);(e.expandoInstructions||(e.expandoInstructions=[])).push(a,o,n)}function ro(e,t){t.flags|=2,(e.components||(e.components=[])).push(t.index)}function io(e,t,n){if(n){if(t.exportAs)for(var a=0;a<t.exportAs.length;a++)n[t.exportAs[a]]=e;Pt(t)&&(n[""]=e)}}function so(e,t,n){e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function lo(e,t,n){e.data.push(n);var a=n.factory||(n.factory=yt(n.type)),o=new kn(a,Pt(n),null);e.blueprint.push(o),t.push(o)}function uo(e,t,n){var a=At(t,e),o=Ka(n),r=e[10],i=_o(e,Ua(e,o,null,n.onPush?64:16,a,t,r,r.createRenderer(a,n)));e[t.index]=i}function co(e,t,n,a,o,r){var i=r[t];if(null!==i)for(var s=a.setInput,l=0;l<i.length;){var u=i[l++],c=i[l++],p=i[l++];null!==s?a.setInput(n,p,u,c):n[c]=p}}function po(e,t){for(var n=null,a=0;a<t.length;){var o=t[a];if(0!==o)if(5!==o){if("number"==typeof o)break;e.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,e[o],t[a+1])),a+=2}else a+=2;else a+=4}return n}function ho(e,t,n,a){return new Array(e,!0,!1,t,null,0,a,n,null,null)}function fo(e,t){var n=Nt(t,e);if(Lt(n)){var a=n[1];80&n[2]?Ha(a,n,a.template,n[8]):n[5]>0&&function e(t){for(var n=Oa(t);null!==n;n=Ma(n))for(var a=10;a<n.length;a++){var o=n[a];if(1024&o[2]){var r=o[1];Ha(r,o,r.template,o[8])}else o[5]>0&&e(o)}var i=t[1].components;if(null!==i)for(var s=0;s<i.length;s++){var l=Nt(i[s],t);Lt(l)&&l[5]>0&&e(l)}}(n)}}function mo(e,t){var n=Nt(t,e),a=n[1];!function(e,t){for(var n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(a,n),Va(a,n,n[8])}function _o(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function go(e){for(;e;){e[2]|=64;var t=Sa(e);if(St(e)&&!t)return e;e=t}return null}function vo(e,t,n){var a=t[10];a.begin&&a.begin();try{Ha(e,t,e.template,n)}catch(o){throw ko(t,o),o}finally{a.end&&a.end()}}function yo(e){!function(e){for(var t=0;t<e.components.length;t++){var n=e.components[t],a=jt(n),o=a[1];qa(o,a,o.template,n)}}(e[8])}function bo(e,t,n){sn(0),t(e,n)}var xo=Promise.resolve(null);function wo(e){return e[7]||(e[7]=[])}function Co(e){return e.cleanup||(e.cleanup=[])}function ko(e,t){var n=e[9],a=n?n.get(aa,null):null;a&&a.handleError(t)}function To(e,t,n,a,o){for(var r=0;r<n.length;){var i=n[r++],s=n[r++],l=t[i],u=e.data[i];null!==u.setInput?u.setInput(l,o,a,s):l[s]=o}}function Po(e,t,n){var a=Dt(t,e),o=e[11];Mt(o)?o.setValue(a,n):a.textContent=n}function So(e,t){var n=t[3];return-1===e.index?wt(n)?n:null:n}function Oo(e,t){var n=So(e,t);return n?Lo(t[11],n[7]):null}function Mo(e,t,n,a,o){if(null!=a){var r,i=!1;wt(a)?r=a:xt(a)&&(i=!0,a=a[0]);var s=Ft(a);0===e&&null!==n?null==o?jo(t,n,s):No(t,n,s,o||null):1===e&&null!==n?No(t,n,s,o||null):2===e?function(e,t,n){var a=Lo(e,t);a&&function(e,t,n,a){Mt(e)?e.removeChild(t,n,a):t.removeChild(n)}(e,a,t,n)}(t,s,i):3===e&&t.destroyNode(s),null!=r&&function(e,t,n,a,o){var r=n[7];r!==Ft(n)&&Mo(t,e,a,r,o);for(var i=10;i<n.length;i++){var s=n[i];Vo(s[1],s,e,t,a,r)}}(t,e,r,n,o)}}function Io(e,t,n,a){var o=Oo(e.node,t);o&&Vo(e,t,t[11],n?1:2,o,a)}function Fo(e,t){var n=e[9],a=n.indexOf(t);1024&t[2]&&Bt(t[3],-1),n.splice(a,1)}function Do(e,t){if(!(e.length<=10)){var n=10+t,a=e[n];if(a){var o=a[17];null!==o&&o!==e&&Fo(o,a),t>0&&(e[n-1][4]=a[4]);var r=tt(e,10+t);Io(a[1],a,!1,null);var i=r[19];null!==i&&i.detachView(r[1]),a[3]=null,a[4]=null,a[2]&=-129}return a}}function Ao(e,t){if(!(256&t[2])){var n=t[11];Mt(n)&&n.destroyNode&&Vo(e,t,n,3,null,null),function(e){var t=e[13];if(!t)return Ro(e[1],e);for(;t;){var n=null;if(xt(t))n=t[13];else{var a=t[10];a&&(n=a)}if(!n){for(;t&&!t[4]&&t!==e;)xt(t)&&Ro(t[1],t),t=Eo(t,e);null===t&&(t=e),xt(t)&&Ro(t[1],t),n=t&&t[4]}t=n}}(t)}}function Eo(e,t){var n;return xt(e)&&(n=e[6])&&2===n.type?So(n,e):e[3]===t?null:e[3]}function Ro(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){var n;if(null!=e&&null!=(n=e.destroyHooks))for(var a=0;a<n.length;a+=2){var o=t[n[a]];if(!(o instanceof kn)){var r=n[a+1];if(Array.isArray(r))for(var i=0;i<r.length;i+=2)r[i+1].call(o[r[i]]);else r.call(o)}}}(e,t),function(e,t){var n=e.cleanup;if(null!==n){for(var a=t[7],o=0;o<n.length-1;o+=2)if("string"==typeof n[o]){var r=n[o+1],i="function"==typeof r?r(t):Ft(t[r]),s=a[n[o+2]],l=n[o+3];"boolean"==typeof l?i.removeEventListener(n[o],s,l):l>=0?a[l]():a[-l].unsubscribe(),o+=2}else n[o].call(a[n[o+1]]);t[7]=null}}(e,t);var n=t[6];n&&3===n.type&&Mt(t[11])&&t[11].destroy();var a=t[17];if(null!==a&&wt(t[3])){a!==t[3]&&Fo(a,t);var o=t[19];null!==o&&o.detachView(e)}}}function No(e,t,n,a){Mt(e)?e.insertBefore(t,n,a):t.insertBefore(n,a,!0)}function jo(e,t,n){Mt(e)?e.appendChild(t,n):t.appendChild(n)}function zo(e,t,n,a){null!==a?No(e,t,n,a):jo(e,t,n)}function Lo(e,t){return Mt(e)?e.parentNode(t):t.parentNode}function Xo(e,t,n,a){var o=function(e,t,n){for(var a=t.parent;null!=a&&(4===a.type||5===a.type);)a=(t=a).parent;if(null==a){var o=n[6];return 2===o.type?Oo(o,n):n[0]}if(t&&5===t.type&&4&t.flags)return At(t,n).parentNode;if(2&a.flags){var r=e.data,i=r[r[a.index].directiveStart].encapsulation;if(i!==it.ShadowDom&&i!==it.Native)return null}return At(a,n)}(e,a,t);if(null!=o){var r=t[11],i=function(e,t){if(2===e.type){var n=So(e,t);return null===n?null:Uo(n.indexOf(t,10)-10,n)}return 4===e.type||5===e.type?At(e,t):null}(a.parent||t[6],t);if(Array.isArray(n))for(var s=0;s<n.length;s++)zo(r,o,n[s],i);else zo(r,o,n,i)}}function Uo(e,t){var n=10+e+1;if(n<t.length){var a=t[n],o=a[1].firstChild;if(null!==o)return function e(t,n){if(null!==n){var a=n.type;if(3===a)return At(n,t);if(0===a)return Uo(-1,t[n.index]);if(4===a||5===a){var o=n.child;if(null!==o)return e(t,o);var r=t[n.index];return wt(r)?Uo(-1,r):Ft(r)}var i=t[16],s=i[6],l=Sa(i),u=s.projection[n.projection];return null!=u?e(l,u):e(t,n.next)}return null}(a,o)}return t[7]}function Bo(e,t,n,a,o,r,i){for(;null!=n;){var s=a[n.index],l=n.type;i&&0===t&&(s&&ha(Ft(s),a),n.flags|=4),64!=(64&n.flags)&&(4===l||5===l?(Bo(e,t,n.child,a,o,r,!1),Mo(t,e,o,s,r)):1===l?Ho(e,t,a,n,o,r):Mo(t,e,o,s,r)),n=i?n.projectionNext:n.next}}function Vo(e,t,n,a,o,r){Bo(n,a,e.node.child,t,o,r,!1)}function Ho(e,t,n,a,o,r){var i=n[16],s=i[6].projection[a.projection];if(Array.isArray(s))for(var l=0;l<s.length;l++)Mo(t,e,o,s[l],r);else Bo(e,t,s,i[3],o,r,!0)}function qo(e,t,n){Mt(e)?e.setAttribute(t,"style",n):t.style.cssText=n}function Wo(e,t,n){Mt(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n}var Go,Zo,Ko,Jo=function(){function e(t,n){_classCallCheck(this,e),this._lView=t,this._cdRefInjectingView=n,this._appRef=null,this._viewContainerRef=null}return _createClass(e,[{key:"destroy",value:function(){if(this._appRef)this._appRef.detachView(this);else if(this._viewContainerRef){var e=this._viewContainerRef.indexOf(this);e>-1&&this._viewContainerRef.detach(e),this._viewContainerRef=null}Ao(this._lView[1],this._lView)}},{key:"onDestroy",value:function(e){var t,n,a;t=this._lView[1],a=e,wo(n=this._lView).push(a),t.firstCreatePass&&Co(t).push(n[7].length-1,null)}},{key:"markForCheck",value:function(){go(this._cdRefInjectingView||this._lView)}},{key:"detach",value:function(){this._lView[2]&=-129}},{key:"reattach",value:function(){this._lView[2]|=128}},{key:"detectChanges",value:function(){vo(this._lView[1],this._lView,this.context)}},{key:"checkNoChanges",value:function(){!function(e,t,n){Yt(!0);try{vo(e,t,n)}finally{Yt(!1)}}(this._lView[1],this._lView,this.context)}},{key:"attachToViewContainerRef",value:function(e){if(this._appRef)throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef=e}},{key:"detachFromAppRef",value:function(){var e;this._appRef=null,Vo(this._lView[1],e=this._lView,e[11],2,null,null)}},{key:"attachToAppRef",value:function(e){if(this._viewContainerRef)throw new Error("This view is already attached to a ViewContainer!");this._appRef=e}},{key:"rootNodes",get:function(){var e=this._lView;return null==e[0]?function e(t,n,a,o){for(var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];null!==a;){var i=n[a.index];if(null!==i&&o.push(Ft(i)),wt(i))for(var s=10;s<i.length;s++){var l=i[s],u=l[1].firstChild;null!==u&&e(l[1],l,u,o)}var c=a.type;if(4===c||5===c)e(t,n,a.child,o);else if(1===c){var p=n[16],d=p[6].projection[a.projection];if(Array.isArray(d))o.push.apply(o,_toConsumableArray(d));else{var h=Sa(p);e(h[1],h,d,o,!0)}}a=r?a.projectionNext:a.next}return o}(e[1],e,e[6].child,[]):[]}},{key:"context",get:function(){return this._lView[8]}},{key:"destroyed",get:function(){return 256==(256&this._lView[2])}}]),e}(),Qo=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this,e))._view=e,a}return _createClass(n,[{key:"detectChanges",value:function(){yo(this._view)}},{key:"checkNoChanges",value:function(){!function(e){Yt(!0);try{yo(e)}finally{Yt(!1)}}(this._view)}},{key:"context",get:function(){return null}}]),n}(Jo);function Yo(e,t,n){return Go||(Go=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return n}(e)),new Go(At(t,n))}function $o(e,t,n,a){return Zo||(Zo=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this))._declarationView=e,r._declarationTContainer=a,r.elementRef=o,r}return _createClass(n,[{key:"createEmbeddedView",value:function(e){var t=this._declarationTContainer.tViews,n=Ua(this._declarationView,t,e,16,null,t.node);n[17]=this._declarationView[this._declarationTContainer.index];var a=this._declarationView[19];return null!==a&&(n[19]=a.createEmbeddedView(t)),Va(t,n,e),new Jo(n)}}]),n}(e)),0===n.type?new Zo(a,n,Yo(t,n,a)):null}function er(e,t,n,a){var o;Ko||(Ko=function(e){_inherits(a,e);var n=_createSuper(a);function a(e,t,o){var r;return _classCallCheck(this,a),(r=n.call(this))._lContainer=e,r._hostTNode=t,r._hostView=o,r}return _createClass(a,[{key:"clear",value:function(){for(;this.length>0;)this.remove(this.length-1)}},{key:"get",value:function(e){return null!==this._lContainer[8]&&this._lContainer[8][e]||null}},{key:"createEmbeddedView",value:function(e,t,n){var a=e.createEmbeddedView(t||{});return this.insert(a,n),a}},{key:"createComponent",value:function(e,t,n,a,o){var r=n||this.parentInjector;if(!o&&null==e.ngModule&&r){var i=r.get(Qe,null);i&&(o=i)}var s=e.create(r,a,void 0,o);return this.insert(s.hostView,t),s}},{key:"insert",value:function(e,t){var n=e._lView,a=n[1];if(e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(this.allocateContainerIfNeeded(),wt(n[3])){var o=this.indexOf(e);if(-1!==o)this.detach(o);else{var r=n[3],i=new Ko(r,r[6],r[3]);i.detach(i.indexOf(e))}}var s=this._adjustIndex(t);return function(e,t,n,a){var o=10+a,r=n.length;a>0&&(n[o-1][4]=t),a<r-10?(t[4]=n[o],et(n,10+a,t)):(n.push(t),t[4]=null),t[3]=n;var i=t[17];null!==i&&n!==i&&function(e,t){var n=e[9];t[16]!==t[3][3][16]&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(i,t);var s=t[19];null!==s&&s.insertView(e),t[2]|=128}(a,n,this._lContainer,s),Io(a,n,!0,Uo(s,this._lContainer)),e.attachToViewContainerRef(this),et(this._lContainer[8],s,e),e}},{key:"move",value:function(e,t){if(e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}},{key:"indexOf",value:function(e){var t=this._lContainer[8];return null!==t?t.indexOf(e):-1}},{key:"remove",value:function(e){this.allocateContainerIfNeeded();var t=this._adjustIndex(e,-1);!function(e,t){var n=Do(e,t);n&&Ao(n[1],n)}(this._lContainer,t),tt(this._lContainer[8],t)}},{key:"detach",value:function(e){this.allocateContainerIfNeeded();var t=this._adjustIndex(e,-1),n=Do(this._lContainer,t);return n&&null!=tt(this._lContainer[8],t)?new Jo(n):null}},{key:"_adjustIndex",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return null==e?this.length+t:e}},{key:"allocateContainerIfNeeded",value:function(){null===this._lContainer[8]&&(this._lContainer[8]=[])}},{key:"element",get:function(){return Yo(t,this._hostTNode,this._hostView)}},{key:"injector",get:function(){return new $n(this._hostTNode,this._hostView)}},{key:"parentInjector",get:function(){var e=Hn(this._hostTNode,this._hostView),t=An(e,this._hostView),n=function(e,t,n){if(n.parent&&-1!==n.parent.injectorIndex){for(var a=n.parent.injectorIndex,o=n.parent;null!=o.parent&&a==o.parent.injectorIndex;)o=o.parent;return o}for(var r=Dn(e),i=t,s=t[6];r>1;)s=(i=i[15])[6],r--;return s}(e,this._hostView,this._hostTNode);return In(e)&&null!=n?new $n(n,t):new $n(null,this._hostView)}},{key:"length",get:function(){return this._lContainer.length-10}}]),a}(e));var r=a[n.index];if(wt(r))o=r;else{var i;if(4===n.type)i=Ft(r);else if(i=a[11].createComment(""),St(a)){var s=a[11],l=At(n,a);No(s,Lo(s,l),i,function(e,t){return Mt(e)?e.nextSibling(t):t.nextSibling}(s,l))}else Xo(a[1],a,i,n);a[n.index]=o=ho(r,a,i,n),_o(a,o)}return new Ko(o,n,a)}var tr=function(){var e=function e(){_classCallCheck(this,e)};return e.__NG_ELEMENT_ID__=function(){return nr()},e}(),nr=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(e,t,n){if(!n&&kt(e)){var a=Nt(e.index,t);return new Jo(a,a)}return 3===e.type||0===e.type||4===e.type||5===e.type?new Jo(t[16],t):null}(Zt(),qt(),e)},ar=new ze("Set Injector scope."),or={},rr={},ir=[],sr=void 0;function lr(){return void 0===sr&&(sr=new Je),sr}function ur(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3?arguments[3]:void 0;return new cr(e,n,t||lr(),a)}var cr=function(){function e(t,n,a){var o=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;_classCallCheck(this,e),this.parent=a,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;var i=[];n&&$e(n,(function(e){return o.processProvider(e,t,n)})),$e([t],(function(e){return o.processInjectorType(e,[],i)})),this.records.set(Le,dr(void 0,this));var s=this.records.get(ar);this.scope=null!=s?s.value:null,this.source=r||("object"==typeof t?null:be(t))}return _createClass(e,[{key:"destroy",value:function(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((function(e){return e.ngOnDestroy()}))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Xe,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:le.Default;this.assertNotDestroyed();var a,o=He(this);try{if(!(n&le.SkipSelf)){var r=this.records.get(e);if(void 0===r){var i=("function"==typeof(a=e)||"object"==typeof a&&a instanceof ze)&&de(e);r=i&&this.injectableDefInScope(i)?dr(pr(e),or):null,this.records.set(e,r)}if(null!=r)return this.hydrate(e,r)}return(n&le.Self?lr():this.parent).get(e,t=n&le.Optional&&t===Xe?null:t)}catch(s){if("NullInjectorError"===s.name){if((s.ngTempTokenPath=s.ngTempTokenPath||[]).unshift(be(e)),o)throw s;return function(e,t,n,a){var o=e.ngTempTokenPath;throw t.__source&&o.unshift(t.__source),e.message=function(e,t,n){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;e=e&&"\n"===e.charAt(0)&&"\u0275"==e.charAt(1)?e.substr(2):e;var o=be(t);if(Array.isArray(t))o=t.map(be).join(" -> ");else if("object"==typeof t){var r=[];for(var i in t)if(t.hasOwnProperty(i)){var s=t[i];r.push(i+":"+("string"==typeof s?JSON.stringify(s):be(s)))}o="{".concat(r.join(", "),"}")}return"".concat(n).concat(a?"("+a+")":"","[").concat(o,"]: ").concat(e.replace(Ue,"\n  "))}("\n"+e.message,o,"R3InjectorError",a),e.ngTokenPath=o,e.ngTempTokenPath=null,e}(s,e,0,this.source)}throw s}finally{He(o)}}},{key:"_resolveInjectorDefTypes",value:function(){var e=this;this.injectorDefTypes.forEach((function(t){return e.get(t)}))}},{key:"toString",value:function(){var e=[];return this.records.forEach((function(t,n){return e.push(be(n))})),"R3Injector[".concat(e.join(", "),"]")}},{key:"assertNotDestroyed",value:function(){if(this._destroyed)throw new Error("Injector has already been destroyed.")}},{key:"processInjectorType",value:function(e,t,n){var a=this;if(!(e=ke(e)))return!1;var o=fe(e),r=null==o&&e.ngModule||void 0,i=void 0===r?e:r,s=-1!==n.indexOf(i);if(void 0!==r&&(o=fe(r)),null==o)return!1;if(null!=o.imports&&!s){var l;n.push(i);try{$e(o.imports,(function(e){a.processInjectorType(e,t,n)&&(void 0===l&&(l=[]),l.push(e))}))}finally{}if(void 0!==l)for(var u=function(e){var t=l[e],n=t.ngModule,o=t.providers;$e(o,(function(e){return a.processProvider(e,n,o||ir)}))},c=0;c<l.length;c++)u(c)}this.injectorDefTypes.add(i),this.records.set(i,dr(o.factory,or));var p=o.providers;if(null!=p&&!s){var d=e;$e(p,(function(e){return a.processProvider(e,d,p)}))}return void 0!==r&&void 0!==e.providers}},{key:"processProvider",value:function(e,t,n){var a=fr(e=ke(e))?e:ke(e&&e.provide),o=function(e,t,n){return hr(e)?dr(void 0,e.useValue):dr(function(e,t,n){var a,o=void 0;if(fr(e)){var r=ke(e);return yt(r)||pr(r)}if(hr(e))o=function(){return ke(e.useValue)};else if((a=e)&&a.useFactory)o=function(){return e.useFactory.apply(e,_toConsumableArray(Ke(e.deps||[])))};else if(function(e){return!(!e||!e.useExisting)}(e))o=function(){return Ge(ke(e.useExisting))};else{var i=ke(e&&(e.useClass||e.provide));if(i||function(e,t,n){var a="";throw e&&t&&(a=" - only instances of Provider and Type are allowed, got: [".concat(t.map((function(e){return e==n?"?"+n+"?":"..."})).join(", "),"]")),new Error("Invalid provider for the NgModule '".concat(be(e),"'")+a)}(t,n,e),!function(e){return!!e.deps}(e))return yt(i)||pr(i);o=function(){return _construct(i,_toConsumableArray(Ke(e.deps)))}}return o}(e,t,n),or)}(e,t,n);if(fr(e)||!0!==e.multi){var r=this.records.get(a);r&&void 0!==r.multi&&ma()}else{var i=this.records.get(a);i?void 0===i.multi&&ma():((i=dr(void 0,or,!0)).factory=function(){return Ke(i.multi)},this.records.set(a,i)),a=e,i.multi.push(e)}this.records.set(a,o)}},{key:"hydrate",value:function(e,t){var n;return t.value===rr?function(e){throw new Error("Cannot instantiate cyclic dependency! "+e)}(be(e)):t.value===or&&(t.value=rr,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}},{key:"injectableDefInScope",value:function(e){return!!e.providedIn&&("string"==typeof e.providedIn?"any"===e.providedIn||e.providedIn===this.scope:this.injectorDefTypes.has(e.providedIn))}},{key:"destroyed",get:function(){return this._destroyed}}]),e}();function pr(e){var t=de(e),n=null!==t?t.factory:yt(e);if(null!==n)return n;var a=fe(e);if(null!==a)return a.factory;if(e instanceof ze)throw new Error("Token ".concat(be(e)," is missing a \u0275prov definition."));if(e instanceof Function)return function(e){var t=e.length;if(t>0){var n=function(e,t){for(var n=[],a=0;a<e;a++)n.push("?");return n}(t);throw new Error("Can't resolve all parameters for ".concat(be(e),": (").concat(n.join(", "),")."))}var a=function(e){var t=e&&(e[me]||e[ve]||e[ge]&&e[ge]());if(t){var n=function(e){if(e.hasOwnProperty("name"))return e.name;var t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn('DEPRECATED: DI is instantiating a token "'.concat(n,'" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in v10. Please add @Injectable() to the "').concat(n,'" class.')),t}return null}(e);return null!==a?function(){return a.factory(e)}:function(){return new e}}(e);throw new Error("unreachable")}function dr(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{factory:e,value:t,multi:n?[]:void 0}}function hr(e){return null!==e&&"object"==typeof e&&Be in e}function fr(e){return"function"==typeof e}var mr=function(e,t,n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3?arguments[3]:void 0,o=ur(e,t,n,a);return o._resolveInjectorDefTypes(),o}({name:n},t,e,n)},_r=function(){var e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"create",value:function(e,t){return Array.isArray(e)?mr(e,t,""):mr(e.providers,e.parent,e.name||"")}}]),e}();return e.THROW_IF_NOT_FOUND=Xe,e.NULL=new Je,e.\u0275prov=ce({token:e,providedIn:"any",factory:function(){return Ge(Le)}}),e.__NG_ELEMENT_ID__=-1,e}(),gr=new ze("AnalyzeForEntryComponents"),vr=new Map,yr=new Set;function br(e){return"string"==typeof e?e:e.text()}function xr(e,t,n){var a=n?e.styles:null,o=n?e.classes:null,r=0;if(null!==t)for(var i=0;i<t.length;i++){var s=t[i];"number"==typeof s?r=s:1==r?o=xe(o,s):2==r&&(a=xe(a,s+": "+t[++i]+";"))}n?e.styles=a:e.stylesWithoutHost=a,n?e.classes=o:e.classesWithoutHost=o}var wr=null;function Cr(){if(!wr){var e=Ie.Symbol;if(e&&e.iterator)wr=e.iterator;else for(var t=Object.getOwnPropertyNames(Map.prototype),n=0;n<t.length;++n){var a=t[n];"entries"!==a&&"size"!==a&&Map.prototype[a]===Map.prototype.entries&&(wr=a)}}return wr}function kr(e,t){return e===t||"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}var Tr=function(){function e(t){_classCallCheck(this,e),this.wrapped=t}return _createClass(e,null,[{key:"wrap",value:function(t){return new e(t)}},{key:"unwrap",value:function(t){return e.isWrapped(t)?t.wrapped:t}},{key:"isWrapped",value:function(t){return t instanceof e}}]),e}();function Pr(e){return!!Sr(e)&&(Array.isArray(e)||!(e instanceof Map)&&Cr()in e)}function Sr(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function Or(e,t,n){return e[t]=n}function Mr(e,t,n){return!Object.is(e[t],n)&&(e[t]=n,!0)}function Ir(e,t,n,a){var o=Mr(e,t,n);return Mr(e,t+1,a)||o}function Fr(e,t,n,a){var o=qt();return Mr(o,tn(),t)&&(Wt(),function(e,t,n,a,o,r){var i=At(e,t),s=t[11];if(null==a)Mt(s)?s.removeAttribute(i,n,r):i.removeAttribute(n);else{var l=null==o?En(a):o(a,e.tagName||"",n);Mt(s)?s.setAttribute(i,n,l,r):r?i.setAttributeNS(r,n,l):i.setAttribute(n,l)}}(gn(),o,e,t,n,a)),Fr}function Dr(e,t,n,a){return Mr(e,tn(),n)?t+En(n)+a:Pa}function Ar(e,t,n,a,o,r,i,s){var l=qt(),u=Wt(),c=e+20,p=u.firstCreatePass?function(e,t,n,a,o,r,i,s,l){var u=t.consts,c=Ba(t,n[6],e,0,i||null,Xt(u,s));eo(t,n,c,Xt(u,l)),vn(t,c);var p=c.tViews=Ja(2,-1,a,o,r,t.directiveRegistry,t.pipeRegistry,null,t.schemas,u),d=Qa(0,null,2,-1,null,null);return d.injectorIndex=c.injectorIndex,p.node=d,null!==t.queries&&(t.queries.template(t,c),p.queries=t.queries.embeddedTView(c)),c}(e,u,l,t,n,a,o,r,i):u.data[c];Kt(p,!1);var d=l[11].createComment("");Xo(u,l,d,p),ha(d,l),_o(l,l[c]=ho(d,l,d,p)),Tt(p)&&Ga(u,l,p),null!=i&&Za(l,p,s)}function Er(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:le.Default,n=qt();return null==n?Ge(e,t):Wn(Zt(),n,ke(e),t)}function Rr(){throw new Error("invalid")}function Nr(e,t,n){var a=qt();return Mr(a,tn(),t)&&$a(Wt(),gn(),a,e,t,a[11],n,!1),Nr}function jr(e,t,n,a,o){var r=o?"class":"style";To(e,n,t.inputs[r],r,a)}function zr(e,t,n,a){var o=qt(),r=Wt(),i=20+e,s=o[11],l=o[i]=Xa(t,s,Vt.lFrame.currentNamespace),u=r.firstCreatePass?function(e,t,n,a,o,r,i){var s=t.consts,l=Xt(s,r),u=Ba(t,n[6],e,3,o,l);return eo(t,n,u,Xt(s,i)),null!==u.attrs&&xr(u,u.attrs,!1),null!==u.mergedAttrs&&xr(u,u.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,u),u}(e,r,o,0,t,n,a):r.data[i];Kt(u,!0);var c=u.mergedAttrs;null!==c&&Tn(s,l,c);var p=u.classes;null!==p&&Wo(s,l,p);var d=u.styles;null!==d&&qo(s,l,d),Xo(r,o,l,u),0===Vt.lFrame.elementDepthCount&&ha(l,o),Vt.lFrame.elementDepthCount++,Tt(u)&&(Ga(r,o,u),function(e,t,n){if(Ct(t))for(var a=t.directiveEnd,o=t.directiveStart;o<a;o++){var r=e.data[o];r.contentQueries&&r.contentQueries(1,n[o],o)}}(r,u,o)),null!==a&&Za(o,u)}function Lr(){var e=Zt();Jt()?Vt.lFrame.isParent=!1:Kt(e=e.parent,!1);var t=e;Vt.lFrame.elementDepthCount--;var n=Wt();n.firstCreatePass&&(vn(n,e),Ct(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&jr(n,t,qt(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&jr(n,t,qt(),t.stylesWithoutHost,!1)}function Xr(e,t,n,a){zr(e,t,n,a),Lr()}function Ur(){return qt()}function Br(e){return!!e&&"function"==typeof e.then}function Vr(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3?arguments[3]:void 0,o=qt(),r=Wt(),i=Zt();return function(e,t,n,a,o,r){var i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7?arguments[7]:void 0,l=Tt(a),u=e.firstCreatePass&&(e.cleanup||(e.cleanup=[])),c=wo(t),p=!0;if(3===a.type){var d=At(a,t),h=s?s(d):st,f=h.target||d,m=c.length,_=s?function(e){return s(Ft(e[a.index])).target}:a.index;if(Mt(n)){var g=null;if(!s&&l&&(g=function(e,t,n,a){var o=e.cleanup;if(null!=o)for(var r=0;r<o.length-1;r+=2){var i=o[r];if(i===n&&o[r+1]===a){var s=t[7],l=o[r+2];return s.length>l?s[l]:null}"string"==typeof i&&(r+=2)}return null}(e,t,o,a.index)),null!==g)(g.__ngLastListenerFn__||g).__ngNextListenerFn__=r,g.__ngLastListenerFn__=r,p=!1;else{r=qr(a,t,r,!1);var v=n.listen(h.name||f,o,r);c.push(r,v),u&&u.push(o,_,m,m+1)}}else r=qr(a,t,r,!0),f.addEventListener(o,r,i),c.push(r),u&&u.push(o,_,m,i)}var y,b=a.outputs;if(p&&null!==b&&(y=b[o])){var x=y.length;if(x)for(var w=0;w<x;w+=2){var C=t[y[w]][y[w+1]].subscribe(r),k=c.length;c.push(r,C),u&&u.push(o,a.index,k,-(k+1))}}}(r,o,o[11],i,e,t,n,a),Vr}function Hr(e,t,n){try{return!1!==t(n)}catch(a){return ko(e,a),!1}}function qr(e,t,n,a){return function o(r){if(r===Function)return n;var i=2&e.flags?Nt(e.index,t):t;0==(32&t[2])&&go(i);for(var s=Hr(t,n,r),l=o.__ngNextListenerFn__;l;)s=Hr(t,l,r)&&s,l=l.__ngNextListenerFn__;return a&&!1===s&&(r.preventDefault(),r.returnValue=!1),s}}function Wr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return function(e){return(Vt.lFrame.contextLView=function(e,t){for(;e>0;)t=t[15],e--;return t}(e,Vt.lFrame.contextLView))[8]}(e)}function Gr(e,t,n){return Zr(e,"",t,"",n),Gr}function Zr(e,t,n,a,o){var r=qt(),i=Dr(r,t,n,a);return i!==Pa&&$a(Wt(),gn(),r,e,i,r[11],o,!1),Zr}var Kr=[];function Jr(e,t,n,a,o){for(var r=e[n+1],i=null===t,s=a?Ea(r):Na(r),l=!1;0!==s&&(!1===l||i);){var u=e[s+1];Qr(e[s],t)&&(l=!0,e[s+1]=a?za(u):Ra(u)),s=a?Ea(u):Na(u)}l&&(e[n+1]=a?Ra(r):za(r))}function Qr(e,t){return null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&ot(e,t)>=0}var Yr={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function $r(e){return e.substring(Yr.key,Yr.keyEnd)}function ei(e,t){var n=Yr.textEnd;return n===t?-1:(t=Yr.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,Yr.key=t,n),ti(e,t,n))}function ti(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function ni(e,t){for(var n=function(e){return function(e){Yr.key=0,Yr.keyEnd=0,Yr.value=0,Yr.valueEnd=0,Yr.textEnd=e.length}(e),ei(e,ti(e,0,Yr.textEnd))}(t);n>=0;n=ei(t,n))nt(e,$r(t),!0)}function ai(e,t){return t>=e.expandoStartIndex}function oi(e,t,n,a,o){var r=null,i=n.directiveEnd,s=n.directiveStylingLast;for(-1===s?s=n.directiveStart:s++;s<i&&(a=ri(a,(r=t[s]).hostAttrs,o),r!==e);)s++;return null!==e&&(n.directiveStylingLast=s),a}function ri(e,t,n){var a=n?1:2,o=-1;if(null!==t)for(var r=0;r<t.length;r++){var i=t[r];"number"==typeof i?o=i:o===a&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),nt(e,i,!!n||t[++r]))}return void 0===e?null:e}function ii(e,t,n,a,o,r,i,s){if(3===t.type){var l=e.data,u=l[s+1];li(1==(1&u)?si(l,t,n,o,Na(u),i):void 0)||(li(r)||2==(2&u)&&(r=si(l,null,n,o,s,i)),function(e,t,n,a,o){var r=Mt(e);if(t)o?r?e.addClass(n,a):n.classList.add(a):r?e.removeClass(n,a):n.classList.remove(a);else{var i=-1==a.indexOf("-")?void 0:2;null==o?r?e.removeStyle(n,a,i):n.style.removeProperty(a):r?e.setStyle(n,a,o,i):n.style.setProperty(a,o)}}(a,i,Dt(mn(),n),o,r))}}function si(e,t,n,a,o,r){for(var i=null===t,s=void 0;o>0;){var l=e[o],u=Array.isArray(l),c=u?l[1]:l,p=null===c,d=n[o+1];d===Pa&&(d=p?Kr:void 0);var h=p?at(d,a):c===a?d:void 0;if(u&&!li(h)&&(h=at(l,a)),li(h)&&(s=h,i))return s;var f=e[o+1];o=i?Ea(f):Na(f)}if(null!==t){var m=r?t.residualClasses:t.residualStyles;null!=m&&(s=at(m,a))}return s}function li(e){return void 0!==e}function ui(e,t){return 0!=(e.flags&(t?16:32))}function ci(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=qt(),a=Wt(),o=e+20,r=a.firstCreatePass?Ba(a,n[6],e,3,null,null):a.data[o],i=n[o]=function(e,t){return Mt(t)?t.createText(e):t.createTextNode(e)}(t,n[11]);Xo(a,n,i,r),Kt(r,!1)}function pi(e){return di("",e,""),pi}function di(e,t,n){var a=qt(),o=Dr(a,e,t,n);return o!==Pa&&Po(a,mn(),o),di}function hi(e,t,n,a,o){var r=qt(),i=function(e,t,n,a,o,r){var i=Ir(e,en(),n,o);return nn(2),i?t+En(n)+a+En(o)+r:Pa}(r,e,t,n,a,o);return i!==Pa&&Po(r,mn(),i),hi}function fi(e,t){var n=jt(e)[1],a=n.data.length-1;vn(n,{directiveStart:a,directiveEnd:a+1})}var mi=function e(){_classCallCheck(this,e)},_i=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"resolveComponentFactory",value:function(e){throw function(e){var t=Error("No component factory found for ".concat(be(e),". Did you add it to @NgModule.entryComponents?"));return t.ngComponent=e,t}(e)}}]),e}(),gi=function(){var e=function e(){_classCallCheck(this,e)};return e.NULL=new _i,e}(),vi=function(){var e=function e(t){_classCallCheck(this,e),this.nativeElement=t};return e.__NG_ELEMENT_ID__=function(){return yi(e)},e}(),yi=function(e){return Yo(e,Zt(),qt())},bi=function e(){_classCallCheck(this,e)},xi=function(){var e={Important:1,DashCase:2};return e[e.Important]="Important",e[e.DashCase]="DashCase",e}(),wi=function(){var e=function e(){_classCallCheck(this,e)};return e.__NG_ELEMENT_ID__=function(){return Ci()},e}(),Ci=function(){var e=qt(),t=Nt(Zt().index,e);return function(e){var t=e[11];if(Mt(t))return t;throw new Error("Cannot inject Renderer2 when the application uses Renderer3!")}(xt(t)?t:e)},ki=function(){var e=function e(){_classCallCheck(this,e)};return e.\u0275prov=ce({token:e,providedIn:"root",factory:function(){return null}}),e}(),Ti=new function e(t){_classCallCheck(this,e),this.full=t,this.major=t.split(".")[0],this.minor=t.split(".")[1],this.patch=t.split(".").slice(2).join(".")}("9.1.12"),Pi=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"supports",value:function(e){return Pr(e)}},{key:"create",value:function(e){return new Oi(e)}}]),e}(),Si=function(e,t){return t},Oi=function(){function e(t){_classCallCheck(this,e),this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=t||Si}return _createClass(e,[{key:"forEachItem",value:function(e){var t;for(t=this._itHead;null!==t;t=t._next)e(t)}},{key:"forEachOperation",value:function(e){for(var t=this._itHead,n=this._removalsHead,a=0,o=null;t||n;){var r=!n||t&&t.currentIndex<Di(n,a,o)?t:n,i=Di(r,a,o),s=r.currentIndex;if(r===n)a--,n=n._nextRemoved;else if(t=t._next,null==r.previousIndex)a++;else{o||(o=[]);var l=i-a,u=s-a;if(l!=u){for(var c=0;c<l;c++){var p=c<o.length?o[c]:o[c]=0,d=p+c;u<=d&&d<l&&(o[c]=p+1)}o[r.previousIndex]=u-l}}i!==s&&e(r,i,s)}}},{key:"forEachPreviousItem",value:function(e){var t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}},{key:"forEachAddedItem",value:function(e){var t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}},{key:"forEachMovedItem",value:function(e){var t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}},{key:"forEachRemovedItem",value:function(e){var t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}},{key:"forEachIdentityChange",value:function(e){var t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}},{key:"diff",value:function(e){if(null==e&&(e=[]),!Pr(e))throw new Error("Error trying to diff '".concat(be(e),"'. Only arrays and iterables are allowed"));return this.check(e)?this:null}},{key:"onDestroy",value:function(){}},{key:"check",value:function(e){var t=this;this._reset();var n,a,o,r=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(var s=0;s<this.length;s++)a=e[s],o=this._trackByFn(s,a),null!==r&&kr(r.trackById,o)?(i&&(r=this._verifyReinsertion(r,a,o,s)),kr(r.item,a)||this._addIdentityChange(r,a)):(r=this._mismatch(r,a,o,s),i=!0),r=r._next}else n=0,function(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++)t(e[n]);else for(var a,o=e[Cr()]();!(a=o.next()).done;)t(a.value)}(e,(function(e){o=t._trackByFn(n,e),null!==r&&kr(r.trackById,o)?(i&&(r=t._verifyReinsertion(r,e,o,n)),kr(r.item,e)||t._addIdentityChange(r,e)):(r=t._mismatch(r,e,o,n),i=!0),r=r._next,n++})),this.length=n;return this._truncate(r),this.collection=e,this.isDirty}},{key:"_reset",value:function(){if(this.isDirty){var e,t;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=t)e.previousIndex=e.currentIndex,t=e._nextMoved;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}},{key:"_mismatch",value:function(e,t,n,a){var o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,a))?(kr(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,a)):null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(kr(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,a)):e=this._addAfter(new Mi(t,n),o,a),e}},{key:"_verifyReinsertion",value:function(e,t,n,a){var o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,a):e.currentIndex!=a&&(e.currentIndex=a,this._addToMoves(e,a)),e}},{key:"_truncate",value:function(e){for(;null!==e;){var t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}},{key:"_reinsertAfter",value:function(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);var a=e._prevRemoved,o=e._nextRemoved;return null===a?this._removalsHead=o:a._nextRemoved=o,null===o?this._removalsTail=a:o._prevRemoved=a,this._insertAfter(e,t,n),this._addToMoves(e,n),e}},{key:"_moveAfter",value:function(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}},{key:"_addAfter",value:function(e,t,n){return this._insertAfter(e,t,n),this._additionsTail=null===this._additionsTail?this._additionsHead=e:this._additionsTail._nextAdded=e,e}},{key:"_insertAfter",value:function(e,t,n){var a=null===t?this._itHead:t._next;return e._next=a,e._prev=t,null===a?this._itTail=e:a._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Fi),this._linkedRecords.put(e),e.currentIndex=n,e}},{key:"_remove",value:function(e){return this._addToRemovals(this._unlink(e))}},{key:"_unlink",value:function(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);var t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}},{key:"_addToMoves",value:function(e,t){return e.previousIndex===t||(this._movesTail=null===this._movesTail?this._movesHead=e:this._movesTail._nextMoved=e),e}},{key:"_addToRemovals",value:function(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Fi),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}},{key:"_addIdentityChange",value:function(e,t){return e.item=t,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=e:this._identityChangesTail._nextIdentityChange=e,e}},{key:"isDirty",get:function(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}}]),e}(),Mi=function e(t,n){_classCallCheck(this,e),this.item=t,this.trackById=n,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null},Ii=function(){function e(){_classCallCheck(this,e),this._head=null,this._tail=null}return _createClass(e,[{key:"add",value:function(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}},{key:"get",value:function(e,t){var n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&kr(n.trackById,e))return n;return null}},{key:"remove",value:function(e){var t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}]),e}(),Fi=function(){function e(){_classCallCheck(this,e),this.map=new Map}return _createClass(e,[{key:"put",value:function(e){var t=e.trackById,n=this.map.get(t);n||(n=new Ii,this.map.set(t,n)),n.add(e)}},{key:"get",value:function(e,t){var n=this.map.get(e);return n?n.get(e,t):null}},{key:"remove",value:function(e){var t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}},{key:"clear",value:function(){this.map.clear()}},{key:"isEmpty",get:function(){return 0===this.map.size}}]),e}();function Di(e,t,n){var a=e.previousIndex;if(null===a)return a;var o=0;return n&&a<n.length&&(o=n[a]),a+t+o}var Ai=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"supports",value:function(e){return e instanceof Map||Sr(e)}},{key:"create",value:function(){return new Ei}}]),e}(),Ei=function(){function e(){_classCallCheck(this,e),this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}return _createClass(e,[{key:"forEachItem",value:function(e){var t;for(t=this._mapHead;null!==t;t=t._next)e(t)}},{key:"forEachPreviousItem",value:function(e){var t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}},{key:"forEachChangedItem",value:function(e){var t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}},{key:"forEachAddedItem",value:function(e){var t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}},{key:"forEachRemovedItem",value:function(e){var t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}},{key:"diff",value:function(e){if(e){if(!(e instanceof Map||Sr(e)))throw new Error("Error trying to diff '".concat(be(e),"'. Only maps and objects are allowed"))}else e=new Map;return this.check(e)?this:null}},{key:"onDestroy",value:function(){}},{key:"check",value:function(e){var t=this;this._reset();var n=this._mapHead;if(this._appendAfter=null,this._forEach(e,(function(e,a){if(n&&n.key===a)t._maybeAddToChanges(n,e),t._appendAfter=n,n=n._next;else{var o=t._getOrCreateRecordForKey(a,e);n=t._insertBeforeOrAppend(n,o)}})),n){n._prev&&(n._prev._next=null),this._removalsHead=n;for(var a=n;null!==a;a=a._nextRemoved)a===this._mapHead&&(this._mapHead=null),this._records.delete(a.key),a._nextRemoved=a._next,a.previousValue=a.currentValue,a.currentValue=null,a._prev=null,a._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}},{key:"_insertBeforeOrAppend",value:function(e,t){if(e){var n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}},{key:"_getOrCreateRecordForKey",value:function(e,t){if(this._records.has(e)){var n=this._records.get(e);this._maybeAddToChanges(n,t);var a=n._prev,o=n._next;return a&&(a._next=o),o&&(o._prev=a),n._next=null,n._prev=null,n}var r=new Ri(e);return this._records.set(e,r),r.currentValue=t,this._addToAdditions(r),r}},{key:"_reset",value:function(){if(this.isDirty){var e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}},{key:"_maybeAddToChanges",value:function(e,t){kr(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}},{key:"_addToAdditions",value:function(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}},{key:"_addToChanges",value:function(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}},{key:"_forEach",value:function(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((function(n){return t(e[n],n)}))}},{key:"isDirty",get:function(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}}]),e}(),Ri=function e(t){_classCallCheck(this,e),this.key=t,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null},Ni=function(){var e=function(){function e(t){_classCallCheck(this,e),this.factories=t}return _createClass(e,[{key:"find",value:function(e){var t,n=this.factories.find((function(t){return t.supports(e)}));if(null!=n)return n;throw new Error("Cannot find a differ supporting object '".concat(e,"' of type '").concat((t=e).name||typeof t,"'"))}}],[{key:"create",value:function(t,n){if(null!=n){var a=n.factories.slice();t=t.concat(a)}return new e(t)}},{key:"extend",value:function(t){return{provide:e,useFactory:function(n){if(!n)throw new Error("Cannot extend IterableDiffers without a parent injector");return e.create(t,n)},deps:[[e,new se,new re]]}}}]),e}();return e.\u0275prov=ce({token:e,providedIn:"root",factory:function(){return new e([new Pi])}}),e}(),ji=function(){var e=function(){function e(t){_classCallCheck(this,e),this.factories=t}return _createClass(e,[{key:"find",value:function(e){var t=this.factories.find((function(t){return t.supports(e)}));if(t)return t;throw new Error("Cannot find a differ supporting object '".concat(e,"'"))}}],[{key:"create",value:function(t,n){if(n){var a=n.factories.slice();t=t.concat(a)}return new e(t)}},{key:"extend",value:function(t){return{provide:e,useFactory:function(n){if(!n)throw new Error("Cannot extend KeyValueDiffers without a parent injector");return e.create(t,n)},deps:[[e,new se,new re]]}}}]),e}();return e.\u0275prov=ce({token:e,providedIn:"root",factory:function(){return new e([new Ai])}}),e}(),zi=[new Ai],Li=new Ni([new Pi]),Xi=new ji(zi),Ui=function(){var e=function e(){_classCallCheck(this,e)};return e.__NG_ELEMENT_ID__=function(){return Bi(e,vi)},e}(),Bi=function(e,t){return $o(e,t,Zt(),qt())},Vi=function(){var e=function e(){_classCallCheck(this,e)};return e.__NG_ELEMENT_ID__=function(){return Hi(e,vi)},e}(),Hi=function(e,t){return er(e,t,Zt(),qt())},qi={},Wi=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this)).ngModule=e,a}return _createClass(n,[{key:"resolveComponentFactory",value:function(e){var t=vt(e);return new Ki(t,this.ngModule)}}]),n}(gi);function Gi(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push({propName:e[n],templateName:n});return t}var Zi=new ze("SCHEDULER_TOKEN",{providedIn:"root",factory:function(){return Nn}}),Ki=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this)).componentDef=e,o.ngModule=a,o.componentType=e.type,o.selector=e.selectors.map(Ta).join(","),o.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],o.isBoundToModule=!!a,o}return _createClass(n,[{key:"create",value:function(e,t,n,a){var o,r,i=(a=a||this.ngModule)?function(e,t){return{get:function(n,a,o){var r=e.get(n,qi,o);return r!==qi||a===qi?r:t.get(n,a,o)}}}(e,a.injector):e,s=i.get(bi,It),l=i.get(ki,null),u=s.createRenderer(null,this.componentDef),c=this.componentDef.selectors[0][0]||"div",p=n?function(e,t,n){if(Mt(e))return e.selectRootElement(t,n===it.ShadowDom);var a="string"==typeof t?e.querySelector(t):t;return a.textContent="",a}(u,n,this.componentDef.encapsulation):Xa(c,s.createRenderer(null,this.componentDef),function(e){var t=e.toLowerCase();return"svg"===t?"http://www.w3.org/2000/svg":"math"===t?"http://www.w3.org/1998/MathML/":null}(c)),d=this.componentDef.onPush?576:528,h="string"==typeof n&&/^#root-ng-internal-isolated-\d+/.test(n),f={components:[],scheduler:Nn,clean:xo,playerHandler:null,flags:0},m=Ja(0,-1,null,1,0,null,null,null,null,null),_=Ua(null,m,f,d,null,null,s,u,l,i);un(_,null);try{var g=function(e,t,n,a,o,r){var i=n[1];n[20]=e;var s=Ba(i,null,0,3,null,null),l=s.mergedAttrs=t.hostAttrs;null!==l&&(xr(s,l,!0),null!==e&&(Tn(o,e,l),null!==s.classes&&Wo(o,e,s.classes),null!==s.styles&&qo(o,e,s.styles)));var u=a.createRenderer(e,t),c=Ua(n,Ka(t),null,t.onPush?64:16,n[20],s,a,u,void 0);return i.firstCreatePass&&(qn(Un(s,n),i,t.type),ro(i,s),so(s,n.length,1)),_o(n,c),n[20]=c}(p,this.componentDef,_,s,u);if(p)if(n)Tn(u,p,["ng-version",Ti.full]);else{var v=function(e){for(var t=[],n=[],a=1,o=2;a<e.length;){var r=e[a];if("string"==typeof r)2===o?""!==r&&t.push(r,e[++a]):8===o&&n.push(r);else{if(!xa(o))break;o=r}a++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]),y=v.attrs,b=v.classes;y&&Tn(u,p,y),b&&b.length>0&&Wo(u,p,b.join(" "))}if(r=Et(m,0),void 0!==t)for(var x=r.projection=[],w=0;w<this.ngContentSelectors.length;w++){var C=t[w];x.push(null!=C?Array.from(C):null)}o=function(e,t,n,a,o){var r=n[1],i=function(e,t,n){var a=Zt();e.firstCreatePass&&(n.providersResolver&&n.providersResolver(n),oo(e,a,1),lo(e,t,n));var o=Jn(t,e,t.length-1,a);ha(o,t);var r=At(a,t);return r&&ha(r,t),o}(r,n,t);a.components.push(i),e[8]=i,o&&o.forEach((function(e){return e(i,t)})),t.contentQueries&&t.contentQueries(1,i,n.length-1);var s=Zt();if(r.firstCreatePass&&(null!==t.hostBindings||null!==t.hostAttrs)){_n(s.index-20);var l=n[1];to(l,t),no(l,n,t.hostVars),ao(t,i)}return i}(g,this.componentDef,_,f,[fi]),Va(m,_,null)}finally{fn()}var k=new Ji(this.componentType,o,Yo(vi,r,_),_,r);return n&&!h||(m.node.child=r),k}},{key:"inputs",get:function(){return Gi(this.componentDef.inputs)}},{key:"outputs",get:function(){return Gi(this.componentDef.outputs)}}]),n}(mi),Ji=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r,i){var s,l,u,c;return _classCallCheck(this,n),(s=t.call(this)).location=o,s._rootLView=r,s._tNode=i,s.destroyCbs=[],s.instance=a,s.hostView=s.changeDetectorRef=new Qo(r),l=r[1],u=r,null==(c=l.node)&&(l.node=c=Qa(0,null,2,-1,null,null)),u[6]=c,s.componentType=e,s}return _createClass(n,[{key:"destroy",value:function(){this.destroyCbs&&(this.destroyCbs.forEach((function(e){return e()})),this.destroyCbs=null,!this.hostView.destroyed&&this.hostView.destroy())}},{key:"onDestroy",value:function(e){this.destroyCbs&&this.destroyCbs.push(e)}},{key:"injector",get:function(){return new $n(this._tNode,this._rootLView)}}]),n}(function(){return function e(){_classCallCheck(this,e)}}()),Qi=void 0,Yi=["en",[["a","p"],["AM","PM"],Qi],[["AM","PM"],Qi,Qi],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Qi,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Qi,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Qi,"{1} 'at' {0}",Qi],[".",",",";","%","+","-","E","\xd7","\u2030","\u221e","NaN",":"],["#,##0.###","#,##0%","\xa4#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){var t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}],$i={};function es(e){var t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e),n=ts(t);if(n)return n;var a=t.split("-")[0];if(n=ts(a))return n;if("en"===a)return Yi;throw new Error('Missing locale data for the locale "'.concat(e,'".'))}function ts(e){return e in $i||($i[e]=Ie.ng&&Ie.ng.common&&Ie.ng.common.locales&&Ie.ng.common.locales[e]),$i[e]}var ns=function(){var e={LocaleId:0,DayPeriodsFormat:1,DayPeriodsStandalone:2,DaysFormat:3,DaysStandalone:4,MonthsFormat:5,MonthsStandalone:6,Eras:7,FirstDayOfWeek:8,WeekendRange:9,DateFormat:10,TimeFormat:11,DateTimeFormat:12,NumberSymbols:13,NumberFormats:14,CurrencyCode:15,CurrencySymbol:16,CurrencyName:17,Currencies:18,Directionality:19,PluralCase:20,ExtraData:21};return e[e.LocaleId]="LocaleId",e[e.DayPeriodsFormat]="DayPeriodsFormat",e[e.DayPeriodsStandalone]="DayPeriodsStandalone",e[e.DaysFormat]="DaysFormat",e[e.DaysStandalone]="DaysStandalone",e[e.MonthsFormat]="MonthsFormat",e[e.MonthsStandalone]="MonthsStandalone",e[e.Eras]="Eras",e[e.FirstDayOfWeek]="FirstDayOfWeek",e[e.WeekendRange]="WeekendRange",e[e.DateFormat]="DateFormat",e[e.TimeFormat]="TimeFormat",e[e.DateTimeFormat]="DateTimeFormat",e[e.NumberSymbols]="NumberSymbols",e[e.NumberFormats]="NumberFormats",e[e.CurrencyCode]="CurrencyCode",e[e.CurrencySymbol]="CurrencySymbol",e[e.CurrencyName]="CurrencyName",e[e.Currencies]="Currencies",e[e.Directionality]="Directionality",e[e.PluralCase]="PluralCase",e[e.ExtraData]="ExtraData",e}();function as(e){var t;null==(t=e)&&function(e,t,n,a){throw new Error("ASSERTION ERROR: Expected localeId to be defined"+" [Expected=> null != ".concat(t," <=Actual]"))}(0,t),"string"==typeof e&&e.toLowerCase().replace(/_/g,"-")}var os=new Map,rs=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;_classCallCheck(this,n),(o=t.call(this))._parent=a,o._bootstrapComponents=[],o.injector=_assertThisInitialized(o),o.destroyCbs=[],o.componentFactoryResolver=new Wi(_assertThisInitialized(o));var r=bt(e),i=e[Re]||null;return i&&as(i),o._bootstrapComponents=jn(r.bootstrap),o._r3Injector=ur(e,a,[{provide:Qe,useValue:_assertThisInitialized(o)},{provide:gi,useValue:o.componentFactoryResolver}],be(e)),o._r3Injector._resolveInjectorDefTypes(),o.instance=o.get(e),o}return _createClass(n,[{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_r.THROW_IF_NOT_FOUND,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:le.Default;return e===_r||e===Qe||e===Le?this:this._r3Injector.get(e,t,n)}},{key:"destroy",value:function(){var e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((function(e){return e()})),this.destroyCbs=null}},{key:"onDestroy",value:function(e){this.destroyCbs.push(e)}}]),n}(Qe),is=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this)).moduleType=e,null!==bt(e)&&function e(t){if(null!==t.\u0275mod.id){var n=t.\u0275mod.id;(function(e,t,n){if(t&&t!==n)throw new Error("Duplicate module registered for ".concat(e," - ").concat(be(t)," vs ").concat(be(t.name)))})(n,os.get(n),t),os.set(n,t)}var a=t.\u0275mod.imports;a instanceof Function&&(a=a()),a&&a.forEach((function(t){return e(t)}))}(e),a}return _createClass(n,[{key:"create",value:function(e){return new rs(this.moduleType,e)}}]),n}(Ye);function ss(e,t){var n=e[t];return n===Pa?void 0:n}function ls(e,t){var n,a=Wt(),o=e+20;a.firstCreatePass?(n=function(e,t){if(t)for(var n=t.length-1;n>=0;n--){var a=t[n];if(e===a.name)return a}throw new Error("The pipe '".concat(e,"' could not be found!"))}(t,a.pipeRegistry),a.data[o]=n,n.onDestroy&&(a.destroyHooks||(a.destroyHooks=[])).push(o,n.onDestroy)):n=a.data[o];var r=n.factory||(n.factory=yt(n.type)),i=qe(Er),s=Ln(!1),l=r();return Ln(s),qe(i),function(e,t,n,a){var o=n+20;o>=e.data.length&&(e.data[o]=null,e.blueprint[o]=null),t[o]=a}(a,qt(),e,l),l}function us(e,t,n){var a=qt(),o=Rt(a,e);return ps(a,cs(a,e)?function(e,t,n,a,o,r){var i=t+n;return Mr(e,i,o)?Or(e,i+1,r?a.call(r,o):a(o)):ss(e,i+1)}(a,$t(),t,o.transform,n,o):o.transform(n))}function cs(e,t){return e[1].data[t+20].pure}function ps(e,t){return Tr.isWrapped(t)&&(t=Tr.unwrap(t),e[en()]=Pa),t}var ds=function(e){_inherits(n,e);var t=_createSuper(n);function n(){var e,a=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return _classCallCheck(this,n),(e=t.call(this)).__isAsync=a,e}return _createClass(n,[{key:"emit",value:function(e){_get(_getPrototypeOf(n.prototype),"next",this).call(this,e)}},{key:"subscribe",value:function(e,t,a){var o,r=function(e){return null},i=function(){return null};e&&"object"==typeof e?(o=this.__isAsync?function(t){setTimeout((function(){return e.next(t)}))}:function(t){e.next(t)},e.error&&(r=this.__isAsync?function(t){setTimeout((function(){return e.error(t)}))}:function(t){e.error(t)}),e.complete&&(i=this.__isAsync?function(){setTimeout((function(){return e.complete()}))}:function(){e.complete()})):(o=this.__isAsync?function(t){setTimeout((function(){return e(t)}))}:function(t){e(t)},t&&(r=this.__isAsync?function(e){setTimeout((function(){return t(e)}))}:function(e){t(e)}),a&&(i=this.__isAsync?function(){setTimeout((function(){return a()}))}:function(){a()}));var s=_get(_getPrototypeOf(n.prototype),"subscribe",this).call(this,o,r,i);return e instanceof d&&e.add(s),s}}]),n}(O);function hs(){return this._results[Cr()]()}var fs=function(){function e(){_classCallCheck(this,e),this.dirty=!0,this._results=[],this.changes=new ds,this.length=0;var t=Cr(),n=e.prototype;n[t]||(n[t]=hs)}return _createClass(e,[{key:"map",value:function(e){return this._results.map(e)}},{key:"filter",value:function(e){return this._results.filter(e)}},{key:"find",value:function(e){return this._results.find(e)}},{key:"reduce",value:function(e,t){return this._results.reduce(e,t)}},{key:"forEach",value:function(e){this._results.forEach(e)}},{key:"some",value:function(e){return this._results.some(e)}},{key:"toArray",value:function(){return this._results.slice()}},{key:"toString",value:function(){return this._results.toString()}},{key:"reset",value:function(e){this._results=function e(t,n){void 0===n&&(n=t);for(var a=0;a<t.length;a++){var o=t[a];Array.isArray(o)?(n===t&&(n=t.slice(0,a)),e(o,n)):n!==t&&n.push(o)}return n}(e),this.dirty=!1,this.length=this._results.length,this.last=this._results[this.length-1],this.first=this._results[0]}},{key:"notifyOnChanges",value:function(){this.changes.emit(this)}},{key:"setDirty",value:function(){this.dirty=!0}},{key:"destroy",value:function(){this.changes.complete(),this.changes.unsubscribe()}}]),e}(),ms=function(){function e(t){_classCallCheck(this,e),this.queryList=t,this.matches=null}return _createClass(e,[{key:"clone",value:function(){return new e(this.queryList)}},{key:"setDirty",value:function(){this.queryList.setDirty()}}]),e}(),_s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];_classCallCheck(this,e),this.queries=t}return _createClass(e,[{key:"createEmbeddedView",value:function(t){var n=t.queries;if(null!==n){for(var a=null!==t.contentQueries?t.contentQueries[0]:n.length,o=[],r=0;r<a;r++){var i=n.getByIndex(r);o.push(this.queries[i.indexInDeclarationView].clone())}return new e(o)}return null}},{key:"insertView",value:function(e){this.dirtyQueriesWithMatches(e)}},{key:"detachView",value:function(e){this.dirtyQueriesWithMatches(e)}},{key:"dirtyQueriesWithMatches",value:function(e){for(var t=0;t<this.queries.length;t++)null!==Ps(e,t).matches&&this.queries[t].setDirty()}}]),e}(),gs=function e(t,n,a){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;_classCallCheck(this,e),this.predicate=t,this.descendants=n,this.isStatic=a,this.read=o},vs=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];_classCallCheck(this,e),this.queries=t}return _createClass(e,[{key:"elementStart",value:function(e,t){for(var n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}},{key:"elementEnd",value:function(e){for(var t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}},{key:"embeddedTView",value:function(t){for(var n=null,a=0;a<this.length;a++){var o=null!==n?n.length:0,r=this.getByIndex(a).embeddedTView(t,o);r&&(r.indexInDeclarationView=a,null!==n?n.push(r):n=[r])}return null!==n?new e(n):null}},{key:"template",value:function(e,t){for(var n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}},{key:"getByIndex",value:function(e){return this.queries[e]}},{key:"track",value:function(e){this.queries.push(e)}},{key:"length",get:function(){return this.queries.length}}]),e}(),ys=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;_classCallCheck(this,e),this.metadata=t,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=n}return _createClass(e,[{key:"elementStart",value:function(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}},{key:"elementEnd",value:function(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}},{key:"template",value:function(e,t){this.elementStart(e,t)}},{key:"embeddedTView",value:function(t,n){return this.isApplyingToNode(t)?(this.crossesNgTemplate=!0,this.addMatch(-t.index,n),new e(this.metadata)):null}},{key:"isApplyingToNode",value:function(e){if(this._appliesToNextNode&&!1===this.metadata.descendants){for(var t=this._declarationNodeIndex,n=e.parent;null!==n&&4===n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}},{key:"matchTNode",value:function(e,t){if(Array.isArray(this.metadata.predicate))for(var n=this.metadata.predicate,a=0;a<n.length;a++)this.matchTNodeWithReadOption(e,t,bs(t,n[a]));else{var o=this.metadata.predicate;o===Ui?0===t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Kn(t,e,o,!1,!1))}}},{key:"matchTNodeWithReadOption",value:function(e,t,n){if(null!==n){var a=this.metadata.read;if(null!==a)if(a===vi||a===Vi||a===Ui&&0===t.type)this.addMatch(t.index,-2);else{var o=Kn(t,e,a,!1,!1);null!==o&&this.addMatch(t.index,o)}else this.addMatch(t.index,n)}}},{key:"addMatch",value:function(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}]),e}();function bs(e,t){var n=e.localNames;if(null!==n)for(var a=0;a<n.length;a+=2)if(n[a]===t)return n[a+1];return null}function xs(e,t,n,a){return-1===n?function(e,t){return 3===e.type||4===e.type?Yo(vi,e,t):0===e.type?$o(Ui,vi,e,t):null}(t,e):-2===n?function(e,t,n){return n===vi?Yo(vi,t,e):n===Ui?$o(Ui,vi,t,e):n===Vi?er(Vi,vi,t,e):void 0}(e,t,a):Jn(e,e[1],n,t)}function ws(e,t,n,a){var o=t[19].queries[a];if(null===o.matches){for(var r=e.data,i=n.matches,s=[],l=0;l<i.length;l+=2){var u=i[l];s.push(u<0?null:xs(t,r[u],i[l+1],n.metadata.read))}o.matches=s}return o.matches}function Cs(e){var t=qt(),n=Wt(),a=rn();sn(a+1);var o=Ps(n,a);if(e.dirty&&zt(t)===o.metadata.isStatic){if(null===o.matches)e.reset([]);else{var r=o.crossesNgTemplate?function e(t,n,a,o){var r=t.queries.getByIndex(a),i=r.matches;if(null!==i)for(var s=ws(t,n,r,a),l=0;l<i.length;l+=2){var u=i[l];if(u>0)o.push(s[l/2]);else{for(var c=i[l+1],p=n[-u],d=10;d<p.length;d++){var h=p[d];h[17]===h[3]&&e(h[1],h,c,o)}if(null!==p[9])for(var f=p[9],m=0;m<f.length;m++){var _=f[m];e(_[1],_,c,o)}}}return o}(n,t,a,[]):ws(n,t,o,a);e.reset(r),e.notifyOnChanges()}return!0}return!1}function ks(e,t,n){!function(e,t,n,a,o,r){e.firstCreatePass&&function(e,t,n){null===e.queries&&(e.queries=new vs),e.queries.track(new ys(t,-1))}(e,new gs(n,a,!1,o)),function(e,t){var n=new fs;!function(e,t,n,a){var o=wo(t);o.push(n),e.firstCreatePass&&Co(e).push(a,o.length-1)}(e,t,n,n.destroy),null===t[19]&&(t[19]=new _s),t[19].queries.push(new ms(n))}(e,t)}(Wt(),qt(),e,t,n)}function Ts(){return e=qt(),t=rn(),e[19].queries[t].queryList;var e,t}function Ps(e,t){return e.queries.getByIndex(t)}var Ss=new ze("Application Initializer"),Os=function(){var e=function(){function e(t){var n=this;_classCallCheck(this,e),this.appInits=t,this.initialized=!1,this.done=!1,this.donePromise=new Promise((function(e,t){n.resolve=e,n.reject=t}))}return _createClass(e,[{key:"runInitializers",value:function(){var e=this;if(!this.initialized){var t=[],n=function(){e.done=!0,e.resolve()};if(this.appInits)for(var a=0;a<this.appInits.length;a++){var o=this.appInits[a]();Br(o)&&t.push(o)}Promise.all(t).then((function(){n()})).catch((function(t){e.reject(t)})),0===t.length&&n(),this.initialized=!0}}}]),e}();return e.\u0275fac=function(t){return new(t||e)(Ge(Ss,8))},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}(),Ms=new ze("AppId"),Is={provide:Ms,useFactory:function(){return"".concat(Fs()).concat(Fs()).concat(Fs())},deps:[]};function Fs(){return String.fromCharCode(97+Math.floor(25*Math.random()))}var Ds=new ze("Platform Initializer"),As=new ze("Platform ID"),Es=new ze("appBootstrapListener"),Rs=function(){var e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"log",value:function(e){console.log(e)}},{key:"warn",value:function(e){console.warn(e)}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}(),Ns=new ze("LocaleId"),js=new ze("DefaultCurrencyCode"),zs=function e(t,n){_classCallCheck(this,e),this.ngModuleFactory=t,this.componentFactories=n},Ls=function(e){return new is(e)},Xs=Ls,Us=function(e){return Promise.resolve(Ls(e))},Bs=function(e){var t=Ls(e),n=jn(bt(e).declarations).reduce((function(e,t){var n=vt(t);return n&&e.push(new Ki(n)),e}),[]);return new zs(t,n)},Vs=Bs,Hs=function(e){return Promise.resolve(Bs(e))},qs=function(){var e=function(){function e(){_classCallCheck(this,e),this.compileModuleSync=Xs,this.compileModuleAsync=Us,this.compileModuleAndAllComponentsSync=Vs,this.compileModuleAndAllComponentsAsync=Hs}return _createClass(e,[{key:"clearCache",value:function(){}},{key:"clearCacheFor",value:function(e){}},{key:"getModuleId",value:function(e){}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}(),Ws=new ze("compilerOptions"),Gs=Promise.resolve(0);function Zs(e){"undefined"==typeof Zone?Gs.then((function(){e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}var Ks=function(){function e(t){var n,a,o=t.enableLongStackTrace,r=void 0!==o&&o,i=t.shouldCoalesceEventChangeDetection,s=void 0!==i&&i;if(_classCallCheck(this,e),this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new ds(!1),this.onMicrotaskEmpty=new ds(!1),this.onStable=new ds(!1),this.onError=new ds(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched(),this._nesting=0,this._outer=this._inner=Zone.current,Zone.wtfZoneSpec&&(this._inner=this._inner.fork(Zone.wtfZoneSpec)),Zone.TaskTrackingZoneSpec&&(this._inner=this._inner.fork(new Zone.TaskTrackingZoneSpec)),r&&Zone.longStackTraceZoneSpec&&(this._inner=this._inner.fork(Zone.longStackTraceZoneSpec)),this.shouldCoalesceEventChangeDetection=s,this.lastRequestAnimationFrameId=-1,this.nativeRequestAnimationFrame=function(){var e=Ie.requestAnimationFrame,t=Ie.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){var n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);var a=t[Zone.__symbol__("OriginalDelegate")];a&&(t=a)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,a=!!(n=this).shouldCoalesceEventChangeDetection&&n.nativeRequestAnimationFrame&&function(){!function(e){-1===e.lastRequestAnimationFrameId&&(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(Ie,(function(){e.lastRequestAnimationFrameId=-1,$s(e),Ys(e)})),$s(e))}(n)},n._inner=n._inner.fork({name:"angular",properties:{isAngularZone:!0,maybeDelayChangeDetection:a},onInvokeTask:function(e,t,o,r,i,s){try{return el(n),e.invokeTask(o,r,i,s)}finally{a&&"eventTask"===r.type&&a(),tl(n)}},onInvoke:function(e,t,a,o,r,i,s){try{return el(n),e.invoke(a,o,r,i,s)}finally{tl(n)}},onHasTask:function(e,t,a,o){e.hasTask(a,o),t===a&&("microTask"==o.change?(n._hasPendingMicrotasks=o.microTask,$s(n),Ys(n)):"macroTask"==o.change&&(n.hasPendingMacrotasks=o.macroTask))},onHandleError:function(e,t,a,o){return e.handleError(a,o),n.runOutsideAngular((function(){return n.onError.emit(o)})),!1}})}return _createClass(e,[{key:"run",value:function(e,t,n){return this._inner.run(e,t,n)}},{key:"runTask",value:function(e,t,n,a){var o=this._inner,r=o.scheduleEventTask("NgZoneEvent: "+a,e,Qs,Js,Js);try{return o.runTask(r,t,n)}finally{o.cancelTask(r)}}},{key:"runGuarded",value:function(e,t,n){return this._inner.runGuarded(e,t,n)}},{key:"runOutsideAngular",value:function(e){return this._outer.run(e)}}],[{key:"isInAngularZone",value:function(){return!0===Zone.current.get("isAngularZone")}},{key:"assertInAngularZone",value:function(){if(!e.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}},{key:"assertNotInAngularZone",value:function(){if(e.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}}]),e}();function Js(){}var Qs={};function Ys(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((function(){return e.onStable.emit(null)}))}finally{e.isStable=!0}}}function $s(e){e.hasPendingMicrotasks=!!(e._hasPendingMicrotasks||e.shouldCoalesceEventChangeDetection&&-1!==e.lastRequestAnimationFrameId)}function el(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function tl(e){e._nesting--,Ys(e)}var nl,al=function(){function e(){_classCallCheck(this,e),this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new ds,this.onMicrotaskEmpty=new ds,this.onStable=new ds,this.onError=new ds}return _createClass(e,[{key:"run",value:function(e,t,n){return e.apply(t,n)}},{key:"runGuarded",value:function(e,t,n){return e.apply(t,n)}},{key:"runOutsideAngular",value:function(e){return e()}},{key:"runTask",value:function(e,t,n,a){return e.apply(t,n)}}]),e}(),ol=function(){var e=function(){function e(t){var n=this;_classCallCheck(this,e),this._ngZone=t,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),t.run((function(){n.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}return _createClass(e,[{key:"_watchAngularEvents",value:function(){var e=this;this._ngZone.onUnstable.subscribe({next:function(){e._didWork=!0,e._isZoneStable=!1}}),this._ngZone.runOutsideAngular((function(){e._ngZone.onStable.subscribe({next:function(){Ks.assertNotInAngularZone(),Zs((function(){e._isZoneStable=!0,e._runCallbacksIfReady()}))}})}))}},{key:"increasePendingRequestCount",value:function(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}},{key:"decreasePendingRequestCount",value:function(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}},{key:"isStable",value:function(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}},{key:"_runCallbacksIfReady",value:function(){var e=this;if(this.isStable())Zs((function(){for(;0!==e._callbacks.length;){var t=e._callbacks.pop();clearTimeout(t.timeoutId),t.doneCb(e._didWork)}e._didWork=!1}));else{var t=this.getPendingTasks();this._callbacks=this._callbacks.filter((function(e){return!e.updateCb||!e.updateCb(t)||(clearTimeout(e.timeoutId),!1)})),this._didWork=!0}}},{key:"getPendingTasks",value:function(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((function(e){return{source:e.source,creationLocation:e.creationLocation,data:e.data}})):[]}},{key:"addCallback",value:function(e,t,n){var a=this,o=-1;t&&t>0&&(o=setTimeout((function(){a._callbacks=a._callbacks.filter((function(e){return e.timeoutId!==o})),e(a._didWork,a.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:o,updateCb:n})}},{key:"whenStable",value:function(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}},{key:"getPendingRequestCount",value:function(){return this._pendingCount}},{key:"findProviders",value:function(e,t,n){return[]}}]),e}();return e.\u0275fac=function(t){return new(t||e)(Ge(Ks))},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}(),rl=function(){var e=function(){function e(){_classCallCheck(this,e),this._applications=new Map,il.addToWindow(this)}return _createClass(e,[{key:"registerApplication",value:function(e,t){this._applications.set(e,t)}},{key:"unregisterApplication",value:function(e){this._applications.delete(e)}},{key:"unregisterAllApplications",value:function(){this._applications.clear()}},{key:"getTestability",value:function(e){return this._applications.get(e)||null}},{key:"getAllTestabilities",value:function(){return Array.from(this._applications.values())}},{key:"getAllRootElements",value:function(){return Array.from(this._applications.keys())}},{key:"findTestabilityInTree",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return il.findTestabilityInTree(this,e,t)}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}(),il=new(function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"addToWindow",value:function(e){}},{key:"findTestabilityInTree",value:function(e,t,n){return null}}]),e}()),sl=function(e,t,n){var a=e.get(Ws,[]).concat(t),o=new is(n);if(0===vr.size)return Promise.resolve(o);var r,i,s=(r=a.map((function(e){return e.providers})),i=[],r.forEach((function(e){return e&&i.push.apply(i,_toConsumableArray(e))})),i);if(0===s.length)return Promise.resolve(o);var l=function(){var e=Ie.ng;if(!e||!e.\u0275compilerFacade)throw new Error("Angular JIT compilation failed: '@angular/compiler' not loaded!\n  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.");return e.\u0275compilerFacade}(),u=_r.create({providers:s}).get(l.ResourceLoader);return function(e){var t=[],n=new Map;function a(e){var t=n.get(e);if(!t){var a=function(e){return Promise.resolve(u.get(e))}(e);n.set(e,t=a.then(br))}return t}return vr.forEach((function(e,n){var o=[];e.templateUrl&&o.push(a(e.templateUrl).then((function(t){e.template=t})));var r=e.styleUrls,i=e.styles||(e.styles=[]),s=e.styles.length;r&&r.forEach((function(t,n){i.push(""),o.push(a(t).then((function(a){i[s+n]=a,r.splice(r.indexOf(t),1),0==r.length&&(e.styleUrls=void 0)})))}));var l=Promise.all(o).then((function(){return function(e){yr.delete(e)}(n)}));t.push(l)})),vr=new Map,Promise.all(t).then((function(){}))}().then((function(){return o}))},ll=new ze("AllowMultipleToken"),ul=function e(t,n){_classCallCheck(this,e),this.name=t,this.token=n};function cl(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a="Platform: "+t,o=new ze(a);return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=pl();if(!r||r.injector.get(ll,!1))if(e)e(n.concat(t).concat({provide:o,useValue:!0}));else{var i=n.concat(t).concat({provide:o,useValue:!0},{provide:ar,useValue:"platform"});!function(e){if(nl&&!nl.destroyed&&!nl.injector.get(ll,!1))throw new Error("There can be only one platform. Destroy the previous one to create a new one.");nl=e.get(dl);var t=e.get(Ds,null);t&&t.forEach((function(e){return e()}))}(_r.create({providers:i,name:a}))}return function(e){var t=pl();if(!t)throw new Error("No platform exists!");if(!t.injector.get(e,null))throw new Error("A platform with a different configuration has been created. Please destroy it first.");return t}(o)}}function pl(){return nl&&!nl.destroyed?nl:null}var dl=function(){var e=function(){function e(t){_classCallCheck(this,e),this._injector=t,this._modules=[],this._destroyListeners=[],this._destroyed=!1}return _createClass(e,[{key:"bootstrapModuleFactory",value:function(e,t){var n,a,o=this,r=(n=t?t.ngZone:void 0,a=t&&t.ngZoneEventCoalescing||!1,"noop"===n?new al:("zone.js"===n?void 0:n)||new Ks({enableLongStackTrace:la(),shouldCoalesceEventChangeDetection:a})),i=[{provide:Ks,useValue:r}];return r.run((function(){var t=_r.create({providers:i,parent:o.injector,name:e.moduleType.name}),n=e.create(t),a=n.injector.get(aa,null);if(!a)throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return n.onDestroy((function(){return _l(o._modules,n)})),r.runOutsideAngular((function(){return r.onError.subscribe({next:function(e){a.handleError(e)}})})),function(e,t,a){try{var r=((i=n.injector.get(Os)).runInitializers(),i.donePromise.then((function(){return as(n.injector.get(Ns,"en-US")||"en-US"),o._moduleDoBootstrap(n),n})));return Br(r)?r.catch((function(n){throw t.runOutsideAngular((function(){return e.handleError(n)})),n})):r}catch(s){throw t.runOutsideAngular((function(){return e.handleError(s)})),s}var i}(a,r)}))}},{key:"bootstrapModule",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=hl({},n);return sl(this.injector,a,e).then((function(e){return t.bootstrapModuleFactory(e,a)}))}},{key:"_moduleDoBootstrap",value:function(e){var t=e.injector.get(ml);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((function(e){return t.bootstrap(e)}));else{if(!e.instance.ngDoBootstrap)throw new Error("The module ".concat(be(e.instance.constructor),' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.'));e.instance.ngDoBootstrap(t)}this._modules.push(e)}},{key:"onDestroy",value:function(e){this._destroyListeners.push(e)}},{key:"destroy",value:function(){if(this._destroyed)throw new Error("The platform has already been destroyed!");this._modules.slice().forEach((function(e){return e.destroy()})),this._destroyListeners.forEach((function(e){return e()})),this._destroyed=!0}},{key:"injector",get:function(){return this._injector}},{key:"destroyed",get:function(){return this._destroyed}}]),e}();return e.\u0275fac=function(t){return new(t||e)(Ge(_r))},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}();function hl(e,t){return Array.isArray(t)?t.reduce(hl,e):Object.assign(Object.assign({},e),t)}var fl,ml=((fl=function(){function e(t,n,a,o,r,i){var s=this;_classCallCheck(this,e),this._zone=t,this._console=n,this._injector=a,this._exceptionHandler=o,this._componentFactoryResolver=r,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._enforceNoNewChanges=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._enforceNoNewChanges=la(),this._zone.onMicrotaskEmpty.subscribe({next:function(){s._zone.run((function(){s.tick()}))}});var l=new w((function(e){s._stable=s._zone.isStable&&!s._zone.hasPendingMacrotasks&&!s._zone.hasPendingMicrotasks,s._zone.runOutsideAngular((function(){e.next(s._stable),e.complete()}))})),u=new w((function(e){var t;s._zone.runOutsideAngular((function(){t=s._zone.onStable.subscribe((function(){Ks.assertNotInAngularZone(),Zs((function(){s._stable||s._zone.hasPendingMacrotasks||s._zone.hasPendingMicrotasks||(s._stable=!0,e.next(!0))}))}))}));var n=s._zone.onUnstable.subscribe((function(){Ks.assertInAngularZone(),s._stable&&(s._stable=!1,s._zone.runOutsideAngular((function(){e.next(!1)})))}));return function(){t.unsubscribe(),n.unsubscribe()}}));this.isStable=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=Number.POSITIVE_INFINITY,o=null,r=t[t.length-1];return I(r)?(o=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(a=t.pop())):"number"==typeof r&&(a=t.pop()),null===o&&1===t.length&&t[0]instanceof w?t[0]:G(a)(Z(t,o))}(l,u.pipe((function(e){return K()((t=te,function(e){var n;n="function"==typeof t?t:function(){return t};var a=Object.create(e,$);return a.source=e,a.subjectFactory=n,a})(e));var t})))}return _createClass(e,[{key:"bootstrap",value:function(e,t){var n,a=this;if(!this._initStatus.done)throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");n=e instanceof mi?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);var o=n.isBoundToModule?void 0:this._injector.get(Qe),r=n.create(_r.NULL,[],t||n.selector,o);r.onDestroy((function(){a._unloadComponent(r)}));var i=r.injector.get(ol,null);return i&&r.injector.get(rl).registerApplication(r.location.nativeElement,i),this._loadComponent(r),la()&&this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode."),r}},{key:"tick",value:function(){var e=this;if(this._runningTick)throw new Error("ApplicationRef.tick is called recursively");try{this._runningTick=!0;var t,n=_createForOfIteratorHelper(this._views);try{for(n.s();!(t=n.n()).done;)t.value.detectChanges()}catch(r){n.e(r)}finally{n.f()}if(this._enforceNoNewChanges){var a,o=_createForOfIteratorHelper(this._views);try{for(o.s();!(a=o.n()).done;)a.value.checkNoChanges()}catch(r){o.e(r)}finally{o.f()}}}catch(i){this._zone.runOutsideAngular((function(){return e._exceptionHandler.handleError(i)}))}finally{this._runningTick=!1}}},{key:"attachView",value:function(e){var t=e;this._views.push(t),t.attachToAppRef(this)}},{key:"detachView",value:function(e){var t=e;_l(this._views,t),t.detachFromAppRef()}},{key:"_loadComponent",value:function(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Es,[]).concat(this._bootstrapListeners).forEach((function(t){return t(e)}))}},{key:"_unloadComponent",value:function(e){this.detachView(e.hostView),_l(this.components,e)}},{key:"ngOnDestroy",value:function(){this._views.slice().forEach((function(e){return e.destroy()}))}},{key:"viewCount",get:function(){return this._views.length}}]),e}()).\u0275fac=function(e){return new(e||fl)(Ge(Ks),Ge(Rs),Ge(_r),Ge(aa),Ge(gi),Ge(Os))},fl.\u0275prov=ce({token:fl,factory:fl.\u0275fac}),fl);function _l(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var gl=function e(){_classCallCheck(this,e)},vl=function e(){_classCallCheck(this,e)},yl={factoryPathPrefix:"",factoryPathSuffix:".ngfactory"},bl=function(){var e=function(){function e(t,n){_classCallCheck(this,e),this._compiler=t,this._config=n||yl}return _createClass(e,[{key:"load",value:function(e){return this.loadAndCompile(e)}},{key:"loadAndCompile",value:function(e){var t=this,a=_slicedToArray(e.split("#"),2),o=a[0],r=a[1];return void 0===r&&(r="default"),n("zn8P")(o).then((function(e){return e[r]})).then((function(e){return xl(e,o,r)})).then((function(e){return t._compiler.compileModuleAsync(e)}))}},{key:"loadFactory",value:function(e){var t=_slicedToArray(e.split("#"),2),a=t[0],o=t[1],r="NgFactory";return void 0===o&&(o="default",r=""),n("zn8P")(this._config.factoryPathPrefix+a+this._config.factoryPathSuffix).then((function(e){return e[o+r]})).then((function(e){return xl(e,a,o)}))}}]),e}();return e.\u0275fac=function(t){return new(t||e)(Ge(qs),Ge(vl,8))},e.\u0275prov=ce({token:e,factory:e.\u0275fac}),e}();function xl(e,t,n){if(!e)throw new Error("Cannot find '".concat(n,"' in '").concat(t,"'"));return e}var wl=cl(null,"core",[{provide:As,useValue:"unknown"},{provide:dl,deps:[_r]},{provide:rl,deps:[]},{provide:Rs,deps:[]}]),Cl=[{provide:ml,useClass:ml,deps:[Ks,Rs,_r,aa,gi,Os]},{provide:Zi,deps:[Ks],useFactory:function(e){var t=[];return e.onStable.subscribe((function(){for(;t.length;)t.pop()()})),function(e){t.push(e)}}},{provide:Os,useClass:Os,deps:[[new re,Ss]]},{provide:qs,useClass:qs,deps:[]},Is,{provide:Ni,useFactory:function(){return Li},deps:[]},{provide:ji,useFactory:function(){return Xi},deps:[]},{provide:Ns,useFactory:function(e){return as(e=e||"undefined"!=typeof $localize&&$localize.locale||"en-US"),e},deps:[[new oe(Ns),new re,new se]]},{provide:js,useValue:"USD"}],kl=function(){var e=function e(t){_classCallCheck(this,e)};return e.\u0275mod=ft({type:e}),e.\u0275inj=pe({factory:function(t){return new(t||e)(Ge(ml))},providers:Cl}),e}(),Tl=null;function Pl(){return Tl}var Sl,Ol=new ze("DocumentToken"),Ml=((Sl=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||Sl)},Sl.\u0275prov=ce({factory:Il,token:Sl,providedIn:"platform"}),Sl);function Il(){return Ge(Al)}var Fl,Dl=new ze("Location Initialized"),Al=((Fl=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this))._doc=e,a._init(),a}return _createClass(n,[{key:"_init",value:function(){this.location=Pl().getLocation(),this._history=Pl().getHistory()}},{key:"getBaseHrefFromDOM",value:function(){return Pl().getBaseHref(this._doc)}},{key:"onPopState",value:function(e){Pl().getGlobalEventTarget(this._doc,"window").addEventListener("popstate",e,!1)}},{key:"onHashChange",value:function(e){Pl().getGlobalEventTarget(this._doc,"window").addEventListener("hashchange",e,!1)}},{key:"pushState",value:function(e,t,n){El()?this._history.pushState(e,t,n):this.location.hash=n}},{key:"replaceState",value:function(e,t,n){El()?this._history.replaceState(e,t,n):this.location.hash=n}},{key:"forward",value:function(){this._history.forward()}},{key:"back",value:function(){this._history.back()}},{key:"getState",value:function(){return this._history.state}},{key:"href",get:function(){return this.location.href}},{key:"protocol",get:function(){return this.location.protocol}},{key:"hostname",get:function(){return this.location.hostname}},{key:"port",get:function(){return this.location.port}},{key:"pathname",get:function(){return this.location.pathname},set:function(e){this.location.pathname=e}},{key:"search",get:function(){return this.location.search}},{key:"hash",get:function(){return this.location.hash}}]),n}(Ml)).\u0275fac=function(e){return new(e||Fl)(Ge(Ol))},Fl.\u0275prov=ce({factory:Rl,token:Fl,providedIn:"platform"}),Fl);function El(){return!!window.history.pushState}function Rl(){return new Al(Ge(Ol))}function Nl(e,t){if(0==e.length)return t;if(0==t.length)return e;var n=0;return e.endsWith("/")&&n++,t.startsWith("/")&&n++,2==n?e+t.substring(1):1==n?e+t:e+"/"+t}function jl(e){var t=e.match(/#|\?|$/),n=t&&t.index||e.length;return e.slice(0,n-("/"===e[n-1]?1:0))+e.slice(n)}function zl(e){return e&&"?"!==e[0]?"?"+e:e}var Ll,Xl=((Ll=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||Ll)},Ll.\u0275prov=ce({factory:Ul,token:Ll,providedIn:"root"}),Ll);function Ul(e){var t=Ge(Ol).location;return new Wl(Ge(Ml),t&&t.origin||"")}var Bl,Vl,Hl,ql=new ze("appBaseHref"),Wl=((Hl=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;if(_classCallCheck(this,n),(o=t.call(this))._platformLocation=e,null==a&&(a=o._platformLocation.getBaseHrefFromDOM()),null==a)throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");return o._baseHref=a,_possibleConstructorReturn(o)}return _createClass(n,[{key:"onPopState",value:function(e){this._platformLocation.onPopState(e),this._platformLocation.onHashChange(e)}},{key:"getBaseHref",value:function(){return this._baseHref}},{key:"prepareExternalUrl",value:function(e){return Nl(this._baseHref,e)}},{key:"path",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._platformLocation.pathname+zl(this._platformLocation.search),n=this._platformLocation.hash;return n&&e?"".concat(t).concat(n):t}},{key:"pushState",value:function(e,t,n,a){var o=this.prepareExternalUrl(n+zl(a));this._platformLocation.pushState(e,t,o)}},{key:"replaceState",value:function(e,t,n,a){var o=this.prepareExternalUrl(n+zl(a));this._platformLocation.replaceState(e,t,o)}},{key:"forward",value:function(){this._platformLocation.forward()}},{key:"back",value:function(){this._platformLocation.back()}}]),n}(Xl)).\u0275fac=function(e){return new(e||Hl)(Ge(Ml),Ge(ql,8))},Hl.\u0275prov=ce({token:Hl,factory:Hl.\u0275fac}),Hl),Gl=((Vl=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this))._platformLocation=e,o._baseHref="",null!=a&&(o._baseHref=a),o}return _createClass(n,[{key:"onPopState",value:function(e){this._platformLocation.onPopState(e),this._platformLocation.onHashChange(e)}},{key:"getBaseHref",value:function(){return this._baseHref}},{key:"path",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];var e=this._platformLocation.hash;return null==e&&(e="#"),e.length>0?e.substring(1):e}},{key:"prepareExternalUrl",value:function(e){var t=Nl(this._baseHref,e);return t.length>0?"#"+t:t}},{key:"pushState",value:function(e,t,n,a){var o=this.prepareExternalUrl(n+zl(a));0==o.length&&(o=this._platformLocation.pathname),this._platformLocation.pushState(e,t,o)}},{key:"replaceState",value:function(e,t,n,a){var o=this.prepareExternalUrl(n+zl(a));0==o.length&&(o=this._platformLocation.pathname),this._platformLocation.replaceState(e,t,o)}},{key:"forward",value:function(){this._platformLocation.forward()}},{key:"back",value:function(){this._platformLocation.back()}}]),n}(Xl)).\u0275fac=function(e){return new(e||Vl)(Ge(Ml),Ge(ql,8))},Vl.\u0275prov=ce({token:Vl,factory:Vl.\u0275fac}),Vl),Zl=((Bl=function(){function e(t,n){var a=this;_classCallCheck(this,e),this._subject=new ds,this._urlChangeListeners=[],this._platformStrategy=t;var o=this._platformStrategy.getBaseHref();this._platformLocation=n,this._baseHref=jl(Jl(o)),this._platformStrategy.onPopState((function(e){a._subject.emit({url:a.path(!0),pop:!0,state:e.state,type:e.type})}))}return _createClass(e,[{key:"path",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.normalize(this._platformStrategy.path(e))}},{key:"getState",value:function(){return this._platformLocation.getState()}},{key:"isCurrentPathEqualTo",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return this.path()==this.normalize(e+zl(t))}},{key:"normalize",value:function(t){return e.stripTrailingSlash(function(e,t){return e&&t.startsWith(e)?t.substring(e.length):t}(this._baseHref,Jl(t)))}},{key:"prepareExternalUrl",value:function(e){return e&&"/"!==e[0]&&(e="/"+e),this._platformStrategy.prepareExternalUrl(e)}},{key:"go",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._platformStrategy.pushState(n,"",e,t),this._notifyUrlChangeListeners(this.prepareExternalUrl(e+zl(t)),n)}},{key:"replaceState",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._platformStrategy.replaceState(n,"",e,t),this._notifyUrlChangeListeners(this.prepareExternalUrl(e+zl(t)),n)}},{key:"forward",value:function(){this._platformStrategy.forward()}},{key:"back",value:function(){this._platformStrategy.back()}},{key:"onUrlChange",value:function(e){var t=this;this._urlChangeListeners.push(e),this.subscribe((function(e){t._notifyUrlChangeListeners(e.url,e.state)}))}},{key:"_notifyUrlChangeListeners",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;this._urlChangeListeners.forEach((function(n){return n(e,t)}))}},{key:"subscribe",value:function(e,t,n){return this._subject.subscribe({next:e,error:t,complete:n})}}]),e}()).\u0275fac=function(e){return new(e||Bl)(Ge(Xl),Ge(Ml))},Bl.normalizeQueryParams=zl,Bl.joinWithSlash=Nl,Bl.stripTrailingSlash=jl,Bl.\u0275prov=ce({factory:Kl,token:Bl,providedIn:"root"}),Bl);function Kl(){return new Zl(Ge(Xl),Ge(Ml))}function Jl(e){return e.replace(/\/index.html$/,"")}var Ql=function(){var e={Zero:0,One:1,Two:2,Few:3,Many:4,Other:5};return e[e.Zero]="Zero",e[e.One]="One",e[e.Two]="Two",e[e.Few]="Few",e[e.Many]="Many",e[e.Other]="Other",e}(),Yl=function(){var e={Format:0,Standalone:1};return e[e.Format]="Format",e[e.Standalone]="Standalone",e}(),$l=function(){var e={Narrow:0,Abbreviated:1,Wide:2,Short:3};return e[e.Narrow]="Narrow",e[e.Abbreviated]="Abbreviated",e[e.Wide]="Wide",e[e.Short]="Short",e}(),eu=function(){var e={Short:0,Medium:1,Long:2,Full:3};return e[e.Short]="Short",e[e.Medium]="Medium",e[e.Long]="Long",e[e.Full]="Full",e}(),tu=function(){var e={Decimal:0,Group:1,List:2,PercentSign:3,PlusSign:4,MinusSign:5,Exponential:6,SuperscriptingExponent:7,PerMille:8,Infinity:9,NaN:10,TimeSeparator:11,CurrencyDecimal:12,CurrencyGroup:13};return e[e.Decimal]="Decimal",e[e.Group]="Group",e[e.List]="List",e[e.PercentSign]="PercentSign",e[e.PlusSign]="PlusSign",e[e.MinusSign]="MinusSign",e[e.Exponential]="Exponential",e[e.SuperscriptingExponent]="SuperscriptingExponent",e[e.PerMille]="PerMille",e[e.Infinity]="Infinity",e[e.NaN]="NaN",e[e.TimeSeparator]="TimeSeparator",e[e.CurrencyDecimal]="CurrencyDecimal",e[e.CurrencyGroup]="CurrencyGroup",e}();function nu(e,t){return su(es(e)[ns.DateFormat],t)}function au(e,t){return su(es(e)[ns.TimeFormat],t)}function ou(e,t){return su(es(e)[ns.DateTimeFormat],t)}function ru(e,t){var n=es(e),a=n[ns.NumberSymbols][t];if(void 0===a){if(t===tu.CurrencyDecimal)return n[ns.NumberSymbols][tu.Decimal];if(t===tu.CurrencyGroup)return n[ns.NumberSymbols][tu.Group]}return a}function iu(e){if(!e[ns.ExtraData])throw new Error('Missing extra locale data for the locale "'.concat(e[ns.LocaleId],'". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.'))}function su(e,t){for(var n=t;n>-1;n--)if(void 0!==e[n])return e[n];throw new Error("Locale data API: locale data undefined")}function lu(e){var t=_slicedToArray(e.split(":"),2);return{hours:+t[0],minutes:+t[1]}}var uu=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/,cu={},pu=/((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/,du=function(){var e={Short:0,ShortGMT:1,Long:2,Extended:3};return e[e.Short]="Short",e[e.ShortGMT]="ShortGMT",e[e.Long]="Long",e[e.Extended]="Extended",e}(),hu=function(){var e={FullYear:0,Month:1,Date:2,Hours:3,Minutes:4,Seconds:5,FractionalSeconds:6,Day:7};return e[e.FullYear]="FullYear",e[e.Month]="Month",e[e.Date]="Date",e[e.Hours]="Hours",e[e.Minutes]="Minutes",e[e.Seconds]="Seconds",e[e.FractionalSeconds]="FractionalSeconds",e[e.Day]="Day",e}(),fu=function(){var e={DayPeriods:0,Days:1,Months:2,Eras:3};return e[e.DayPeriods]="DayPeriods",e[e.Days]="Days",e[e.Months]="Months",e[e.Eras]="Eras",e}();function mu(e,t){return t&&(e=e.replace(/\{([^}]+)}/g,(function(e,n){return null!=t&&n in t?t[n]:e}))),e}function _u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"-",a=arguments.length>3?arguments[3]:void 0,o=arguments.length>4?arguments[4]:void 0,r="";(e<0||o&&e<=0)&&(o?e=1-e:(e=-e,r=n));for(var i=String(e);i.length<t;)i="0"+i;return a&&(i=i.substr(i.length-t)),r+i}function gu(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return function(r,i){var s,l=function(e,t){switch(e){case hu.FullYear:return t.getFullYear();case hu.Month:return t.getMonth();case hu.Date:return t.getDate();case hu.Hours:return t.getHours();case hu.Minutes:return t.getMinutes();case hu.Seconds:return t.getSeconds();case hu.FractionalSeconds:return t.getMilliseconds();case hu.Day:return t.getDay();default:throw new Error('Unknown DateType value "'.concat(e,'".'))}}(e,r);if((n>0||l>-n)&&(l+=n),e===hu.Hours)0===l&&-12===n&&(l=12);else if(e===hu.FractionalSeconds)return s=t,_u(l,3).substr(0,s);var u=ru(i,tu.MinusSign);return _u(l,t,u,a,o)}}function vu(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Yl.Format,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return function(o,r){return function(e,t,n,a,o,r){switch(n){case fu.Months:return function(e,t,n){var a=es(e),o=su([a[ns.MonthsFormat],a[ns.MonthsStandalone]],t);return su(o,n)}(t,o,a)[e.getMonth()];case fu.Days:return function(e,t,n){var a=es(e),o=su([a[ns.DaysFormat],a[ns.DaysStandalone]],t);return su(o,n)}(t,o,a)[e.getDay()];case fu.DayPeriods:var i=e.getHours(),s=e.getMinutes();if(r){var l,u=function(e){var t=es(e);return iu(t),(t[ns.ExtraData][2]||[]).map((function(e){return"string"==typeof e?lu(e):[lu(e[0]),lu(e[1])]}))}(t),c=function(e,t,n){var a=es(e);iu(a);var o=su([a[ns.ExtraData][0],a[ns.ExtraData][1]],t)||[];return su(o,n)||[]}(t,o,a);if(u.forEach((function(e,t){if(Array.isArray(e)){var n=e[0],a=n.hours,o=n.minutes,r=e[1],u=r.hours,p=r.minutes;i>=a&&s>=o&&(i<u||i===u&&s<p)&&(l=c[t])}else{var d=e.hours,h=e.minutes;d===i&&h===s&&(l=c[t])}})),l)return l}return function(e,t,n){var a=es(e),o=su([a[ns.DayPeriodsFormat],a[ns.DayPeriodsStandalone]],t);return su(o,n)}(t,o,a)[i<12?0:1];case fu.Eras:return function(e,t){return su(es(e)[ns.Eras],t)}(t,a)[e.getFullYear()<=0?0:1];default:throw new Error("unexpected translation type "+n)}}(o,r,e,t,n,a)}}function yu(e){return function(t,n,a){var o=-1*a,r=ru(n,tu.MinusSign),i=o>0?Math.floor(o/60):Math.ceil(o/60);switch(e){case du.Short:return(o>=0?"+":"")+_u(i,2,r)+_u(Math.abs(o%60),2,r);case du.ShortGMT:return"GMT"+(o>=0?"+":"")+_u(i,1,r);case du.Long:return"GMT"+(o>=0?"+":"")+_u(i,2,r)+":"+_u(Math.abs(o%60),2,r);case du.Extended:return 0===a?"Z":(o>=0?"+":"")+_u(i,2,r)+":"+_u(Math.abs(o%60),2,r);default:throw new Error('Unknown zone width "'.concat(e,'"'))}}}function bu(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(n,a){var o,r,i,s;if(t){var l=new Date(n.getFullYear(),n.getMonth(),1).getDay()-1,u=n.getDate();o=1+Math.floor((u+l)/7)}else{var c=(r=n.getFullYear(),i=new Date(r,0,1).getDay(),new Date(r,0,1+(i<=4?4:11)-i)),p=(s=n,new Date(s.getFullYear(),s.getMonth(),s.getDate()+(4-s.getDay()))).getTime()-c.getTime();o=1+Math.round(p/6048e5)}return _u(o,e,ru(a,tu.MinusSign))}}var xu={};function wu(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function Cu(e){return e instanceof Date&&!isNaN(e.valueOf())}var ku,Tu=function e(){_classCallCheck(this,e)},Pu=((ku=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this)).locale=e,a}return _createClass(n,[{key:"getPluralCategory",value:function(e,t){switch(function(e){return es(e)[ns.PluralCase]}(t||this.locale)(e)){case Ql.Zero:return"zero";case Ql.One:return"one";case Ql.Two:return"two";case Ql.Few:return"few";case Ql.Many:return"many";default:return"other"}}}]),n}(Tu)).\u0275fac=function(e){return new(e||ku)(Ge(Ns))},ku.\u0275prov=ce({token:ku,factory:ku.\u0275fac}),ku);function Su(e,t){t=encodeURIComponent(t);var n,a=_createForOfIteratorHelper(e.split(";"));try{for(a.s();!(n=a.n()).done;){var o=n.value,r=o.indexOf("="),i=_slicedToArray(-1==r?[o,""]:[o.slice(0,r),o.slice(r+1)],2),s=i[0],l=i[1];if(s.trim()===t)return decodeURIComponent(l)}}catch(u){a.e(u)}finally{a.f()}return null}var Ou,Mu,Iu,Fu=((Ou=function(){function e(t,n,a,o){_classCallCheck(this,e),this._iterableDiffers=t,this._keyValueDiffers=n,this._ngEl=a,this._renderer=o,this._iterableDiffer=null,this._keyValueDiffer=null,this._initialClasses=[],this._rawClass=null}return _createClass(e,[{key:"ngDoCheck",value:function(){if(this._iterableDiffer){var e=this._iterableDiffer.diff(this._rawClass);e&&this._applyIterableChanges(e)}else if(this._keyValueDiffer){var t=this._keyValueDiffer.diff(this._rawClass);t&&this._applyKeyValueChanges(t)}}},{key:"_applyKeyValueChanges",value:function(e){var t=this;e.forEachAddedItem((function(e){return t._toggleClass(e.key,e.currentValue)})),e.forEachChangedItem((function(e){return t._toggleClass(e.key,e.currentValue)})),e.forEachRemovedItem((function(e){e.previousValue&&t._toggleClass(e.key,!1)}))}},{key:"_applyIterableChanges",value:function(e){var t=this;e.forEachAddedItem((function(e){if("string"!=typeof e.item)throw new Error("NgClass can only toggle CSS classes expressed as strings, got "+be(e.item));t._toggleClass(e.item,!0)})),e.forEachRemovedItem((function(e){return t._toggleClass(e.item,!1)}))}},{key:"_applyClasses",value:function(e){var t=this;e&&(Array.isArray(e)||e instanceof Set?e.forEach((function(e){return t._toggleClass(e,!0)})):Object.keys(e).forEach((function(n){return t._toggleClass(n,!!e[n])})))}},{key:"_removeClasses",value:function(e){var t=this;e&&(Array.isArray(e)||e instanceof Set?e.forEach((function(e){return t._toggleClass(e,!1)})):Object.keys(e).forEach((function(e){return t._toggleClass(e,!1)})))}},{key:"_toggleClass",value:function(e,t){var n=this;(e=e.trim())&&e.split(/\s+/g).forEach((function(e){t?n._renderer.addClass(n._ngEl.nativeElement,e):n._renderer.removeClass(n._ngEl.nativeElement,e)}))}},{key:"klass",set:function(e){this._removeClasses(this._initialClasses),this._initialClasses="string"==typeof e?e.split(/\s+/):[],this._applyClasses(this._initialClasses),this._applyClasses(this._rawClass)}},{key:"ngClass",set:function(e){this._removeClasses(this._rawClass),this._applyClasses(this._initialClasses),this._iterableDiffer=null,this._keyValueDiffer=null,this._rawClass="string"==typeof e?e.split(/\s+/):e,this._rawClass&&(Pr(this._rawClass)?this._iterableDiffer=this._iterableDiffers.find(this._rawClass).create():this._keyValueDiffer=this._keyValueDiffers.find(this._rawClass).create())}}]),e}()).\u0275fac=function(e){return new(e||Ou)(Er(Ni),Er(ji),Er(vi),Er(wi))},Ou.\u0275dir=_t({type:Ou,selectors:[["","ngClass",""]],inputs:{klass:["class","klass"],ngClass:"ngClass"}}),Ou),Du=function(){function e(t,n,a,o){_classCallCheck(this,e),this.$implicit=t,this.ngForOf=n,this.index=a,this.count=o}return _createClass(e,[{key:"first",get:function(){return 0===this.index}},{key:"last",get:function(){return this.index===this.count-1}},{key:"even",get:function(){return this.index%2==0}},{key:"odd",get:function(){return!this.even}}]),e}(),Au=((Mu=function(){function e(t,n,a){_classCallCheck(this,e),this._viewContainer=t,this._template=n,this._differs=a,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}return _createClass(e,[{key:"ngDoCheck",value:function(){if(this._ngForOfDirty){this._ngForOfDirty=!1;var e=this._ngForOf;if(!this._differ&&e)try{this._differ=this._differs.find(e).create(this.ngForTrackBy)}catch(a){throw new Error("Cannot find a differ supporting object '".concat(e,"' of type '").concat((t=e).name||typeof t,"'. NgFor only supports binding to Iterables such as Arrays."))}}var t;if(this._differ){var n=this._differ.diff(this._ngForOf);n&&this._applyChanges(n)}}},{key:"_applyChanges",value:function(e){var t=this,n=[];e.forEachOperation((function(e,a,o){if(null==e.previousIndex){var r=t._viewContainer.createEmbeddedView(t._template,new Du(null,t._ngForOf,-1,-1),null===o?void 0:o),i=new Eu(e,r);n.push(i)}else if(null==o)t._viewContainer.remove(null===a?void 0:a);else if(null!==a){var s=t._viewContainer.get(a);t._viewContainer.move(s,o);var l=new Eu(e,s);n.push(l)}}));for(var a=0;a<n.length;a++)this._perViewChange(n[a].view,n[a].record);for(var o=0,r=this._viewContainer.length;o<r;o++){var i=this._viewContainer.get(o);i.context.index=o,i.context.count=r,i.context.ngForOf=this._ngForOf}e.forEachIdentityChange((function(e){t._viewContainer.get(e.currentIndex).context.$implicit=e.item}))}},{key:"_perViewChange",value:function(e,t){e.context.$implicit=t.item}},{key:"ngForOf",set:function(e){this._ngForOf=e,this._ngForOfDirty=!0}},{key:"ngForTrackBy",set:function(e){la()&&null!=e&&"function"!=typeof e&&console&&console.warn&&console.warn("trackBy must be a function, but received ".concat(JSON.stringify(e),". See https://angular.io/api/common/NgForOf#change-propagation for more information.")),this._trackByFn=e},get:function(){return this._trackByFn}},{key:"ngForTemplate",set:function(e){e&&(this._template=e)}}],[{key:"ngTemplateContextGuard",value:function(e,t){return!0}}]),e}()).\u0275fac=function(e){return new(e||Mu)(Er(Vi),Er(Ui),Er(Ni))},Mu.\u0275dir=_t({type:Mu,selectors:[["","ngFor","","ngForOf",""]],inputs:{ngForOf:"ngForOf",ngForTrackBy:"ngForTrackBy",ngForTemplate:"ngForTemplate"}}),Mu),Eu=function e(t,n){_classCallCheck(this,e),this.record=t,this.view=n},Ru=((Iu=function(){function e(t,n){_classCallCheck(this,e),this._viewContainer=t,this._context=new Nu,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this._thenTemplateRef=n}return _createClass(e,[{key:"_updateView",value:function(){this._context.$implicit?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}},{key:"ngIf",set:function(e){this._context.$implicit=this._context.ngIf=e,this._updateView()}},{key:"ngIfThen",set:function(e){ju("ngIfThen",e),this._thenTemplateRef=e,this._thenViewRef=null,this._updateView()}},{key:"ngIfElse",set:function(e){ju("ngIfElse",e),this._elseTemplateRef=e,this._elseViewRef=null,this._updateView()}}],[{key:"ngTemplateContextGuard",value:function(e,t){return!0}}]),e}()).\u0275fac=function(e){return new(e||Iu)(Er(Vi),Er(Ui))},Iu.\u0275dir=_t({type:Iu,selectors:[["","ngIf",""]],inputs:{ngIf:"ngIf",ngIfThen:"ngIfThen",ngIfElse:"ngIfElse"}}),Iu),Nu=function e(){_classCallCheck(this,e),this.$implicit=null,this.ngIf=null};function ju(e,t){if(t&&!t.createEmbeddedView)throw new Error("".concat(e," must be a TemplateRef, but received '").concat(be(t),"'."))}function zu(e,t){return Error("InvalidPipeArgument: '".concat(t,"' for pipe '").concat(be(e),"'"))}var Lu,Xu,Uu,Bu,Vu,Hu,qu,Wu,Gu,Zu=/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g,Ku=((Vu=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"transform",value:function(t){if(!t)return t;if("string"!=typeof t)throw zu(e,t);return t.replace(Zu,(function(e){return e[0].toUpperCase()+e.substr(1).toLowerCase()}))}}]),e}()).\u0275fac=function(e){return new(e||Vu)},Vu.\u0275pipe=gt({name:"titlecase",type:Vu,pure:!0}),Vu),Ju=((Bu=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"transform",value:function(t){if(!t)return t;if("string"!=typeof t)throw zu(e,t);return t.toUpperCase()}}]),e}()).\u0275fac=function(e){return new(e||Bu)},Bu.\u0275pipe=gt({name:"uppercase",type:Bu,pure:!0}),Bu),Qu=((Uu=function(){function e(t){_classCallCheck(this,e),this.locale=t}return _createClass(e,[{key:"transform",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"mediumDate",a=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0;if(null==t||""===t||t!=t)return null;try{return function(e,t,n,a){var o=function(e){if(Cu(e))return e;if("number"==typeof e&&!isNaN(e))return new Date(e);if("string"==typeof e){e=e.trim();var t,n=parseFloat(e);if(!isNaN(e-n))return new Date(n);if(/^(\d{4}-\d{1,2}-\d{1,2})$/.test(e)){var a=_slicedToArray(e.split("-").map((function(e){return+e})),3),o=a[0],r=a[1],i=a[2];return new Date(o,r-1,i)}if(t=e.match(uu))return function(e){var t=new Date(0),n=0,a=0,o=e[8]?t.setUTCFullYear:t.setFullYear,r=e[8]?t.setUTCHours:t.setHours;e[9]&&(n=Number(e[9]+e[10]),a=Number(e[9]+e[11])),o.call(t,Number(e[1]),Number(e[2])-1,Number(e[3]));var i=Number(e[4]||0)-n,s=Number(e[5]||0)-a,l=Number(e[6]||0),u=Math.round(1e3*parseFloat("0."+(e[7]||0)));return r.call(t,i,s,l,u),t}(t)}var s=new Date(e);if(!Cu(s))throw new Error('Unable to convert "'.concat(e,'" into a date'));return s}(e);t=function e(t,n){var a=function(e){return es(e)[ns.LocaleId]}(t);if(cu[a]=cu[a]||{},cu[a][n])return cu[a][n];var o="";switch(n){case"shortDate":o=nu(t,eu.Short);break;case"mediumDate":o=nu(t,eu.Medium);break;case"longDate":o=nu(t,eu.Long);break;case"fullDate":o=nu(t,eu.Full);break;case"shortTime":o=au(t,eu.Short);break;case"mediumTime":o=au(t,eu.Medium);break;case"longTime":o=au(t,eu.Long);break;case"fullTime":o=au(t,eu.Full);break;case"short":var r=e(t,"shortTime"),i=e(t,"shortDate");o=mu(ou(t,eu.Short),[r,i]);break;case"medium":var s=e(t,"mediumTime"),l=e(t,"mediumDate");o=mu(ou(t,eu.Medium),[s,l]);break;case"long":var u=e(t,"longTime"),c=e(t,"longDate");o=mu(ou(t,eu.Long),[u,c]);break;case"full":var p=e(t,"fullTime"),d=e(t,"fullDate");o=mu(ou(t,eu.Full),[p,d])}return o&&(cu[a][n]=o),o}(n,t)||t;for(var r,i=[];t;){if(!(r=pu.exec(t))){i.push(t);break}var s=(i=i.concat(r.slice(1))).pop();if(!s)break;t=s}var l=o.getTimezoneOffset();a&&(l=wu(a,l),o=function(e,t,n){var a=e.getTimezoneOffset();return function(e,t){return(e=new Date(e.getTime())).setMinutes(e.getMinutes()+t),e}(e,-1*(wu(t,a)-a))}(o,a));var u="";return i.forEach((function(e){var t=function(e){if(xu[e])return xu[e];var t;switch(e){case"G":case"GG":case"GGG":t=vu(fu.Eras,$l.Abbreviated);break;case"GGGG":t=vu(fu.Eras,$l.Wide);break;case"GGGGG":t=vu(fu.Eras,$l.Narrow);break;case"y":t=gu(hu.FullYear,1,0,!1,!0);break;case"yy":t=gu(hu.FullYear,2,0,!0,!0);break;case"yyy":t=gu(hu.FullYear,3,0,!1,!0);break;case"yyyy":t=gu(hu.FullYear,4,0,!1,!0);break;case"M":case"L":t=gu(hu.Month,1,1);break;case"MM":case"LL":t=gu(hu.Month,2,1);break;case"MMM":t=vu(fu.Months,$l.Abbreviated);break;case"MMMM":t=vu(fu.Months,$l.Wide);break;case"MMMMM":t=vu(fu.Months,$l.Narrow);break;case"LLL":t=vu(fu.Months,$l.Abbreviated,Yl.Standalone);break;case"LLLL":t=vu(fu.Months,$l.Wide,Yl.Standalone);break;case"LLLLL":t=vu(fu.Months,$l.Narrow,Yl.Standalone);break;case"w":t=bu(1);break;case"ww":t=bu(2);break;case"W":t=bu(1,!0);break;case"d":t=gu(hu.Date,1);break;case"dd":t=gu(hu.Date,2);break;case"E":case"EE":case"EEE":t=vu(fu.Days,$l.Abbreviated);break;case"EEEE":t=vu(fu.Days,$l.Wide);break;case"EEEEE":t=vu(fu.Days,$l.Narrow);break;case"EEEEEE":t=vu(fu.Days,$l.Short);break;case"a":case"aa":case"aaa":t=vu(fu.DayPeriods,$l.Abbreviated);break;case"aaaa":t=vu(fu.DayPeriods,$l.Wide);break;case"aaaaa":t=vu(fu.DayPeriods,$l.Narrow);break;case"b":case"bb":case"bbb":t=vu(fu.DayPeriods,$l.Abbreviated,Yl.Standalone,!0);break;case"bbbb":t=vu(fu.DayPeriods,$l.Wide,Yl.Standalone,!0);break;case"bbbbb":t=vu(fu.DayPeriods,$l.Narrow,Yl.Standalone,!0);break;case"B":case"BB":case"BBB":t=vu(fu.DayPeriods,$l.Abbreviated,Yl.Format,!0);break;case"BBBB":t=vu(fu.DayPeriods,$l.Wide,Yl.Format,!0);break;case"BBBBB":t=vu(fu.DayPeriods,$l.Narrow,Yl.Format,!0);break;case"h":t=gu(hu.Hours,1,-12);break;case"hh":t=gu(hu.Hours,2,-12);break;case"H":t=gu(hu.Hours,1);break;case"HH":t=gu(hu.Hours,2);break;case"m":t=gu(hu.Minutes,1);break;case"mm":t=gu(hu.Minutes,2);break;case"s":t=gu(hu.Seconds,1);break;case"ss":t=gu(hu.Seconds,2);break;case"S":t=gu(hu.FractionalSeconds,1);break;case"SS":t=gu(hu.FractionalSeconds,2);break;case"SSS":t=gu(hu.FractionalSeconds,3);break;case"Z":case"ZZ":case"ZZZ":t=yu(du.Short);break;case"ZZZZZ":t=yu(du.Extended);break;case"O":case"OO":case"OOO":case"z":case"zz":case"zzz":t=yu(du.ShortGMT);break;case"OOOO":case"ZZZZ":case"zzzz":t=yu(du.Long);break;default:return null}return xu[e]=t,t}(e);u+=t?t(o,n,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")})),u}(t,n,o||this.locale,a)}catch(r){throw zu(e,r.message)}}}]),e}()).\u0275fac=function(e){return new(e||Uu)(Er(Ns))},Uu.\u0275pipe=gt({name:"date",type:Uu,pure:!0}),Uu),Yu=((Xu=function e(){_classCallCheck(this,e)}).\u0275mod=ft({type:Xu}),Xu.\u0275inj=pe({factory:function(e){return new(e||Xu)},providers:[{provide:Tu,useClass:Pu}]}),Xu),$u=((Lu=function e(){_classCallCheck(this,e)}).\u0275prov=ce({token:Lu,providedIn:"root",factory:function(){return new ec(Ge(Ol),window,Ge(aa))}}),Lu),ec=function(){function e(t,n,a){_classCallCheck(this,e),this.document=t,this.window=n,this.errorHandler=a,this.offset=function(){return[0,0]}}return _createClass(e,[{key:"setOffset",value:function(e){this.offset=Array.isArray(e)?function(){return e}:e}},{key:"getScrollPosition",value:function(){return this.supportScrollRestoration()?[this.window.scrollX,this.window.scrollY]:[0,0]}},{key:"scrollToPosition",value:function(e){this.supportScrollRestoration()&&this.window.scrollTo(e[0],e[1])}},{key:"scrollToAnchor",value:function(e){if(this.supportScrollRestoration()){e=this.window.CSS&&this.window.CSS.escape?this.window.CSS.escape(e):e.replace(/(\"|\'\ |:|\.|\[|\]|,|=)/g,"\\$1");try{var t=this.document.querySelector("#"+e);if(t)return void this.scrollToElement(t);var n=this.document.querySelector("[name='".concat(e,"']"));if(n)return void this.scrollToElement(n)}catch(a){this.errorHandler.handleError(a)}}}},{key:"setHistoryScrollRestoration",value:function(e){if(this.supportScrollRestoration()){var t=this.window.history;t&&t.scrollRestoration&&(t.scrollRestoration=e)}}},{key:"scrollToElement",value:function(e){var t=e.getBoundingClientRect(),n=t.left+this.window.pageXOffset,a=t.top+this.window.pageYOffset,o=this.offset();this.window.scrollTo(n-o[0],a-o[1])}},{key:"supportScrollRestoration",value:function(){try{return!!this.window&&!!this.window.scrollTo}catch(e){return!1}}}]),e}(),tc=function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.apply(this,arguments)}return _createClass(n,[{key:"getProperty",value:function(e,t){return e[t]}},{key:"log",value:function(e){window.console&&window.console.log&&window.console.log(e)}},{key:"logGroup",value:function(e){window.console&&window.console.group&&window.console.group(e)}},{key:"logGroupEnd",value:function(){window.console&&window.console.groupEnd&&window.console.groupEnd()}},{key:"onAndCancel",value:function(e,t,n){return e.addEventListener(t,n,!1),function(){e.removeEventListener(t,n,!1)}}},{key:"dispatchEvent",value:function(e,t){e.dispatchEvent(t)}},{key:"remove",value:function(e){return e.parentNode&&e.parentNode.removeChild(e),e}},{key:"getValue",value:function(e){return e.value}},{key:"createElement",value:function(e,t){return(t=t||this.getDefaultDocument()).createElement(e)}},{key:"createHtmlDocument",value:function(){return document.implementation.createHTMLDocument("fakeTitle")}},{key:"getDefaultDocument",value:function(){return document}},{key:"isElementNode",value:function(e){return e.nodeType===Node.ELEMENT_NODE}},{key:"isShadowRoot",value:function(e){return e instanceof DocumentFragment}},{key:"getGlobalEventTarget",value:function(e,t){return"window"===t?window:"document"===t?e:"body"===t?e.body:null}},{key:"getHistory",value:function(){return window.history}},{key:"getLocation",value:function(){return window.location}},{key:"getBaseHref",value:function(e){var t,n=nc||(nc=document.querySelector("base"))?nc.getAttribute("href"):null;return null==n?null:(t=n,Hu||(Hu=document.createElement("a")),Hu.setAttribute("href",t),"/"===Hu.pathname.charAt(0)?Hu.pathname:"/"+Hu.pathname)}},{key:"resetBaseElement",value:function(){nc=null}},{key:"getUserAgent",value:function(){return window.navigator.userAgent}},{key:"performanceNow",value:function(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}},{key:"supportsCookies",value:function(){return!0}},{key:"getCookie",value:function(e){return Su(document.cookie,e)}}],[{key:"makeCurrent",value:function(){var e;e=new n,Tl||(Tl=e)}}]),n}(function(e){_inherits(n,e);var t=_createSuper(n);function n(){return _classCallCheck(this,n),t.call(this)}return _createClass(n,[{key:"supportsDOMEvents",value:function(){return!0}}]),n}(function(){return function e(){_classCallCheck(this,e)}}())),nc=null,ac=new ze("TRANSITION_ID"),oc=[{provide:Ss,useFactory:function(e,t,n){return function(){n.get(Os).donePromise.then((function(){var n=Pl();Array.prototype.slice.apply(t.querySelectorAll("style[ng-transition]")).filter((function(t){return t.getAttribute("ng-transition")===e})).forEach((function(e){return n.remove(e)}))}))}},deps:[ac,Ol,_r],multi:!0}],rc=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"addToWindow",value:function(e){Ie.getAngularTestability=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=e.findTestabilityInTree(t,n);if(null==a)throw new Error("Could not find testability for element.");return a},Ie.getAllAngularTestabilities=function(){return e.getAllTestabilities()},Ie.getAllAngularRootElements=function(){return e.getAllRootElements()},Ie.frameworkStabilizers||(Ie.frameworkStabilizers=[]),Ie.frameworkStabilizers.push((function(e){var t=Ie.getAllAngularTestabilities(),n=t.length,a=!1,o=function(t){a=a||t,0==--n&&e(a)};t.forEach((function(e){e.whenStable(o)}))}))}},{key:"findTestabilityInTree",value:function(e,t,n){if(null==t)return null;var a=e.getTestability(t);return null!=a?a:n?Pl().isShadowRoot(t)?this.findTestabilityInTree(e,t.host,!0):this.findTestabilityInTree(e,t.parentElement,!0):null}}],[{key:"init",value:function(){var t;t=new e,il=t}}]),e}(),ic=new ze("EventManagerPlugins"),sc=((qu=function(){function e(t,n){var a=this;_classCallCheck(this,e),this._zone=n,this._eventNameToPlugin=new Map,t.forEach((function(e){return e.manager=a})),this._plugins=t.slice().reverse()}return _createClass(e,[{key:"addEventListener",value:function(e,t,n){return this._findPluginFor(t).addEventListener(e,t,n)}},{key:"addGlobalEventListener",value:function(e,t,n){return this._findPluginFor(t).addGlobalEventListener(e,t,n)}},{key:"getZone",value:function(){return this._zone}},{key:"_findPluginFor",value:function(e){var t=this._eventNameToPlugin.get(e);if(t)return t;for(var n=this._plugins,a=0;a<n.length;a++){var o=n[a];if(o.supports(e))return this._eventNameToPlugin.set(e,o),o}throw new Error("No event manager plugin found for event "+e)}}]),e}()).\u0275fac=function(e){return new(e||qu)(Ge(ic),Ge(Ks))},qu.\u0275prov=ce({token:qu,factory:qu.\u0275fac}),qu),lc=function(){function e(t){_classCallCheck(this,e),this._doc=t}return _createClass(e,[{key:"addGlobalEventListener",value:function(e,t,n){var a=Pl().getGlobalEventTarget(this._doc,e);if(!a)throw new Error("Unsupported event target ".concat(a," for event ").concat(t));return this.addEventListener(a,t,n)}}]),e}(),uc=((Gu=function(){function e(){_classCallCheck(this,e),this._stylesSet=new Set}return _createClass(e,[{key:"addStyles",value:function(e){var t=this,n=new Set;e.forEach((function(e){t._stylesSet.has(e)||(t._stylesSet.add(e),n.add(e))})),this.onStylesAdded(n)}},{key:"onStylesAdded",value:function(e){}},{key:"getAllStyles",value:function(){return Array.from(this._stylesSet)}}]),e}()).\u0275fac=function(e){return new(e||Gu)},Gu.\u0275prov=ce({token:Gu,factory:Gu.\u0275fac}),Gu),cc=((Wu=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this))._doc=e,a._hostNodes=new Set,a._styleNodes=new Set,a._hostNodes.add(e.head),a}return _createClass(n,[{key:"_addStylesToHost",value:function(e,t){var n=this;e.forEach((function(e){var a=n._doc.createElement("style");a.textContent=e,n._styleNodes.add(t.appendChild(a))}))}},{key:"addHost",value:function(e){this._addStylesToHost(this._stylesSet,e),this._hostNodes.add(e)}},{key:"removeHost",value:function(e){this._hostNodes.delete(e)}},{key:"onStylesAdded",value:function(e){var t=this;this._hostNodes.forEach((function(n){return t._addStylesToHost(e,n)}))}},{key:"ngOnDestroy",value:function(){this._styleNodes.forEach((function(e){return Pl().remove(e)}))}}]),n}(uc)).\u0275fac=function(e){return new(e||Wu)(Ge(Ol))},Wu.\u0275prov=ce({token:Wu,factory:Wu.\u0275fac}),Wu),pc={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},dc=/%COMP%/g;function hc(e,t,n){for(var a=0;a<t.length;a++){var o=t[a];Array.isArray(o)?hc(e,o,n):(o=o.replace(dc,e),n.push(o))}return n}function fc(e){return function(t){if("__ngUnwrap__"===t)return e;!1===e(t)&&(t.preventDefault(),t.returnValue=!1)}}var mc,_c,gc,vc,yc=((mc=function(){function e(t,n,a){_classCallCheck(this,e),this.eventManager=t,this.sharedStylesHost=n,this.appId=a,this.rendererByCompId=new Map,this.defaultRenderer=new bc(t)}return _createClass(e,[{key:"createRenderer",value:function(e,t){if(!e||!t)return this.defaultRenderer;switch(t.encapsulation){case it.Emulated:var n=this.rendererByCompId.get(t.id);return n||(n=new xc(this.eventManager,this.sharedStylesHost,t,this.appId),this.rendererByCompId.set(t.id,n)),n.applyToHost(e),n;case it.Native:case it.ShadowDom:return new wc(this.eventManager,this.sharedStylesHost,e,t);default:if(!this.rendererByCompId.has(t.id)){var a=hc(t.id,t.styles,[]);this.sharedStylesHost.addStyles(a),this.rendererByCompId.set(t.id,this.defaultRenderer)}return this.defaultRenderer}}},{key:"begin",value:function(){}},{key:"end",value:function(){}}]),e}()).\u0275fac=function(e){return new(e||mc)(Ge(sc),Ge(cc),Ge(Ms))},mc.\u0275prov=ce({token:mc,factory:mc.\u0275fac}),mc),bc=function(){function e(t){_classCallCheck(this,e),this.eventManager=t,this.data=Object.create(null)}return _createClass(e,[{key:"destroy",value:function(){}},{key:"createElement",value:function(e,t){return t?document.createElementNS(pc[t]||t,e):document.createElement(e)}},{key:"createComment",value:function(e){return document.createComment(e)}},{key:"createText",value:function(e){return document.createTextNode(e)}},{key:"appendChild",value:function(e,t){e.appendChild(t)}},{key:"insertBefore",value:function(e,t,n){e&&e.insertBefore(t,n)}},{key:"removeChild",value:function(e,t){e&&e.removeChild(t)}},{key:"selectRootElement",value:function(e,t){var n="string"==typeof e?document.querySelector(e):e;if(!n)throw new Error('The selector "'.concat(e,'" did not match any elements'));return t||(n.textContent=""),n}},{key:"parentNode",value:function(e){return e.parentNode}},{key:"nextSibling",value:function(e){return e.nextSibling}},{key:"setAttribute",value:function(e,t,n,a){if(a){t=a+":"+t;var o=pc[a];o?e.setAttributeNS(o,t,n):e.setAttribute(t,n)}else e.setAttribute(t,n)}},{key:"removeAttribute",value:function(e,t,n){if(n){var a=pc[n];a?e.removeAttributeNS(a,t):e.removeAttribute("".concat(n,":").concat(t))}else e.removeAttribute(t)}},{key:"addClass",value:function(e,t){e.classList.add(t)}},{key:"removeClass",value:function(e,t){e.classList.remove(t)}},{key:"setStyle",value:function(e,t,n,a){a&xi.DashCase?e.style.setProperty(t,n,a&xi.Important?"important":""):e.style[t]=n}},{key:"removeStyle",value:function(e,t,n){n&xi.DashCase?e.style.removeProperty(t):e.style[t]=""}},{key:"setProperty",value:function(e,t,n){e[t]=n}},{key:"setValue",value:function(e,t){e.nodeValue=t}},{key:"listen",value:function(e,t,n){return"string"==typeof e?this.eventManager.addGlobalEventListener(e,t,fc(n)):this.eventManager.addEventListener(e,t,fc(n))}}]),e}(),xc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;_classCallCheck(this,n),(i=t.call(this,e)).component=o;var s,l=hc(r+"-"+o.id,o.styles,[]);return a.addStyles(l),i.contentAttr="_ngcontent-%COMP%".replace(dc,r+"-"+o.id),i.hostAttr=(s=r+"-"+o.id,"_nghost-%COMP%".replace(dc,s)),i}return _createClass(n,[{key:"applyToHost",value:function(e){_get(_getPrototypeOf(n.prototype),"setAttribute",this).call(this,e,this.hostAttr,"")}},{key:"createElement",value:function(e,t){var a=_get(_getPrototypeOf(n.prototype),"createElement",this).call(this,e,t);return _get(_getPrototypeOf(n.prototype),"setAttribute",this).call(this,a,this.contentAttr,""),a}}]),n}(bc),wc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;_classCallCheck(this,n),(i=t.call(this,e)).sharedStylesHost=a,i.hostEl=o,i.component=r,i.shadowRoot=r.encapsulation===it.ShadowDom?o.attachShadow({mode:"open"}):o.createShadowRoot(),i.sharedStylesHost.addHost(i.shadowRoot);for(var s=hc(r.id,r.styles,[]),l=0;l<s.length;l++){var u=document.createElement("style");u.textContent=s[l],i.shadowRoot.appendChild(u)}return i}return _createClass(n,[{key:"nodeOrShadowRoot",value:function(e){return e===this.hostEl?this.shadowRoot:e}},{key:"destroy",value:function(){this.sharedStylesHost.removeHost(this.shadowRoot)}},{key:"appendChild",value:function(e,t){return _get(_getPrototypeOf(n.prototype),"appendChild",this).call(this,this.nodeOrShadowRoot(e),t)}},{key:"insertBefore",value:function(e,t,a){return _get(_getPrototypeOf(n.prototype),"insertBefore",this).call(this,this.nodeOrShadowRoot(e),t,a)}},{key:"removeChild",value:function(e,t){return _get(_getPrototypeOf(n.prototype),"removeChild",this).call(this,this.nodeOrShadowRoot(e),t)}},{key:"parentNode",value:function(e){return this.nodeOrShadowRoot(_get(_getPrototypeOf(n.prototype),"parentNode",this).call(this,this.nodeOrShadowRoot(e)))}}]),n}(bc),Cc=((_c=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e)}return _createClass(n,[{key:"supports",value:function(e){return!0}},{key:"addEventListener",value:function(e,t,n){var a=this;return e.addEventListener(t,n,!1),function(){return a.removeEventListener(e,t,n)}}},{key:"removeEventListener",value:function(e,t,n){return e.removeEventListener(t,n)}}]),n}(lc)).\u0275fac=function(e){return new(e||_c)(Ge(Ol))},_c.\u0275prov=ce({token:_c,factory:_c.\u0275fac}),_c),kc=["alt","control","meta","shift"],Tc={"\b":"Backspace","\t":"Tab","\x7f":"Delete","\x1b":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},Pc={A:"1",B:"2",C:"3",D:"4",E:"5",F:"6",G:"7",H:"8",I:"9",J:"*",K:"+",M:"-",N:".",O:"/","`":"0","\x90":"NumLock"},Sc={alt:function(e){return e.altKey},control:function(e){return e.ctrlKey},meta:function(e){return e.metaKey},shift:function(e){return e.shiftKey}},Oc=((gc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){return _classCallCheck(this,n),t.call(this,e)}return _createClass(n,[{key:"supports",value:function(e){return null!=n.parseEventName(e)}},{key:"addEventListener",value:function(e,t,a){var o=n.parseEventName(t),r=n.eventCallback(o.fullKey,a,this.manager.getZone());return this.manager.getZone().runOutsideAngular((function(){return Pl().onAndCancel(e,o.domEventName,r)}))}}],[{key:"parseEventName",value:function(e){var t=e.toLowerCase().split("."),a=t.shift();if(0===t.length||"keydown"!==a&&"keyup"!==a)return null;var o=n._normalizeKey(t.pop()),r="";if(kc.forEach((function(e){var n=t.indexOf(e);n>-1&&(t.splice(n,1),r+=e+".")})),r+=o,0!=t.length||0===o.length)return null;var i={};return i.domEventName=a,i.fullKey=r,i}},{key:"getEventFullKey",value:function(e){var t="",n=function(e){var t=e.key;if(null==t){if(null==(t=e.keyIdentifier))return"Unidentified";t.startsWith("U+")&&(t=String.fromCharCode(parseInt(t.substring(2),16)),3===e.location&&Pc.hasOwnProperty(t)&&(t=Pc[t]))}return Tc[t]||t}(e);return" "===(n=n.toLowerCase())?n="space":"."===n&&(n="dot"),kc.forEach((function(a){a!=n&&(0,Sc[a])(e)&&(t+=a+".")})),t+=n}},{key:"eventCallback",value:function(e,t,a){return function(o){n.getEventFullKey(o)===e&&a.runGuarded((function(){return t(o)}))}}},{key:"_normalizeKey",value:function(e){switch(e){case"esc":return"escape";default:return e}}}]),n}(lc)).\u0275fac=function(e){return new(e||gc)(Ge(Ol))},gc.\u0275prov=ce({token:gc,factory:gc.\u0275fac}),gc),Mc=cl(wl,"browser",[{provide:As,useValue:"browser"},{provide:Ds,useValue:function(){tc.makeCurrent(),rc.init()},multi:!0},{provide:Ol,useFactory:function(){return function(e){Ot=e}(document),document},deps:[]}]),Ic=[[],{provide:ar,useValue:"root"},{provide:aa,useFactory:function(){return new aa},deps:[]},{provide:ic,useClass:Cc,multi:!0,deps:[Ol,Ks,As]},{provide:ic,useClass:Oc,multi:!0,deps:[Ol]},[],{provide:yc,useClass:yc,deps:[sc,cc,Ms]},{provide:bi,useExisting:yc},{provide:uc,useExisting:cc},{provide:cc,useClass:cc,deps:[Ol]},{provide:ol,useClass:ol,deps:[Ks]},{provide:sc,useClass:sc,deps:[ic,Ks]},[]],Fc=((vc=function(){function e(t){if(_classCallCheck(this,e),t)throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.")}return _createClass(e,null,[{key:"withServerTransition",value:function(t){return{ngModule:e,providers:[{provide:Ms,useValue:t.appId},{provide:ac,useExisting:Ms},oc]}}}]),e}()).\u0275mod=ft({type:vc}),vc.\u0275inj=pe({factory:function(e){return new(e||vc)(Ge(vc,12))},providers:Ic,imports:[Yu,kl]}),vc);function Dc(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=t[t.length-1];return I(a)?(t.pop(),B(t,a)):Z(t)}"undefined"!=typeof window&&window;var Ac=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this))._value=e,a}return _createClass(n,[{key:"_subscribe",value:function(e){var t=_get(_getPrototypeOf(n.prototype),"_subscribe",this).call(this,e);return t&&!t.closed&&e.next(this._value),t}},{key:"getValue",value:function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new T;return this._value}},{key:"next",value:function(e){_get(_getPrototypeOf(n.prototype),"next",this).call(this,this._value=e)}},{key:"value",get:function(){return this.getValue()}}]),n}(O),Ec=function(){function e(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return e.prototype=Object.create(Error.prototype),e}(),Rc={},Nc=function(){function e(t){_classCallCheck(this,e),this.resultSelector=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new jc(e,this.resultSelector))}}]),e}(),jc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).resultSelector=a,o.active=0,o.values=[],o.observables=[],o}return _createClass(n,[{key:"_next",value:function(e){this.values.push(Rc),this.observables.push(e)}},{key:"_complete",value:function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else{this.active=t,this.toRespond=t;for(var n=0;n<t;n++){var a=e[n];this.add(j(this,a,a,n))}}}},{key:"notifyComplete",value:function(e){0==(this.active-=1)&&this.destination.complete()}},{key:"notifyNext",value:function(e,t,n,a,o){var r=this.values,i=this.toRespond?r[n]===Rc?--this.toRespond:this.toRespond:0;r[n]=t,0===i&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))}},{key:"_tryResultSelector",value:function(e){var t;try{t=this.resultSelector.apply(this,e)}catch(n){return void this.destination.error(n)}this.destination.next(t)}}]),n}(z),zc=new w((function(e){return e.complete()}));function Lc(e){return e?function(e){return new w((function(t){return e.schedule((function(){return t.complete()}))}))}(e):zc}function Xc(e){return new w((function(t){var n;try{n=e()}catch(a){return void t.error(a)}return(n?V(n):Lc()).subscribe(t)}))}function Uc(){return G(1)}function Bc(e,t){return function(n){return n.lift(new Vc(e,t))}}var Vc=function(){function e(t,n){_classCallCheck(this,e),this.predicate=t,this.thisArg=n}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new Hc(e,this.predicate,this.thisArg))}}]),e}(),Hc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e)).predicate=a,r.thisArg=o,r.count=0,r}return _createClass(n,[{key:"_next",value:function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(n){return void this.destination.error(n)}t&&this.destination.next(e)}}]),n}(m),qc=function(){function e(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return e.prototype=Object.create(Error.prototype),e}();function Wc(e){return function(t){return 0===e?Lc():t.lift(new Gc(e))}}var Gc=function(){function e(t){if(_classCallCheck(this,e),this.total=t,this.total<0)throw new qc}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new Zc(e,this.total))}}]),e}(),Zc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).total=a,o.ring=new Array,o.count=0,o}return _createClass(n,[{key:"_next",value:function(e){var t=this.ring,n=this.total,a=this.count++;t.length<n?t.push(e):t[a%n]=e}},{key:"_complete",value:function(){var e=this.destination,t=this.count;if(t>0)for(var n=this.count>=this.total?this.total:this.count,a=this.ring,o=0;o<n;o++){var r=t++%n;e.next(a[r])}e.complete()}}]),n}(m);function Kc(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Yc;return function(t){return t.lift(new Jc(e))}}var Jc=function(){function e(t){_classCallCheck(this,e),this.errorFactory=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new Qc(e,this.errorFactory))}}]),e}(),Qc=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).errorFactory=a,o.hasValue=!1,o}return _createClass(n,[{key:"_next",value:function(e){this.hasValue=!0,this.destination.next(e)}},{key:"_complete",value:function(){if(this.hasValue)return this.destination.complete();var e;try{e=this.errorFactory()}catch(t){e=t}this.destination.error(e)}}]),n}(m);function Yc(){return new Ec}function $c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return function(t){return t.lift(new ep(e))}}var ep=function(){function e(t){_classCallCheck(this,e),this.defaultValue=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new tp(e,this.defaultValue))}}]),e}(),tp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).defaultValue=a,o.isEmpty=!0,o}return _createClass(n,[{key:"_next",value:function(e){this.isEmpty=!1,this.destination.next(e)}},{key:"_complete",value:function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()}}]),n}(m);function np(e,t){var n=arguments.length>=2;return function(a){return a.pipe(e?Bc((function(t,n){return e(t,n,a)})):v,Wc(1),n?$c(t):Kc((function(){return new Ec})))}}function ap(e){return function(t){var n=new op(e),a=t.lift(n);return n.caught=a}}var op=function(){function e(t){_classCallCheck(this,e),this.selector=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new rp(e,this.selector,this.caught))}}]),e}(),rp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e)).selector=a,r.caught=o,r}return _createClass(n,[{key:"error",value:function(e){if(!this.isStopped){var t;try{t=this.selector(e,this.caught)}catch(r){return void _get(_getPrototypeOf(n.prototype),"error",this).call(this,r)}this._unsubscribeAndRecycle();var a=new F(this,void 0,void 0);this.add(a);var o=j(this,t,void 0,void 0,a);o!==a&&this.add(o)}}}]),n}(z);function ip(e){return function(t){return 0===e?Lc():t.lift(new sp(e))}}var sp=function(){function e(t){if(_classCallCheck(this,e),this.total=t,this.total<0)throw new qc}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new lp(e,this.total))}}]),e}(),lp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).total=a,o.count=0,o}return _createClass(n,[{key:"_next",value:function(e){var t=this.total,n=++this.count;n<=t&&(this.destination.next(e),n===t&&(this.destination.complete(),this.unsubscribe()))}}]),n}(m);function up(e,t){var n=arguments.length>=2;return function(a){return a.pipe(e?Bc((function(t,n){return e(t,n,a)})):v,ip(1),n?$c(t):Kc((function(){return new Ec})))}}var cp=function(){function e(t,n,a){_classCallCheck(this,e),this.predicate=t,this.thisArg=n,this.source=a}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new pp(e,this.predicate,this.thisArg,this.source))}}]),e}(),pp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e)).predicate=a,i.thisArg=o,i.source=r,i.index=0,i.thisArg=o||_assertThisInitialized(i),i}return _createClass(n,[{key:"notifyComplete",value:function(e){this.destination.next(e),this.destination.complete()}},{key:"_next",value:function(e){var t=!1;try{t=this.predicate.call(this.thisArg,e,this.index++,this.source)}catch(n){return void this.destination.error(n)}t||this.notifyComplete(!1)}},{key:"_complete",value:function(){this.notifyComplete(!0)}}]),n}(m);function dp(e,t){return"function"==typeof t?function(n){return n.pipe(dp((function(n,a){return V(e(n,a)).pipe(L((function(e,o){return t(n,e,a,o)})))})))}:function(t){return t.lift(new hp(e))}}var hp=function(){function e(t){_classCallCheck(this,e),this.project=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new fp(e,this.project))}}]),e}(),fp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).project=a,o.index=0,o}return _createClass(n,[{key:"_next",value:function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(a){return void this.destination.error(a)}this._innerSub(t,e,n)}},{key:"_innerSub",value:function(e,t,n){var a=this.innerSubscription;a&&a.unsubscribe();var o=new F(this,t,n),r=this.destination;r.add(o),this.innerSubscription=j(this,e,void 0,void 0,o),this.innerSubscription!==o&&r.add(this.innerSubscription)}},{key:"_complete",value:function(){var e=this.innerSubscription;e&&!e.closed||_get(_getPrototypeOf(n.prototype),"_complete",this).call(this),this.unsubscribe()}},{key:"_unsubscribe",value:function(){this.innerSubscription=null}},{key:"notifyComplete",value:function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&_get(_getPrototypeOf(n.prototype),"_complete",this).call(this)}},{key:"notifyNext",value:function(e,t,n,a,o){this.destination.next(t)}}]),n}(z);function mp(){return Uc()(Dc.apply(void 0,arguments))}function _p(e,t){var n=!1;return arguments.length>=2&&(n=!0),function(a){return a.lift(new gp(e,t,n))}}var gp=function(){function e(t,n){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];_classCallCheck(this,e),this.accumulator=t,this.seed=n,this.hasSeed=a}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new vp(e,this.accumulator,this.seed,this.hasSeed))}}]),e}(),vp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e)).accumulator=a,i._seed=o,i.hasSeed=r,i.index=0,i}return _createClass(n,[{key:"_next",value:function(e){if(this.hasSeed)return this._tryNext(e);this.seed=e,this.destination.next(e)}},{key:"_tryNext",value:function(e){var t,n=this.index++;try{t=this.accumulator(this.seed,e,n)}catch(a){this.destination.error(a)}this.seed=t,this.destination.next(t)}},{key:"seed",get:function(){return this._seed},set:function(e){this.hasSeed=!0,this._seed=e}}]),n}(m);function yp(e,t){return H(e,t,1)}function bp(){}function xp(e,t,n){return function(a){return a.lift(new Cp(e,t,n))}}var wp,Cp=function(){function e(t,n,a){_classCallCheck(this,e),this.nextOrObserver=t,this.error=n,this.complete=a}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new kp(e,this.nextOrObserver,this.error,this.complete))}}]),e}(),kp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,o,r,i){var s;return _classCallCheck(this,n),(s=t.call(this,e))._tapNext=bp,s._tapError=bp,s._tapComplete=bp,s._tapError=r||bp,s._tapComplete=i||bp,a(o)?(s._context=_assertThisInitialized(s),s._tapNext=o):o&&(s._context=o,s._tapNext=o.next||bp,s._tapError=o.error||bp,s._tapComplete=o.complete||bp),s}return _createClass(n,[{key:"_next",value:function(e){try{this._tapNext.call(this._context,e)}catch(t){return void this.destination.error(t)}this.destination.next(e)}},{key:"_error",value:function(e){try{this._tapError.call(this._context,e)}catch(e){return void this.destination.error(e)}this.destination.error(e)}},{key:"_complete",value:function(){try{this._tapComplete.call(this._context)}catch(e){return void this.destination.error(e)}return this.destination.complete()}}]),n}(m),Tp=function(){function e(t){_classCallCheck(this,e),this.callback=t}return _createClass(e,[{key:"call",value:function(e,t){return t.subscribe(new Pp(e,this.callback))}}]),e}(),Pp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).add(new d(a)),o}return n}(m),Sp=function e(t,n){_classCallCheck(this,e),this.id=t,this.url=n},Op=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"imperative",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return _classCallCheck(this,n),(o=t.call(this,e,a)).navigationTrigger=r,o.restoredState=i,o}return _createClass(n,[{key:"toString",value:function(){return"NavigationStart(id: ".concat(this.id,", url: '").concat(this.url,"')")}}]),n}(Sp),Mp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e,a)).urlAfterRedirects=o,r}return _createClass(n,[{key:"toString",value:function(){return"NavigationEnd(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"')")}}]),n}(Sp),Ip=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e,a)).reason=o,r}return _createClass(n,[{key:"toString",value:function(){return"NavigationCancel(id: ".concat(this.id,", url: '").concat(this.url,"')")}}]),n}(Sp),Fp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o){var r;return _classCallCheck(this,n),(r=t.call(this,e,a)).error=o,r}return _createClass(n,[{key:"toString",value:function(){return"NavigationError(id: ".concat(this.id,", url: '").concat(this.url,"', error: ").concat(this.error,")")}}]),n}(Sp),Dp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e,a)).urlAfterRedirects=o,i.state=r,i}return _createClass(n,[{key:"toString",value:function(){return"RoutesRecognized(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"', state: ").concat(this.state,")")}}]),n}(Sp),Ap=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e,a)).urlAfterRedirects=o,i.state=r,i}return _createClass(n,[{key:"toString",value:function(){return"GuardsCheckStart(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"', state: ").concat(this.state,")")}}]),n}(Sp),Ep=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r,i){var s;return _classCallCheck(this,n),(s=t.call(this,e,a)).urlAfterRedirects=o,s.state=r,s.shouldActivate=i,s}return _createClass(n,[{key:"toString",value:function(){return"GuardsCheckEnd(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"', state: ").concat(this.state,", shouldActivate: ").concat(this.shouldActivate,")")}}]),n}(Sp),Rp=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e,a)).urlAfterRedirects=o,i.state=r,i}return _createClass(n,[{key:"toString",value:function(){return"ResolveStart(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"', state: ").concat(this.state,")")}}]),n}(Sp),Np=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a,o,r){var i;return _classCallCheck(this,n),(i=t.call(this,e,a)).urlAfterRedirects=o,i.state=r,i}return _createClass(n,[{key:"toString",value:function(){return"ResolveEnd(id: ".concat(this.id,", url: '").concat(this.url,"', urlAfterRedirects: '").concat(this.urlAfterRedirects,"', state: ").concat(this.state,")")}}]),n}(Sp),jp=function(){function e(t){_classCallCheck(this,e),this.route=t}return _createClass(e,[{key:"toString",value:function(){return"RouteConfigLoadStart(path: ".concat(this.route.path,")")}}]),e}(),zp=function(){function e(t){_classCallCheck(this,e),this.route=t}return _createClass(e,[{key:"toString",value:function(){return"RouteConfigLoadEnd(path: ".concat(this.route.path,")")}}]),e}(),Lp=function(){function e(t){_classCallCheck(this,e),this.snapshot=t}return _createClass(e,[{key:"toString",value:function(){return"ChildActivationStart(path: '".concat(this.snapshot.routeConfig&&this.snapshot.routeConfig.path||"","')")}}]),e}(),Xp=function(){function e(t){_classCallCheck(this,e),this.snapshot=t}return _createClass(e,[{key:"toString",value:function(){return"ChildActivationEnd(path: '".concat(this.snapshot.routeConfig&&this.snapshot.routeConfig.path||"","')")}}]),e}(),Up=function(){function e(t){_classCallCheck(this,e),this.snapshot=t}return _createClass(e,[{key:"toString",value:function(){return"ActivationStart(path: '".concat(this.snapshot.routeConfig&&this.snapshot.routeConfig.path||"","')")}}]),e}(),Bp=function(){function e(t){_classCallCheck(this,e),this.snapshot=t}return _createClass(e,[{key:"toString",value:function(){return"ActivationEnd(path: '".concat(this.snapshot.routeConfig&&this.snapshot.routeConfig.path||"","')")}}]),e}(),Vp=function(){function e(t,n,a){_classCallCheck(this,e),this.routerEvent=t,this.position=n,this.anchor=a}return _createClass(e,[{key:"toString",value:function(){return"Scroll(anchor: '".concat(this.anchor,"', position: '").concat(this.position?"".concat(this.position[0],", ").concat(this.position[1]):null,"')")}}]),e}(),Hp=((wp=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||wp)},wp.\u0275cmp=ct({type:wp,selectors:[["ng-component"]],decls:1,vars:0,template:function(e,t){1&e&&Xr(0,"router-outlet")},directives:function(){return[Zh]},encapsulation:2}),wp),qp=function(){function e(t){_classCallCheck(this,e),this.params=t||{}}return _createClass(e,[{key:"has",value:function(e){return this.params.hasOwnProperty(e)}},{key:"get",value:function(e){if(this.has(e)){var t=this.params[e];return Array.isArray(t)?t[0]:t}return null}},{key:"getAll",value:function(e){if(this.has(e)){var t=this.params[e];return Array.isArray(t)?t:[t]}return[]}},{key:"keys",get:function(){return Object.keys(this.params)}}]),e}();function Wp(e){return new qp(e)}function Gp(e){var t=Error("NavigationCancelingError: "+e);return t.ngNavigationCancelingError=!0,t}function Zp(e,t,n){var a=n.path.split("/");if(a.length>e.length)return null;if("full"===n.pathMatch&&(t.hasChildren()||a.length<e.length))return null;for(var o={},r=0;r<a.length;r++){var i=a[r],s=e[r];if(i.startsWith(":"))o[i.substring(1)]=s;else if(i!==s.path)return null}return{consumed:e.slice(0,a.length),posParams:o}}var Kp=function e(t,n){_classCallCheck(this,e),this.routes=t,this.module=n};function Jp(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=0;n<e.length;n++){var a=e[n];Qp(a,Yp(t,a))}}function Qp(e,t){if(!e)throw new Error("\n      Invalid configuration of route '".concat(t,"': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    "));if(Array.isArray(e))throw new Error("Invalid configuration of route '".concat(t,"': Array cannot be specified"));if(!e.component&&!e.children&&!e.loadChildren&&e.outlet&&"primary"!==e.outlet)throw new Error("Invalid configuration of route '".concat(t,"': a componentless route without children or loadChildren cannot have a named outlet set"));if(e.redirectTo&&e.children)throw new Error("Invalid configuration of route '".concat(t,"': redirectTo and children cannot be used together"));if(e.redirectTo&&e.loadChildren)throw new Error("Invalid configuration of route '".concat(t,"': redirectTo and loadChildren cannot be used together"));if(e.children&&e.loadChildren)throw new Error("Invalid configuration of route '".concat(t,"': children and loadChildren cannot be used together"));if(e.redirectTo&&e.component)throw new Error("Invalid configuration of route '".concat(t,"': redirectTo and component cannot be used together"));if(e.path&&e.matcher)throw new Error("Invalid configuration of route '".concat(t,"': path and matcher cannot be used together"));if(void 0===e.redirectTo&&!e.component&&!e.children&&!e.loadChildren)throw new Error("Invalid configuration of route '".concat(t,"'. One of the following must be provided: component, redirectTo, children or loadChildren"));if(void 0===e.path&&void 0===e.matcher)throw new Error("Invalid configuration of route '".concat(t,"': routes must have either a path or a matcher specified"));if("string"==typeof e.path&&"/"===e.path.charAt(0))throw new Error("Invalid configuration of route '".concat(t,"': path cannot start with a slash"));if(""===e.path&&void 0!==e.redirectTo&&void 0===e.pathMatch)throw new Error("Invalid configuration of route '{path: \"".concat(t,'", redirectTo: "').concat(e.redirectTo,"\"}': please provide 'pathMatch'. The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'."));if(void 0!==e.pathMatch&&"full"!==e.pathMatch&&"prefix"!==e.pathMatch)throw new Error("Invalid configuration of route '".concat(t,"': pathMatch can only be set to 'prefix' or 'full'"));e.children&&Jp(e.children,t)}function Yp(e,t){return t?e||t.path?e&&!t.path?e+"/":!e&&t.path?t.path:"".concat(e,"/").concat(t.path):"":e}function $p(e){var t=e.children&&e.children.map($p),n=t?Object.assign(Object.assign({},e),{children:t}):Object.assign({},e);return!n.component&&(t||n.loadChildren)&&n.outlet&&"primary"!==n.outlet&&(n.component=Hp),n}function ed(e,t){var n,a=Object.keys(e),o=Object.keys(t);if(!a||!o||a.length!=o.length)return!1;for(var r=0;r<a.length;r++)if(!td(e[n=a[r]],t[n]))return!1;return!0}function td(e,t){return Array.isArray(e)&&Array.isArray(t)?e.length==t.length&&e.every((function(e){return t.indexOf(e)>-1})):e===t}function nd(e){return Array.prototype.concat.apply([],e)}function ad(e){return e.length>0?e[e.length-1]:null}function od(e,t){for(var n in e)e.hasOwnProperty(n)&&t(e[n],n)}function rd(e){return(t=e)&&"function"==typeof t.subscribe?e:Br(e)?V(Promise.resolve(e)):Dc(e);var t}function id(e,t,n){return n?function(e,t){return ed(e,t)}(e.queryParams,t.queryParams)&&function e(t,n){if(!cd(t.segments,n.segments))return!1;if(t.numberOfChildren!==n.numberOfChildren)return!1;for(var a in n.children){if(!t.children[a])return!1;if(!e(t.children[a],n.children[a]))return!1}return!0}(e.root,t.root):function(e,t){return Object.keys(t).length<=Object.keys(e).length&&Object.keys(t).every((function(n){return td(e[n],t[n])}))}(e.queryParams,t.queryParams)&&function e(t,n){return function t(n,a,o){if(n.segments.length>o.length)return!!cd(n.segments.slice(0,o.length),o)&&!a.hasChildren();if(n.segments.length===o.length){if(!cd(n.segments,o))return!1;for(var r in a.children){if(!n.children[r])return!1;if(!e(n.children[r],a.children[r]))return!1}return!0}var i=o.slice(0,n.segments.length),s=o.slice(n.segments.length);return!!cd(n.segments,i)&&!!n.children.primary&&t(n.children.primary,a,s)}(t,n,n.segments)}(e.root,t.root)}var sd=function(){function e(t,n,a){_classCallCheck(this,e),this.root=t,this.queryParams=n,this.fragment=a}return _createClass(e,[{key:"toString",value:function(){return fd.serialize(this)}},{key:"queryParamMap",get:function(){return this._queryParamMap||(this._queryParamMap=Wp(this.queryParams)),this._queryParamMap}}]),e}(),ld=function(){function e(t,n){var a=this;_classCallCheck(this,e),this.segments=t,this.children=n,this.parent=null,od(n,(function(e,t){return e.parent=a}))}return _createClass(e,[{key:"hasChildren",value:function(){return this.numberOfChildren>0}},{key:"toString",value:function(){return md(this)}},{key:"numberOfChildren",get:function(){return Object.keys(this.children).length}}]),e}(),ud=function(){function e(t,n){_classCallCheck(this,e),this.path=t,this.parameters=n}return _createClass(e,[{key:"toString",value:function(){return xd(this)}},{key:"parameterMap",get:function(){return this._parameterMap||(this._parameterMap=Wp(this.parameters)),this._parameterMap}}]),e}();function cd(e,t){return e.length===t.length&&e.every((function(e,n){return e.path===t[n].path}))}function pd(e,t){var n=[];return od(e.children,(function(e,a){"primary"===a&&(n=n.concat(t(e,a)))})),od(e.children,(function(e,a){"primary"!==a&&(n=n.concat(t(e,a)))})),n}var dd=function e(){_classCallCheck(this,e)},hd=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"parse",value:function(e){var t=new Pd(e);return new sd(t.parseRootSegment(),t.parseQueryParams(),t.parseFragment())}},{key:"serialize",value:function(e){return"".concat("/"+function e(t,n){if(!t.hasChildren())return md(t);if(n){var a=t.children.primary?e(t.children.primary,!1):"",o=[];return od(t.children,(function(t,n){"primary"!==n&&o.push("".concat(n,":").concat(e(t,!1)))})),o.length>0?"".concat(a,"(").concat(o.join("//"),")"):a}var r=pd(t,(function(n,a){return"primary"===a?[e(t.children.primary,!1)]:["".concat(a,":").concat(e(n,!1))]}));return"".concat(md(t),"/(").concat(r.join("//"),")")}(e.root,!0)).concat((t=e.queryParams,n=Object.keys(t).map((function(e){var n=t[e];return Array.isArray(n)?n.map((function(t){return"".concat(gd(e),"=").concat(gd(t))})).join("&"):"".concat(gd(e),"=").concat(gd(n))})),n.length?"?"+n.join("&"):"")).concat("string"==typeof e.fragment?"#"+encodeURI(e.fragment):"");var t,n}}]),e}(),fd=new hd;function md(e){return e.segments.map((function(e){return xd(e)})).join("/")}function _d(e){return encodeURIComponent(e).replace(/%40/g,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",")}function gd(e){return _d(e).replace(/%3B/gi,";")}function vd(e){return _d(e).replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/%26/gi,"&")}function yd(e){return decodeURIComponent(e)}function bd(e){return yd(e.replace(/\+/g,"%20"))}function xd(e){return"".concat(vd(e.path)).concat((t=e.parameters,Object.keys(t).map((function(e){return";".concat(vd(e),"=").concat(vd(t[e]))})).join("")));var t}var wd=/^[^\/()?;=#]+/;function Cd(e){var t=e.match(wd);return t?t[0]:""}var kd=/^[^=?&#]+/,Td=/^[^?&#]+/,Pd=function(){function e(t){_classCallCheck(this,e),this.url=t,this.remaining=t}return _createClass(e,[{key:"parseRootSegment",value:function(){return this.consumeOptional("/"),""===this.remaining||this.peekStartsWith("?")||this.peekStartsWith("#")?new ld([],{}):new ld([],this.parseChildren())}},{key:"parseQueryParams",value:function(){var e={};if(this.consumeOptional("?"))do{this.parseQueryParam(e)}while(this.consumeOptional("&"));return e}},{key:"parseFragment",value:function(){return this.consumeOptional("#")?decodeURIComponent(this.remaining):null}},{key:"parseChildren",value:function(){if(""===this.remaining)return{};this.consumeOptional("/");var e=[];for(this.peekStartsWith("(")||e.push(this.parseSegment());this.peekStartsWith("/")&&!this.peekStartsWith("//")&&!this.peekStartsWith("/(");)this.capture("/"),e.push(this.parseSegment());var t={};this.peekStartsWith("/(")&&(this.capture("/"),t=this.parseParens(!0));var n={};return this.peekStartsWith("(")&&(n=this.parseParens(!1)),(e.length>0||Object.keys(t).length>0)&&(n.primary=new ld(e,t)),n}},{key:"parseSegment",value:function(){var e=Cd(this.remaining);if(""===e&&this.peekStartsWith(";"))throw new Error("Empty path url segment cannot have parameters: '".concat(this.remaining,"'."));return this.capture(e),new ud(yd(e),this.parseMatrixParams())}},{key:"parseMatrixParams",value:function(){for(var e={};this.consumeOptional(";");)this.parseParam(e);return e}},{key:"parseParam",value:function(e){var t=Cd(this.remaining);if(t){this.capture(t);var n="";if(this.consumeOptional("=")){var a=Cd(this.remaining);a&&(n=a,this.capture(n))}e[yd(t)]=yd(n)}}},{key:"parseQueryParam",value:function(e){var t=function(e){var t=e.match(kd);return t?t[0]:""}(this.remaining);if(t){this.capture(t);var n="";if(this.consumeOptional("=")){var a=function(e){var t=e.match(Td);return t?t[0]:""}(this.remaining);a&&(n=a,this.capture(n))}var o=bd(t),r=bd(n);if(e.hasOwnProperty(o)){var i=e[o];Array.isArray(i)||(i=[i],e[o]=i),i.push(r)}else e[o]=r}}},{key:"parseParens",value:function(e){var t={};for(this.capture("(");!this.consumeOptional(")")&&this.remaining.length>0;){var n=Cd(this.remaining),a=this.remaining[n.length];if("/"!==a&&")"!==a&&";"!==a)throw new Error("Cannot parse url '".concat(this.url,"'"));var o=void 0;n.indexOf(":")>-1?(o=n.substr(0,n.indexOf(":")),this.capture(o),this.capture(":")):e&&(o="primary");var r=this.parseChildren();t[o]=1===Object.keys(r).length?r.primary:new ld([],r),this.consumeOptional("//")}return t}},{key:"peekStartsWith",value:function(e){return this.remaining.startsWith(e)}},{key:"consumeOptional",value:function(e){return!!this.peekStartsWith(e)&&(this.remaining=this.remaining.substring(e.length),!0)}},{key:"capture",value:function(e){if(!this.consumeOptional(e))throw new Error('Expected "'.concat(e,'".'))}}]),e}(),Sd=function(){function e(t){_classCallCheck(this,e),this._root=t}return _createClass(e,[{key:"parent",value:function(e){var t=this.pathFromRoot(e);return t.length>1?t[t.length-2]:null}},{key:"children",value:function(e){var t=Od(e,this._root);return t?t.children.map((function(e){return e.value})):[]}},{key:"firstChild",value:function(e){var t=Od(e,this._root);return t&&t.children.length>0?t.children[0].value:null}},{key:"siblings",value:function(e){var t=Md(e,this._root);return t.length<2?[]:t[t.length-2].children.map((function(e){return e.value})).filter((function(t){return t!==e}))}},{key:"pathFromRoot",value:function(e){return Md(e,this._root).map((function(e){return e.value}))}},{key:"root",get:function(){return this._root.value}}]),e}();function Od(e,t){if(e===t.value)return t;var n,a=_createForOfIteratorHelper(t.children);try{for(a.s();!(n=a.n()).done;){var o=Od(e,n.value);if(o)return o}}catch(r){a.e(r)}finally{a.f()}return null}function Md(e,t){if(e===t.value)return[t];var n,a=_createForOfIteratorHelper(t.children);try{for(a.s();!(n=a.n()).done;){var o=Md(e,n.value);if(o.length)return o.unshift(t),o}}catch(r){a.e(r)}finally{a.f()}return[]}var Id=function(){function e(t,n){_classCallCheck(this,e),this.value=t,this.children=n}return _createClass(e,[{key:"toString",value:function(){return"TreeNode(".concat(this.value,")")}}]),e}();function Fd(e){var t={};return e&&e.children.forEach((function(e){return t[e.value.outlet]=e})),t}var Dd=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,e)).snapshot=a,zd(_assertThisInitialized(o),e),o}return _createClass(n,[{key:"toString",value:function(){return this.snapshot.toString()}}]),n}(Sd);function Ad(e,t){var n=function(e,t){var n=new Nd([],{},{},"",{},"primary",t,null,e.root,-1,{});return new jd("",new Id(n,[]))}(e,t),a=new Ac([new ud("",{})]),o=new Ac({}),r=new Ac({}),i=new Ac({}),s=new Ac(""),l=new Ed(a,o,i,s,r,"primary",t,n.root);return l.snapshot=n.root,new Dd(new Id(l,[]),n)}var Ed=function(){function e(t,n,a,o,r,i,s,l){_classCallCheck(this,e),this.url=t,this.params=n,this.queryParams=a,this.fragment=o,this.data=r,this.outlet=i,this.component=s,this._futureSnapshot=l}return _createClass(e,[{key:"toString",value:function(){return this.snapshot?this.snapshot.toString():"Future(".concat(this._futureSnapshot,")")}},{key:"routeConfig",get:function(){return this._futureSnapshot.routeConfig}},{key:"root",get:function(){return this._routerState.root}},{key:"parent",get:function(){return this._routerState.parent(this)}},{key:"firstChild",get:function(){return this._routerState.firstChild(this)}},{key:"children",get:function(){return this._routerState.children(this)}},{key:"pathFromRoot",get:function(){return this._routerState.pathFromRoot(this)}},{key:"paramMap",get:function(){return this._paramMap||(this._paramMap=this.params.pipe(L((function(e){return Wp(e)})))),this._paramMap}},{key:"queryParamMap",get:function(){return this._queryParamMap||(this._queryParamMap=this.queryParams.pipe(L((function(e){return Wp(e)})))),this._queryParamMap}}]),e}();function Rd(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"emptyOnly",n=e.pathFromRoot,a=0;if("always"!==t)for(a=n.length-1;a>=1;){var o=n[a],r=n[a-1];if(o.routeConfig&&""===o.routeConfig.path)a--;else{if(r.component)break;a--}}return function(e){return e.reduce((function(e,t){return{params:Object.assign(Object.assign({},e.params),t.params),data:Object.assign(Object.assign({},e.data),t.data),resolve:Object.assign(Object.assign({},e.resolve),t._resolvedData)}}),{params:{},data:{},resolve:{}})}(n.slice(a))}var Nd=function(){function e(t,n,a,o,r,i,s,l,u,c,p){_classCallCheck(this,e),this.url=t,this.params=n,this.queryParams=a,this.fragment=o,this.data=r,this.outlet=i,this.component=s,this.routeConfig=l,this._urlSegment=u,this._lastPathIndex=c,this._resolve=p}return _createClass(e,[{key:"toString",value:function(){return"Route(url:'".concat(this.url.map((function(e){return e.toString()})).join("/"),"', path:'").concat(this.routeConfig?this.routeConfig.path:"","')")}},{key:"root",get:function(){return this._routerState.root}},{key:"parent",get:function(){return this._routerState.parent(this)}},{key:"firstChild",get:function(){return this._routerState.firstChild(this)}},{key:"children",get:function(){return this._routerState.children(this)}},{key:"pathFromRoot",get:function(){return this._routerState.pathFromRoot(this)}},{key:"paramMap",get:function(){return this._paramMap||(this._paramMap=Wp(this.params)),this._paramMap}},{key:"queryParamMap",get:function(){return this._queryParamMap||(this._queryParamMap=Wp(this.queryParams)),this._queryParamMap}}]),e}(),jd=function(e){_inherits(n,e);var t=_createSuper(n);function n(e,a){var o;return _classCallCheck(this,n),(o=t.call(this,a)).url=e,zd(_assertThisInitialized(o),a),o}return _createClass(n,[{key:"toString",value:function(){return Ld(this._root)}}]),n}(Sd);function zd(e,t){t.value._routerState=e,t.children.forEach((function(t){return zd(e,t)}))}function Ld(e){var t=e.children.length>0?" { ".concat(e.children.map(Ld).join(", ")," } "):"";return"".concat(e.value).concat(t)}function Xd(e){if(e.snapshot){var t=e.snapshot,n=e._futureSnapshot;e.snapshot=n,ed(t.queryParams,n.queryParams)||e.queryParams.next(n.queryParams),t.fragment!==n.fragment&&e.fragment.next(n.fragment),ed(t.params,n.params)||e.params.next(n.params),function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;++n)if(!ed(e[n],t[n]))return!1;return!0}(t.url,n.url)||e.url.next(n.url),ed(t.data,n.data)||e.data.next(n.data)}else e.snapshot=e._futureSnapshot,e.data.next(e._futureSnapshot.data)}function Ud(e,t){var n,a;return ed(e.params,t.params)&&cd(n=e.url,a=t.url)&&n.every((function(e,t){return ed(e.parameters,a[t].parameters)}))&&!(!e.parent!=!t.parent)&&(!e.parent||Ud(e.parent,t.parent))}function Bd(e){return"object"==typeof e&&null!=e&&!e.outlets&&!e.segmentPath}function Vd(e,t,n,a,o){var r={};return a&&od(a,(function(e,t){r[t]=Array.isArray(e)?e.map((function(e){return""+e})):""+e})),new sd(n.root===e?t:function e(t,n,a){var o={};return od(t.children,(function(t,r){o[r]=t===n?a:e(t,n,a)})),new ld(t.segments,o)}(n.root,e,t),r,o)}var Hd=function(){function e(t,n,a){if(_classCallCheck(this,e),this.isAbsolute=t,this.numberOfDoubleDots=n,this.commands=a,t&&a.length>0&&Bd(a[0]))throw new Error("Root segment cannot have matrix parameters");var o=a.find((function(e){return"object"==typeof e&&null!=e&&e.outlets}));if(o&&o!==ad(a))throw new Error("{outlets:{}} has to be the last command")}return _createClass(e,[{key:"toRoot",value:function(){return this.isAbsolute&&1===this.commands.length&&"/"==this.commands[0]}}]),e}(),qd=function e(t,n,a){_classCallCheck(this,e),this.segmentGroup=t,this.processChildren=n,this.index=a};function Wd(e){return"object"==typeof e&&null!=e&&e.outlets?e.outlets.primary:""+e}function Gd(e,t,n){if(e||(e=new ld([],{})),0===e.segments.length&&e.hasChildren())return Zd(e,t,n);var a=function(e,t,n){for(var a=0,o=t,r={match:!1,pathIndex:0,commandIndex:0};o<e.segments.length;){if(a>=n.length)return r;var i=e.segments[o],s=Wd(n[a]),l=a<n.length-1?n[a+1]:null;if(o>0&&void 0===s)break;if(s&&l&&"object"==typeof l&&void 0===l.outlets){if(!Yd(s,l,i))return r;a+=2}else{if(!Yd(s,{},i))return r;a++}o++}return{match:!0,pathIndex:o,commandIndex:a}}(e,t,n),o=n.slice(a.commandIndex);if(a.match&&a.pathIndex<e.segments.length){var r=new ld(e.segments.slice(0,a.pathIndex),{});return r.children.primary=new ld(e.segments.slice(a.pathIndex),e.children),Zd(r,0,o)}return a.match&&0===o.length?new ld(e.segments,{}):a.match&&!e.hasChildren()?Kd(e,t,n):a.match?Zd(e,0,o):Kd(e,t,n)}function Zd(e,t,n){if(0===n.length)return new ld(e.segments,{});var a=function(e){return"object"!=typeof e[0]||void 0===e[0].outlets?{primary:e}:e[0].outlets}(n),o={};return od(a,(function(n,a){null!==n&&(o[a]=Gd(e.children[a],t,n))})),od(e.children,(function(e,t){void 0===a[t]&&(o[t]=e)})),new ld(e.segments,o)}function Kd(e,t,n){for(var a=e.segments.slice(0,t),o=0;o<n.length;){if("object"==typeof n[o]&&void 0!==n[o].outlets){var r=Jd(n[o].outlets);return new ld(a,r)}if(0===o&&Bd(n[0]))a.push(new ud(e.segments[t].path,n[0])),o++;else{var i=Wd(n[o]),s=o<n.length-1?n[o+1]:null;i&&s&&Bd(s)?(a.push(new ud(i,Qd(s))),o+=2):(a.push(new ud(i,{})),o++)}}return new ld(a,{})}function Jd(e){var t={};return od(e,(function(e,n){null!==e&&(t[n]=Kd(new ld([],{}),0,e))})),t}function Qd(e){var t={};return od(e,(function(e,n){return t[n]=""+e})),t}function Yd(e,t,n){return e==n.path&&ed(t,n.parameters)}var $d=function(){function e(t,n,a,o){_classCallCheck(this,e),this.routeReuseStrategy=t,this.futureState=n,this.currState=a,this.forwardEvent=o}return _createClass(e,[{key:"activate",value:function(e){var t=this.futureState._root,n=this.currState?this.currState._root:null;this.deactivateChildRoutes(t,n,e),Xd(this.futureState.root),this.activateChildRoutes(t,n,e)}},{key:"deactivateChildRoutes",value:function(e,t,n){var a=this,o=Fd(t);e.children.forEach((function(e){var t=e.value.outlet;a.deactivateRoutes(e,o[t],n),delete o[t]})),od(o,(function(e,t){a.deactivateRouteAndItsChildren(e,n)}))}},{key:"deactivateRoutes",value:function(e,t,n){var a=e.value,o=t?t.value:null;if(a===o)if(a.component){var r=n.getContext(a.outlet);r&&this.deactivateChildRoutes(e,t,r.children)}else this.deactivateChildRoutes(e,t,n);else o&&this.deactivateRouteAndItsChildren(t,n)}},{key:"deactivateRouteAndItsChildren",value:function(e,t){this.routeReuseStrategy.shouldDetach(e.value.snapshot)?this.detachAndStoreRouteSubtree(e,t):this.deactivateRouteAndOutlet(e,t)}},{key:"detachAndStoreRouteSubtree",value:function(e,t){var n=t.getContext(e.value.outlet);if(n&&n.outlet){var a=n.outlet.detach(),o=n.children.onOutletDeactivated();this.routeReuseStrategy.store(e.value.snapshot,{componentRef:a,route:e,contexts:o})}}},{key:"deactivateRouteAndOutlet",value:function(e,t){var n=this,a=t.getContext(e.value.outlet);if(a){var o=Fd(e),r=e.value.component?a.children:t;od(o,(function(e,t){return n.deactivateRouteAndItsChildren(e,r)})),a.outlet&&(a.outlet.deactivate(),a.children.onOutletDeactivated())}}},{key:"activateChildRoutes",value:function(e,t,n){var a=this,o=Fd(t);e.children.forEach((function(e){a.activateRoutes(e,o[e.value.outlet],n),a.forwardEvent(new Bp(e.value.snapshot))})),e.children.length&&this.forwardEvent(new Xp(e.value.snapshot))}},{key:"activateRoutes",value:function(e,t,n){var a=e.value,o=t?t.value:null;if(Xd(a),a===o)if(a.component){var r=n.getOrCreateContext(a.outlet);this.activateChildRoutes(e,t,r.children)}else this.activateChildRoutes(e,t,n);else if(a.component){var i=n.getOrCreateContext(a.outlet);if(this.routeReuseStrategy.shouldAttach(a.snapshot)){var s=this.routeReuseStrategy.retrieve(a.snapshot);this.routeReuseStrategy.store(a.snapshot,null),i.children.onOutletReAttached(s.contexts),i.attachRef=s.componentRef,i.route=s.route.value,i.outlet&&i.outlet.attach(s.componentRef,s.route.value),eh(s.route)}else{var l=function(e){for(var t=e.parent;t;t=t.parent){var n=t.routeConfig;if(n&&n._loadedConfig)return n._loadedConfig;if(n&&n.component)return null}return null}(a.snapshot),u=l?l.module.componentFactoryResolver:null;i.attachRef=null,i.route=a,i.resolver=u,i.outlet&&i.outlet.activateWith(a,u),this.activateChildRoutes(e,null,i.children)}}else this.activateChildRoutes(e,null,n)}}]),e}();function eh(e){Xd(e.value),e.children.forEach(eh)}function th(e){return"function"==typeof e}function nh(e){return e instanceof sd}var ah=function e(t){_classCallCheck(this,e),this.segmentGroup=t||null},oh=function e(t){_classCallCheck(this,e),this.urlTree=t};function rh(e){return new w((function(t){return t.error(new ah(e))}))}function ih(e){return new w((function(t){return t.error(new oh(e))}))}function sh(e){return new w((function(t){return t.error(new Error("Only absolute redirects can have named outlets. redirectTo: '".concat(e,"'")))}))}var lh=function(){function e(t,n,a,o,r){_classCallCheck(this,e),this.configLoader=n,this.urlSerializer=a,this.urlTree=o,this.config=r,this.allowRedirects=!0,this.ngModule=t.get(Qe)}return _createClass(e,[{key:"apply",value:function(){var e=this;return this.expandSegmentGroup(this.ngModule,this.config,this.urlTree.root,"primary").pipe(L((function(t){return e.createUrlTree(t,e.urlTree.queryParams,e.urlTree.fragment)}))).pipe(ap((function(t){if(t instanceof oh)return e.allowRedirects=!1,e.match(t.urlTree);if(t instanceof ah)throw e.noMatchError(t);throw t})))}},{key:"match",value:function(e){var t=this;return this.expandSegmentGroup(this.ngModule,this.config,e.root,"primary").pipe(L((function(n){return t.createUrlTree(n,e.queryParams,e.fragment)}))).pipe(ap((function(e){if(e instanceof ah)throw t.noMatchError(e);throw e})))}},{key:"noMatchError",value:function(e){return new Error("Cannot match any routes. URL Segment: '".concat(e.segmentGroup,"'"))}},{key:"createUrlTree",value:function(e,t,n){var a=e.segments.length>0?new ld([],{primary:e}):e;return new sd(a,t,n)}},{key:"expandSegmentGroup",value:function(e,t,n,a){return 0===n.segments.length&&n.hasChildren()?this.expandChildren(e,t,n).pipe(L((function(e){return new ld([],e)}))):this.expandSegment(e,n,t,n.segments,a,!0)}},{key:"expandChildren",value:function(e,t,n){var a=this;return function(n,o){if(0===Object.keys(n).length)return Dc({});var r=[],i=[],s={};return od(n,(function(n,o){var l,u,c=(l=o,u=n,a.expandSegmentGroup(e,t,u,l)).pipe(L((function(e){return s[o]=e})));"primary"===o?r.push(c):i.push(c)})),Dc.apply(null,r.concat(i)).pipe(Uc(),np(),L((function(){return s})))}(n.children)}},{key:"expandSegment",value:function(e,t,n,a,o,r){var i=this;return Dc.apply(void 0,_toConsumableArray(n)).pipe(L((function(s){return i.expandSegmentAgainstRoute(e,t,n,s,a,o,r).pipe(ap((function(e){if(e instanceof ah)return Dc(null);throw e})))})),Uc(),up((function(e){return!!e})),ap((function(e,n){if(e instanceof Ec||"EmptyError"===e.name){if(i.noLeftoversInUrl(t,a,o))return Dc(new ld([],{}));throw new ah(t)}throw e})))}},{key:"noLeftoversInUrl",value:function(e,t,n){return 0===t.length&&!e.children[n]}},{key:"expandSegmentAgainstRoute",value:function(e,t,n,a,o,r,i){return dh(a)!==r?rh(t):void 0===a.redirectTo?this.matchSegmentAgainstRoute(e,t,a,o):i&&this.allowRedirects?this.expandSegmentAgainstRouteUsingRedirect(e,t,n,a,o,r):rh(t)}},{key:"expandSegmentAgainstRouteUsingRedirect",value:function(e,t,n,a,o,r){return"**"===a.path?this.expandWildCardWithParamsAgainstRouteUsingRedirect(e,n,a,r):this.expandRegularSegmentAgainstRouteUsingRedirect(e,t,n,a,o,r)}},{key:"expandWildCardWithParamsAgainstRouteUsingRedirect",value:function(e,t,n,a){var o=this,r=this.applyRedirectCommands([],n.redirectTo,{});return n.redirectTo.startsWith("/")?ih(r):this.lineralizeSegments(n,r).pipe(H((function(n){var r=new ld(n,{});return o.expandSegment(e,r,t,n,a,!1)})))}},{key:"expandRegularSegmentAgainstRouteUsingRedirect",value:function(e,t,n,a,o,r){var i=this,s=uh(t,a,o),l=s.matched,u=s.consumedSegments,c=s.lastChild,p=s.positionalParamSegments;if(!l)return rh(t);var d=this.applyRedirectCommands(u,a.redirectTo,p);return a.redirectTo.startsWith("/")?ih(d):this.lineralizeSegments(a,d).pipe(H((function(a){return i.expandSegment(e,t,n,a.concat(o.slice(c)),r,!1)})))}},{key:"matchSegmentAgainstRoute",value:function(e,t,n,a){var o=this;if("**"===n.path)return n.loadChildren?this.configLoader.load(e.injector,n).pipe(L((function(e){return n._loadedConfig=e,new ld(a,{})}))):Dc(new ld(a,{}));var r=uh(t,n,a),i=r.matched,s=r.consumedSegments,l=r.lastChild;if(!i)return rh(t);var u=a.slice(l);return this.getChildConfig(e,n,a).pipe(H((function(e){var n=e.module,a=e.routes,r=function(e,t,n,a){return n.length>0&&function(e,t,n){return n.some((function(n){return ph(e,t,n)&&"primary"!==dh(n)}))}(e,n,a)?{segmentGroup:ch(new ld(t,function(e,t){var n={};n.primary=t;var a,o=_createForOfIteratorHelper(e);try{for(o.s();!(a=o.n()).done;){var r=a.value;""===r.path&&"primary"!==dh(r)&&(n[dh(r)]=new ld([],{}))}}catch(i){o.e(i)}finally{o.f()}return n}(a,new ld(n,e.children)))),slicedSegments:[]}:0===n.length&&function(e,t,n){return n.some((function(n){return ph(e,t,n)}))}(e,n,a)?{segmentGroup:ch(new ld(e.segments,function(e,t,n,a){var o,r={},i=_createForOfIteratorHelper(n);try{for(i.s();!(o=i.n()).done;){var s=o.value;ph(e,t,s)&&!a[dh(s)]&&(r[dh(s)]=new ld([],{}))}}catch(l){i.e(l)}finally{i.f()}return Object.assign(Object.assign({},a),r)}(e,n,a,e.children))),slicedSegments:n}:{segmentGroup:e,slicedSegments:n}}(t,s,u,a),i=r.segmentGroup,l=r.slicedSegments;return 0===l.length&&i.hasChildren()?o.expandChildren(n,a,i).pipe(L((function(e){return new ld(s,e)}))):0===a.length&&0===l.length?Dc(new ld(s,{})):o.expandSegment(n,i,a,l,"primary",!0).pipe(L((function(e){return new ld(s.concat(e.segments),e.children)})))})))}},{key:"getChildConfig",value:function(e,t,n){var a=this;return t.children?Dc(new Kp(t.children,e)):t.loadChildren?void 0!==t._loadedConfig?Dc(t._loadedConfig):function(e,t,n){var a,o=t.canLoad;return o&&0!==o.length?V(o).pipe(L((function(a){var o,r=e.get(a);if(function(e){return e&&th(e.canLoad)}(r))o=r.canLoad(t,n);else{if(!th(r))throw new Error("Invalid CanLoad guard");o=r(t,n)}return rd(o)}))).pipe(Uc(),(a=function(e){return!0===e},function(e){return e.lift(new cp(a,void 0,e))})):Dc(!0)}(e.injector,t,n).pipe(H((function(n){return n?a.configLoader.load(e.injector,t).pipe(L((function(e){return t._loadedConfig=e,e}))):function(e){return new w((function(t){return t.error(Gp("Cannot load children because the guard of the route \"path: '".concat(e.path,"'\" returned false")))}))}(t)}))):Dc(new Kp([],e))}},{key:"lineralizeSegments",value:function(e,t){for(var n=[],a=t.root;;){if(n=n.concat(a.segments),0===a.numberOfChildren)return Dc(n);if(a.numberOfChildren>1||!a.children.primary)return sh(e.redirectTo);a=a.children.primary}}},{key:"applyRedirectCommands",value:function(e,t,n){return this.applyRedirectCreatreUrlTree(t,this.urlSerializer.parse(t),e,n)}},{key:"applyRedirectCreatreUrlTree",value:function(e,t,n,a){var o=this.createSegmentGroup(e,t.root,n,a);return new sd(o,this.createQueryParams(t.queryParams,this.urlTree.queryParams),t.fragment)}},{key:"createQueryParams",value:function(e,t){var n={};return od(e,(function(e,a){if("string"==typeof e&&e.startsWith(":")){var o=e.substring(1);n[a]=t[o]}else n[a]=e})),n}},{key:"createSegmentGroup",value:function(e,t,n,a){var o=this,r=this.createSegments(e,t.segments,n,a),i={};return od(t.children,(function(t,r){i[r]=o.createSegmentGroup(e,t,n,a)})),new ld(r,i)}},{key:"createSegments",value:function(e,t,n,a){var o=this;return t.map((function(t){return t.path.startsWith(":")?o.findPosParam(e,t,a):o.findOrReturn(t,n)}))}},{key:"findPosParam",value:function(e,t,n){var a=n[t.path.substring(1)];if(!a)throw new Error("Cannot redirect to '".concat(e,"'. Cannot find '").concat(t.path,"'."));return a}},{key:"findOrReturn",value:function(e,t){var n,a=0,o=_createForOfIteratorHelper(t);try{for(o.s();!(n=o.n()).done;){var r=n.value;if(r.path===e.path)return t.splice(a),r;a++}}catch(i){o.e(i)}finally{o.f()}return e}}]),e}();function uh(e,t,n){if(""===t.path)return"full"===t.pathMatch&&(e.hasChildren()||n.length>0)?{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}:{matched:!0,consumedSegments:[],lastChild:0,positionalParamSegments:{}};var a=(t.matcher||Zp)(n,e,t);return a?{matched:!0,consumedSegments:a.consumed,lastChild:a.consumed.length,positionalParamSegments:a.posParams}:{matched:!1,consumedSegments:[],lastChild:0,positionalParamSegments:{}}}function ch(e){if(1===e.numberOfChildren&&e.children.primary){var t=e.children.primary;return new ld(e.segments.concat(t.segments),t.children)}return e}function ph(e,t,n){return(!(e.hasChildren()||t.length>0)||"full"!==n.pathMatch)&&""===n.path&&void 0!==n.redirectTo}function dh(e){return e.outlet||"primary"}var hh=function e(t){_classCallCheck(this,e),this.path=t,this.route=this.path[this.path.length-1]},fh=function e(t,n){_classCallCheck(this,e),this.component=t,this.route=n};function mh(e,t,n){var a=function(e){if(!e)return null;for(var t=e.parent;t;t=t.parent){var n=t.routeConfig;if(n&&n._loadedConfig)return n._loadedConfig}return null}(t);return(a?a.module.injector:n).get(e)}function _h(e,t,n){var a=Fd(e),o=e.value;od(a,(function(e,a){_h(e,o.component?t?t.children.getContext(a):null:t,n)})),n.canDeactivateChecks.push(new fh(o.component&&t&&t.outlet&&t.outlet.isActivated?t.outlet.component:null,o))}var gh=Symbol("INITIAL_VALUE");function vh(){return dp((function(e){return(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=null,o=null;return I(t[t.length-1])&&(o=t.pop()),"function"==typeof t[t.length-1]&&(a=t.pop()),1===t.length&&l(t[0])&&(t=t[0]),Z(t,o).lift(new Nc(a))}).apply(void 0,_toConsumableArray(e.map((function(e){return e.pipe(ip(1),function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=t[t.length-1];return I(a)?(t.pop(),function(e){return mp(t,e,a)}):function(e){return mp(t,e)}}(gh))})))).pipe(_p((function(e,t){var n=!1;return t.reduce((function(e,a,o){if(e!==gh)return e;if(a===gh&&(n=!0),!n){if(!1===a)return a;if(o===t.length-1||nh(a))return a}return e}),e)}),gh),Bc((function(e){return e!==gh})),L((function(e){return nh(e)?e:!0===e})),ip(1))}))}function yh(e,t){return null!==e&&t&&t(new Up(e)),Dc(!0)}function bh(e,t){return null!==e&&t&&t(new Lp(e)),Dc(!0)}function xh(e,t,n){var a=t.routeConfig?t.routeConfig.canActivate:null;return a&&0!==a.length?Dc(a.map((function(a){return Xc((function(){var o,r=mh(a,t,n);if(function(e){return e&&th(e.canActivate)}(r))o=rd(r.canActivate(t,e));else{if(!th(r))throw new Error("Invalid CanActivate guard");o=rd(r(t,e))}return o.pipe(up())}))}))).pipe(vh()):Dc(!0)}function wh(e,t,n){var a=t[t.length-1],o=t.slice(0,t.length-1).reverse().map((function(e){return function(e){var t=e.routeConfig?e.routeConfig.canActivateChild:null;return t&&0!==t.length?{node:e,guards:t}:null}(e)})).filter((function(e){return null!==e})).map((function(t){return Xc((function(){return Dc(t.guards.map((function(o){var r,i=mh(o,t.node,n);if(function(e){return e&&th(e.canActivateChild)}(i))r=rd(i.canActivateChild(a,e));else{if(!th(i))throw new Error("Invalid CanActivateChild guard");r=rd(i(a,e))}return r.pipe(up())}))).pipe(vh())}))}));return Dc(o).pipe(vh())}var Ch=function e(){_classCallCheck(this,e)},kh=function(){function e(t,n,a,o,r,i){_classCallCheck(this,e),this.rootComponentType=t,this.config=n,this.urlTree=a,this.url=o,this.paramsInheritanceStrategy=r,this.relativeLinkResolution=i}return _createClass(e,[{key:"recognize",value:function(){try{var e=Sh(this.urlTree.root,[],[],this.config,this.relativeLinkResolution).segmentGroup,t=this.processSegmentGroup(this.config,e,"primary"),n=new Nd([],Object.freeze({}),Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,{},"primary",this.rootComponentType,null,this.urlTree.root,-1,{}),a=new Id(n,t),o=new jd(this.url,a);return this.inheritParamsAndData(o._root),Dc(o)}catch(r){return new w((function(e){return e.error(r)}))}}},{key:"inheritParamsAndData",value:function(e){var t=this,n=e.value,a=Rd(n,this.paramsInheritanceStrategy);n.params=Object.freeze(a.params),n.data=Object.freeze(a.data),e.children.forEach((function(e){return t.inheritParamsAndData(e)}))}},{key:"processSegmentGroup",value:function(e,t,n){return 0===t.segments.length&&t.hasChildren()?this.processChildren(e,t):this.processSegment(e,t,t.segments,n)}},{key:"processChildren",value:function(e,t){var n,a=this,o=pd(t,(function(t,n){return a.processSegmentGroup(e,t,n)}));return n={},o.forEach((function(e){var t=n[e.value.outlet];if(t){var a=t.url.map((function(e){return e.toString()})).join("/"),o=e.value.url.map((function(e){return e.toString()})).join("/");throw new Error("Two segments cannot have the same outlet name: '".concat(a,"' and '").concat(o,"'."))}n[e.value.outlet]=e.value})),o.sort((function(e,t){return"primary"===e.value.outlet?-1:"primary"===t.value.outlet?1:e.value.outlet.localeCompare(t.value.outlet)})),o}},{key:"processSegment",value:function(e,t,n,a){var o,r=_createForOfIteratorHelper(e);try{for(r.s();!(o=r.n()).done;){var i=o.value;try{return this.processSegmentAgainstRoute(i,t,n,a)}catch(s){if(!(s instanceof Ch))throw s}}}catch(l){r.e(l)}finally{r.f()}if(this.noLeftoversInUrl(t,n,a))return[];throw new Ch}},{key:"noLeftoversInUrl",value:function(e,t,n){return 0===t.length&&!e.children[n]}},{key:"processSegmentAgainstRoute",value:function(e,t,n,a){if(e.redirectTo)throw new Ch;if((e.outlet||"primary")!==a)throw new Ch;var o,r=[],i=[];if("**"===e.path){var s=n.length>0?ad(n).parameters:{};o=new Nd(n,s,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,Ih(e),a,e.component,e,Th(t),Ph(t)+n.length,Fh(e))}else{var l=function(e,t,n){if(""===t.path){if("full"===t.pathMatch&&(e.hasChildren()||n.length>0))throw new Ch;return{consumedSegments:[],lastChild:0,parameters:{}}}var a=(t.matcher||Zp)(n,e,t);if(!a)throw new Ch;var o={};od(a.posParams,(function(e,t){o[t]=e.path}));var r=a.consumed.length>0?Object.assign(Object.assign({},o),a.consumed[a.consumed.length-1].parameters):o;return{consumedSegments:a.consumed,lastChild:a.consumed.length,parameters:r}}(t,e,n);r=l.consumedSegments,i=n.slice(l.lastChild),o=new Nd(r,l.parameters,Object.freeze(Object.assign({},this.urlTree.queryParams)),this.urlTree.fragment,Ih(e),a,e.component,e,Th(t),Ph(t)+r.length,Fh(e))}var u=function(e){return e.children?e.children:e.loadChildren?e._loadedConfig.routes:[]}(e),c=Sh(t,r,i,u,this.relativeLinkResolution),p=c.segmentGroup,d=c.slicedSegments;if(0===d.length&&p.hasChildren()){var h=this.processChildren(u,p);return[new Id(o,h)]}if(0===u.length&&0===d.length)return[new Id(o,[])];var f=this.processSegment(u,p,d,"primary");return[new Id(o,f)]}}]),e}();function Th(e){for(var t=e;t._sourceSegment;)t=t._sourceSegment;return t}function Ph(e){for(var t=e,n=t._segmentIndexShift?t._segmentIndexShift:0;t._sourceSegment;)n+=(t=t._sourceSegment)._segmentIndexShift?t._segmentIndexShift:0;return n-1}function Sh(e,t,n,a,o){if(n.length>0&&function(e,t,n){return n.some((function(n){return Oh(e,t,n)&&"primary"!==Mh(n)}))}(e,n,a)){var r=new ld(t,function(e,t,n,a){var o={};o.primary=a,a._sourceSegment=e,a._segmentIndexShift=t.length;var r,i=_createForOfIteratorHelper(n);try{for(i.s();!(r=i.n()).done;){var s=r.value;if(""===s.path&&"primary"!==Mh(s)){var l=new ld([],{});l._sourceSegment=e,l._segmentIndexShift=t.length,o[Mh(s)]=l}}}catch(u){i.e(u)}finally{i.f()}return o}(e,t,a,new ld(n,e.children)));return r._sourceSegment=e,r._segmentIndexShift=t.length,{segmentGroup:r,slicedSegments:[]}}if(0===n.length&&function(e,t,n){return n.some((function(n){return Oh(e,t,n)}))}(e,n,a)){var i=new ld(e.segments,function(e,t,n,a,o,r){var i,s={},l=_createForOfIteratorHelper(a);try{for(l.s();!(i=l.n()).done;){var u=i.value;if(Oh(e,n,u)&&!o[Mh(u)]){var c=new ld([],{});c._sourceSegment=e,c._segmentIndexShift="legacy"===r?e.segments.length:t.length,s[Mh(u)]=c}}}catch(p){l.e(p)}finally{l.f()}return Object.assign(Object.assign({},o),s)}(e,t,n,a,e.children,o));return i._sourceSegment=e,i._segmentIndexShift=t.length,{segmentGroup:i,slicedSegments:n}}var s=new ld(e.segments,e.children);return s._sourceSegment=e,s._segmentIndexShift=t.length,{segmentGroup:s,slicedSegments:n}}function Oh(e,t,n){return(!(e.hasChildren()||t.length>0)||"full"!==n.pathMatch)&&""===n.path&&void 0===n.redirectTo}function Mh(e){return e.outlet||"primary"}function Ih(e){return e.data||{}}function Fh(e){return e.resolve||{}}function Dh(e,t,n,a){var o=mh(e,t,a);return rd(o.resolve?o.resolve(t,n):o(t,n))}function Ah(e){return function(t){return t.pipe(dp((function(t){var n=e(t);return n?V(n).pipe(L((function(){return t}))):V([t])})))}}var Eh=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"shouldDetach",value:function(e){return!1}},{key:"store",value:function(e,t){}},{key:"shouldAttach",value:function(e){return!1}},{key:"retrieve",value:function(e){return null}},{key:"shouldReuseRoute",value:function(e,t){return e.routeConfig===t.routeConfig}}]),e}(),Rh=new ze("ROUTES"),Nh=function(){function e(t,n,a,o){_classCallCheck(this,e),this.loader=t,this.compiler=n,this.onLoadStartListener=a,this.onLoadEndListener=o}return _createClass(e,[{key:"load",value:function(e,t){var n=this;return this.onLoadStartListener&&this.onLoadStartListener(t),this.loadModuleFactory(t.loadChildren).pipe(L((function(a){n.onLoadEndListener&&n.onLoadEndListener(t);var o=a.create(e);return new Kp(nd(o.injector.get(Rh)).map($p),o)})))}},{key:"loadModuleFactory",value:function(e){var t=this;return"string"==typeof e?V(this.loader.load(e)):rd(e()).pipe(H((function(e){return e instanceof Ye?Dc(e):V(t.compiler.compileModuleAsync(e))})))}}]),e}(),jh=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"shouldProcessUrl",value:function(e){return!0}},{key:"extract",value:function(e){return e}},{key:"merge",value:function(e,t){return e}}]),e}();function zh(e){throw e}function Lh(e,t,n){return t.parse("/")}function Xh(e,t){return Dc(null)}var Uh,Bh,Vh,Hh,qh=((Uh=function(){function e(t,n,a,o,r,i,s,l){var u=this;_classCallCheck(this,e),this.rootComponentType=t,this.urlSerializer=n,this.rootContexts=a,this.location=o,this.config=l,this.lastSuccessfulNavigation=null,this.currentNavigation=null,this.navigationId=0,this.isNgZoneEnabled=!1,this.events=new O,this.errorHandler=zh,this.malformedUriErrorHandler=Lh,this.navigated=!1,this.lastSuccessfulId=-1,this.hooks={beforePreactivation:Xh,afterPreactivation:Xh},this.urlHandlingStrategy=new jh,this.routeReuseStrategy=new Eh,this.onSameUrlNavigation="ignore",this.paramsInheritanceStrategy="emptyOnly",this.urlUpdateStrategy="deferred",this.relativeLinkResolution="legacy",this.ngModule=r.get(Qe),this.console=r.get(Rs);var c=r.get(Ks);this.isNgZoneEnabled=c instanceof Ks,this.resetConfig(l),this.currentUrlTree=new sd(new ld([],{}),{},null),this.rawUrlTree=this.currentUrlTree,this.browserUrlTree=this.currentUrlTree,this.configLoader=new Nh(i,s,(function(e){return u.triggerEvent(new jp(e))}),(function(e){return u.triggerEvent(new zp(e))})),this.routerState=Ad(this.currentUrlTree,this.rootComponentType),this.transitions=new Ac({id:0,currentUrlTree:this.currentUrlTree,currentRawUrl:this.currentUrlTree,extractedUrl:this.urlHandlingStrategy.extract(this.currentUrlTree),urlAfterRedirects:this.urlHandlingStrategy.extract(this.currentUrlTree),rawUrl:this.currentUrlTree,extras:{},resolve:null,reject:null,promise:Promise.resolve(!0),source:"imperative",restoredState:null,currentSnapshot:this.routerState.snapshot,targetSnapshot:null,currentRouterState:this.routerState,targetRouterState:null,guards:{canActivateChecks:[],canDeactivateChecks:[]},guardsResult:null}),this.navigations=this.setupNavigations(this.transitions),this.processNavigations()}return _createClass(e,[{key:"setupNavigations",value:function(e){var t=this,n=this.events;return e.pipe(Bc((function(e){return 0!==e.id})),L((function(e){return Object.assign(Object.assign({},e),{extractedUrl:t.urlHandlingStrategy.extract(e.rawUrl)})})),dp((function(e){var a,o,r,i,s=!1,l=!1;return Dc(e).pipe(xp((function(e){t.currentNavigation={id:e.id,initialUrl:e.currentRawUrl,extractedUrl:e.extractedUrl,trigger:e.source,extras:e.extras,previousNavigation:t.lastSuccessfulNavigation?Object.assign(Object.assign({},t.lastSuccessfulNavigation),{previousNavigation:null}):null}})),dp((function(e){var a,o,r,i,s=!t.navigated||e.extractedUrl.toString()!==t.browserUrlTree.toString();if(("reload"===t.onSameUrlNavigation||s)&&t.urlHandlingStrategy.shouldProcessUrl(e.rawUrl))return Dc(e).pipe(dp((function(e){var a=t.transitions.getValue();return n.next(new Op(e.id,t.serializeUrl(e.extractedUrl),e.source,e.restoredState)),a!==t.transitions.getValue()?zc:[e]})),dp((function(e){return Promise.resolve(e)})),(a=t.ngModule.injector,o=t.configLoader,r=t.urlSerializer,i=t.config,function(e){return e.pipe(dp((function(e){return function(e,t,n,a,o){return new lh(e,t,n,a,o).apply()}(a,o,r,e.extractedUrl,i).pipe(L((function(t){return Object.assign(Object.assign({},e),{urlAfterRedirects:t})})))})))}),xp((function(e){t.currentNavigation=Object.assign(Object.assign({},t.currentNavigation),{finalUrl:e.urlAfterRedirects})})),function(e,n,a,o,r){return function(a){return a.pipe(H((function(a){return function(e,t,n,a){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"emptyOnly",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"legacy";return new kh(e,t,n,a,o,r).recognize()}(e,n,a.urlAfterRedirects,(i=a.urlAfterRedirects,t.serializeUrl(i)),o,r).pipe(L((function(e){return Object.assign(Object.assign({},a),{targetSnapshot:e})})));var i})))}}(t.rootComponentType,t.config,0,t.paramsInheritanceStrategy,t.relativeLinkResolution),xp((function(e){"eager"===t.urlUpdateStrategy&&(e.extras.skipLocationChange||t.setBrowserUrl(e.urlAfterRedirects,!!e.extras.replaceUrl,e.id,e.extras.state),t.browserUrlTree=e.urlAfterRedirects)})),xp((function(e){var a=new Dp(e.id,t.serializeUrl(e.extractedUrl),t.serializeUrl(e.urlAfterRedirects),e.targetSnapshot);n.next(a)})));if(s&&t.rawUrlTree&&t.urlHandlingStrategy.shouldProcessUrl(t.rawUrlTree)){var l=e.id,u=e.extractedUrl,c=e.source,p=e.restoredState,d=e.extras,h=new Op(l,t.serializeUrl(u),c,p);n.next(h);var f=Ad(u,t.rootComponentType).snapshot;return Dc(Object.assign(Object.assign({},e),{targetSnapshot:f,urlAfterRedirects:u,extras:Object.assign(Object.assign({},d),{skipLocationChange:!1,replaceUrl:!1})}))}return t.rawUrlTree=e.rawUrl,t.browserUrlTree=e.urlAfterRedirects,e.resolve(null),zc})),Ah((function(e){var n=e.targetSnapshot,a=e.id,o=e.extractedUrl,r=e.rawUrl,i=e.extras,s=i.skipLocationChange,l=i.replaceUrl;return t.hooks.beforePreactivation(n,{navigationId:a,appliedUrlTree:o,rawUrlTree:r,skipLocationChange:!!s,replaceUrl:!!l})})),xp((function(e){var n=new Ap(e.id,t.serializeUrl(e.extractedUrl),t.serializeUrl(e.urlAfterRedirects),e.targetSnapshot);t.triggerEvent(n)})),L((function(e){return Object.assign(Object.assign({},e),{guards:(n=e.targetSnapshot,a=e.currentSnapshot,o=t.rootContexts,r=n._root,function e(t,n,a,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{canDeactivateChecks:[],canActivateChecks:[]},i=Fd(n);return t.children.forEach((function(t){!function(t,n,a,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{canDeactivateChecks:[],canActivateChecks:[]},i=t.value,s=n?n.value:null,l=a?a.getContext(t.value.outlet):null;if(s&&i.routeConfig===s.routeConfig){var u=function(e,t,n){if("function"==typeof n)return n(e,t);switch(n){case"pathParamsChange":return!cd(e.url,t.url);case"pathParamsOrQueryParamsChange":return!cd(e.url,t.url)||!ed(e.queryParams,t.queryParams);case"always":return!0;case"paramsOrQueryParamsChange":return!Ud(e,t)||!ed(e.queryParams,t.queryParams);case"paramsChange":default:return!Ud(e,t)}}(s,i,i.routeConfig.runGuardsAndResolvers);u?r.canActivateChecks.push(new hh(o)):(i.data=s.data,i._resolvedData=s._resolvedData),e(t,n,i.component?l?l.children:null:a,o,r),u&&r.canDeactivateChecks.push(new fh(l&&l.outlet&&l.outlet.component||null,s))}else s&&_h(n,l,r),r.canActivateChecks.push(new hh(o)),e(t,null,i.component?l?l.children:null:a,o,r)}(t,i[t.value.outlet],a,o.concat([t.value]),r),delete i[t.value.outlet]})),od(i,(function(e,t){return _h(e,a.getContext(t),r)})),r}(r,a?a._root:null,o,[r.value]))});var n,a,o,r})),function(e,t){return function(n){return n.pipe(H((function(n){var a=n.targetSnapshot,o=n.currentSnapshot,r=n.guards,i=r.canActivateChecks,s=r.canDeactivateChecks;return 0===s.length&&0===i.length?Dc(Object.assign(Object.assign({},n),{guardsResult:!0})):function(e,t,n,a){return V(e).pipe(H((function(e){return function(e,t,n,a,o){var r=t&&t.routeConfig?t.routeConfig.canDeactivate:null;return r&&0!==r.length?Dc(r.map((function(r){var i,s=mh(r,t,o);if(function(e){return e&&th(e.canDeactivate)}(s))i=rd(s.canDeactivate(e,t,n,a));else{if(!th(s))throw new Error("Invalid CanDeactivate guard");i=rd(s(e,t,n,a))}return i.pipe(up())}))).pipe(vh()):Dc(!0)}(e.component,e.route,n,t,a)})),up((function(e){return!0!==e}),!0))}(s,a,o,e).pipe(H((function(n){return n&&"boolean"==typeof n?function(e,t,n,a){return V(t).pipe(yp((function(t){return V([bh(t.route.parent,a),yh(t.route,a),wh(e,t.path,n),xh(e,t.route,n)]).pipe(Uc(),up((function(e){return!0!==e}),!0))})),up((function(e){return!0!==e}),!0))}(a,i,e,t):Dc(n)})),L((function(e){return Object.assign(Object.assign({},n),{guardsResult:e})})))})))}}(t.ngModule.injector,(function(e){return t.triggerEvent(e)})),xp((function(e){if(nh(e.guardsResult)){var n=Gp('Redirecting to "'.concat(t.serializeUrl(e.guardsResult),'"'));throw n.url=e.guardsResult,n}})),xp((function(e){var n=new Ep(e.id,t.serializeUrl(e.extractedUrl),t.serializeUrl(e.urlAfterRedirects),e.targetSnapshot,!!e.guardsResult);t.triggerEvent(n)})),Bc((function(e){if(!e.guardsResult){t.resetUrlToCurrentUrlTree();var a=new Ip(e.id,t.serializeUrl(e.extractedUrl),"");return n.next(a),e.resolve(!1),!1}return!0})),Ah((function(e){if(e.guards.canActivateChecks.length)return Dc(e).pipe(xp((function(e){var n=new Rp(e.id,t.serializeUrl(e.extractedUrl),t.serializeUrl(e.urlAfterRedirects),e.targetSnapshot);t.triggerEvent(n)})),(n=t.paramsInheritanceStrategy,a=t.ngModule.injector,function(e){return e.pipe(H((function(e){var t=e.targetSnapshot,o=e.guards.canActivateChecks;return o.length?V(o).pipe(yp((function(e){return function(e,t,n,a){return function(e,t,n,a){var o=Object.keys(e);if(0===o.length)return Dc({});if(1===o.length){var r=o[0];return Dh(e[r],t,n,a).pipe(L((function(e){return _defineProperty({},r,e)})))}var i={};return V(o).pipe(H((function(o){return Dh(e[o],t,n,a).pipe(L((function(e){return i[o]=e,e})))}))).pipe(np(),L((function(){return i})))}(e._resolve,e,t,a).pipe(L((function(t){return e._resolvedData=t,e.data=Object.assign(Object.assign({},e.data),Rd(e,n).resolve),null})))}(e.route,t,n,a)})),function(e,t){return arguments.length>=2?function(n){return y(_p(e,t),Wc(1),$c(t))(n)}:function(t){return y(_p((function(t,n,a){return e(t,n,a+1)})),Wc(1))(t)}}((function(e,t){return e})),L((function(t){return e}))):Dc(e)})))}),xp((function(e){var n=new Np(e.id,t.serializeUrl(e.extractedUrl),t.serializeUrl(e.urlAfterRedirects),e.targetSnapshot);t.triggerEvent(n)})));var n,a})),Ah((function(e){var n=e.targetSnapshot,a=e.id,o=e.extractedUrl,r=e.rawUrl,i=e.extras,s=i.skipLocationChange,l=i.replaceUrl;return t.hooks.afterPreactivation(n,{navigationId:a,appliedUrlTree:o,rawUrlTree:r,skipLocationChange:!!s,replaceUrl:!!l})})),L((function(e){var n=function(e,t,n){var a=function e(t,n,a){if(a&&t.shouldReuseRoute(n.value,a.value.snapshot)){var o=a.value;o._futureSnapshot=n.value;var r=function(t,n,a){return n.children.map((function(n){var o,r=_createForOfIteratorHelper(a.children);try{for(r.s();!(o=r.n()).done;){var i=o.value;if(t.shouldReuseRoute(i.value.snapshot,n.value))return e(t,n,i)}}catch(s){r.e(s)}finally{r.f()}return e(t,n)}))}(t,n,a);return new Id(o,r)}var i=t.retrieve(n.value);if(i){var s=i.route;return function e(t,n){if(t.value.routeConfig!==n.value.routeConfig)throw new Error("Cannot reattach ActivatedRouteSnapshot created from a different route");if(t.children.length!==n.children.length)throw new Error("Cannot reattach ActivatedRouteSnapshot with a different number of children");n.value._futureSnapshot=t.value;for(var a=0;a<t.children.length;++a)e(t.children[a],n.children[a])}(n,s),s}var l,u=new Ed(new Ac((l=n.value).url),new Ac(l.params),new Ac(l.queryParams),new Ac(l.fragment),new Ac(l.data),l.outlet,l.component,l),c=n.children.map((function(n){return e(t,n)}));return new Id(u,c)}(e,t._root,n?n._root:void 0);return new Dd(a,t)}(t.routeReuseStrategy,e.targetSnapshot,e.currentRouterState);return Object.assign(Object.assign({},e),{targetRouterState:n})})),xp((function(e){t.currentUrlTree=e.urlAfterRedirects,t.rawUrlTree=t.urlHandlingStrategy.merge(t.currentUrlTree,e.rawUrl),t.routerState=e.targetRouterState,"deferred"===t.urlUpdateStrategy&&(e.extras.skipLocationChange||t.setBrowserUrl(t.rawUrlTree,!!e.extras.replaceUrl,e.id,e.extras.state),t.browserUrlTree=e.urlAfterRedirects)})),(o=t.rootContexts,r=t.routeReuseStrategy,i=function(e){return t.triggerEvent(e)},L((function(e){return new $d(r,e.targetRouterState,e.currentRouterState,i).activate(o),e}))),xp({next:function(){s=!0},complete:function(){s=!0}}),(a=function(){if(!s&&!l){t.resetUrlToCurrentUrlTree();var a=new Ip(e.id,t.serializeUrl(e.extractedUrl),"Navigation ID ".concat(e.id," is not equal to the current navigation id ").concat(t.navigationId));n.next(a),e.resolve(!1)}t.currentNavigation=null},function(e){return e.lift(new Tp(a))}),ap((function(a){if(l=!0,(s=a)&&s.ngNavigationCancelingError){var o=nh(a.url);o||(t.navigated=!0,t.resetStateAndUrl(e.currentRouterState,e.currentUrlTree,e.rawUrl));var r=new Ip(e.id,t.serializeUrl(e.extractedUrl),a.message);n.next(r),o?setTimeout((function(){var n=t.urlHandlingStrategy.merge(a.url,t.rawUrlTree);return t.scheduleNavigation(n,"imperative",null,{skipLocationChange:e.extras.skipLocationChange,replaceUrl:"eager"===t.urlUpdateStrategy},{resolve:e.resolve,reject:e.reject,promise:e.promise})}),0):e.resolve(!1)}else{t.resetStateAndUrl(e.currentRouterState,e.currentUrlTree,e.rawUrl);var i=new Fp(e.id,t.serializeUrl(e.extractedUrl),a);n.next(i);try{e.resolve(t.errorHandler(a))}catch(u){e.reject(u)}}var s;return zc})))})))}},{key:"resetRootComponentType",value:function(e){this.rootComponentType=e,this.routerState.root.component=this.rootComponentType}},{key:"getTransition",value:function(){var e=this.transitions.value;return e.urlAfterRedirects=this.browserUrlTree,e}},{key:"setTransition",value:function(e){this.transitions.next(Object.assign(Object.assign({},this.getTransition()),e))}},{key:"initialNavigation",value:function(){this.setUpLocationChangeListener(),0===this.navigationId&&this.navigateByUrl(this.location.path(!0),{replaceUrl:!0})}},{key:"setUpLocationChangeListener",value:function(){var e=this;this.locationSubscription||(this.locationSubscription=this.location.subscribe((function(t){var n=e.parseUrl(t.url),a="popstate"===t.type?"popstate":"hashchange",o=t.state&&t.state.navigationId?t.state:null;setTimeout((function(){e.scheduleNavigation(n,a,o,{replaceUrl:!0})}),0)})))}},{key:"getCurrentNavigation",value:function(){return this.currentNavigation}},{key:"triggerEvent",value:function(e){this.events.next(e)}},{key:"resetConfig",value:function(e){Jp(e),this.config=e.map($p),this.navigated=!1,this.lastSuccessfulId=-1}},{key:"ngOnDestroy",value:function(){this.dispose()}},{key:"dispose",value:function(){this.locationSubscription&&(this.locationSubscription.unsubscribe(),this.locationSubscription=null)}},{key:"createUrlTree",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.relativeTo,a=t.queryParams,o=t.fragment,r=t.preserveQueryParams,i=t.queryParamsHandling,s=t.preserveFragment;la()&&r&&console&&console.warn&&console.warn("preserveQueryParams is deprecated, use queryParamsHandling instead.");var l=n||this.routerState.root,u=s?this.currentUrlTree.fragment:o,c=null;if(i)switch(i){case"merge":c=Object.assign(Object.assign({},this.currentUrlTree.queryParams),a);break;case"preserve":c=this.currentUrlTree.queryParams;break;default:c=a||null}else c=r?this.currentUrlTree.queryParams:a||null;return null!==c&&(c=this.removeEmptyProps(c)),function(e,t,n,a,o){if(0===n.length)return Vd(t.root,t.root,t,a,o);var r=function(e){if("string"==typeof e[0]&&1===e.length&&"/"===e[0])return new Hd(!0,0,e);var t=0,n=!1,a=e.reduce((function(e,a,o){if("object"==typeof a&&null!=a){if(a.outlets){var r={};return od(a.outlets,(function(e,t){r[t]="string"==typeof e?e.split("/"):e})),[].concat(_toConsumableArray(e),[{outlets:r}])}if(a.segmentPath)return[].concat(_toConsumableArray(e),[a.segmentPath])}return"string"!=typeof a?[].concat(_toConsumableArray(e),[a]):0===o?(a.split("/").forEach((function(a,o){0==o&&"."===a||(0==o&&""===a?n=!0:".."===a?t++:""!=a&&e.push(a))})),e):[].concat(_toConsumableArray(e),[a])}),[]);return new Hd(n,t,a)}(n);if(r.toRoot())return Vd(t.root,new ld([],{}),t,a,o);var i=function(e,t,n){if(e.isAbsolute)return new qd(t.root,!0,0);if(-1===n.snapshot._lastPathIndex)return new qd(n.snapshot._urlSegment,!0,0);var a=Bd(e.commands[0])?0:1;return function(e,t,n){for(var a=e,o=t,r=n;r>o;){if(r-=o,!(a=a.parent))throw new Error("Invalid number of '../'");o=a.segments.length}return new qd(a,!1,o-r)}(n.snapshot._urlSegment,n.snapshot._lastPathIndex+a,e.numberOfDoubleDots)}(r,t,e),s=i.processChildren?Zd(i.segmentGroup,i.index,r.commands):Gd(i.segmentGroup,i.index,r.commands);return Vd(i.segmentGroup,s,t,a,o)}(l,this.currentUrlTree,e,c,u)}},{key:"navigateByUrl",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{skipLocationChange:!1};la()&&this.isNgZoneEnabled&&!Ks.isInAngularZone()&&this.console.warn("Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?");var n=nh(e)?e:this.parseUrl(e),a=this.urlHandlingStrategy.merge(n,this.rawUrlTree);return this.scheduleNavigation(a,"imperative",null,t)}},{key:"navigate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{skipLocationChange:!1};return function(e){for(var t=0;t<e.length;t++){var n=e[t];if(null==n)throw new Error("The requested path contains ".concat(n," segment at index ").concat(t))}}(e),this.navigateByUrl(this.createUrlTree(e,t),t)}},{key:"serializeUrl",value:function(e){return this.urlSerializer.serialize(e)}},{key:"parseUrl",value:function(e){var t;try{t=this.urlSerializer.parse(e)}catch(n){t=this.malformedUriErrorHandler(n,this.urlSerializer,e)}return t}},{key:"isActive",value:function(e,t){if(nh(e))return id(this.currentUrlTree,e,t);var n=this.parseUrl(e);return id(this.currentUrlTree,n,t)}},{key:"removeEmptyProps",value:function(e){return Object.keys(e).reduce((function(t,n){var a=e[n];return null!=a&&(t[n]=a),t}),{})}},{key:"processNavigations",value:function(){var e=this;this.navigations.subscribe((function(t){e.navigated=!0,e.lastSuccessfulId=t.id,e.events.next(new Mp(t.id,e.serializeUrl(t.extractedUrl),e.serializeUrl(e.currentUrlTree))),e.lastSuccessfulNavigation=e.currentNavigation,e.currentNavigation=null,t.resolve(!0)}),(function(t){e.console.warn("Unhandled Navigation Error: ")}))}},{key:"scheduleNavigation",value:function(e,t,n,a,o){var r,i,s,l=this.getTransition();if(l&&"imperative"!==t&&"imperative"===l.source&&l.rawUrl.toString()===e.toString())return Promise.resolve(!0);if(l&&"hashchange"==t&&"popstate"===l.source&&l.rawUrl.toString()===e.toString())return Promise.resolve(!0);if(l&&"popstate"==t&&"hashchange"===l.source&&l.rawUrl.toString()===e.toString())return Promise.resolve(!0);o?(r=o.resolve,i=o.reject,s=o.promise):s=new Promise((function(e,t){r=e,i=t}));var u=++this.navigationId;return this.setTransition({id:u,source:t,restoredState:n,currentUrlTree:this.currentUrlTree,currentRawUrl:this.rawUrlTree,rawUrl:e,extras:a,resolve:r,reject:i,promise:s,currentSnapshot:this.routerState.snapshot,currentRouterState:this.routerState}),s.catch((function(e){return Promise.reject(e)}))}},{key:"setBrowserUrl",value:function(e,t,n,a){var o=this.urlSerializer.serialize(e);a=a||{},this.location.isCurrentPathEqualTo(o)||t?this.location.replaceState(o,"",Object.assign(Object.assign({},a),{navigationId:n})):this.location.go(o,"",Object.assign(Object.assign({},a),{navigationId:n}))}},{key:"resetStateAndUrl",value:function(e,t,n){this.routerState=e,this.currentUrlTree=t,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,n),this.resetUrlToCurrentUrlTree()}},{key:"resetUrlToCurrentUrlTree",value:function(){this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree),"",{navigationId:this.lastSuccessfulId})}},{key:"url",get:function(){return this.serializeUrl(this.currentUrlTree)}}]),e}()).\u0275fac=function(e){Rr()},Uh.\u0275dir=_t({type:Uh}),Uh),Wh=function e(){_classCallCheck(this,e),this.outlet=null,this.route=null,this.resolver=null,this.children=new Gh,this.attachRef=null},Gh=function(){function e(){_classCallCheck(this,e),this.contexts=new Map}return _createClass(e,[{key:"onChildOutletCreated",value:function(e,t){var n=this.getOrCreateContext(e);n.outlet=t,this.contexts.set(e,n)}},{key:"onChildOutletDestroyed",value:function(e){var t=this.getContext(e);t&&(t.outlet=null)}},{key:"onOutletDeactivated",value:function(){var e=this.contexts;return this.contexts=new Map,e}},{key:"onOutletReAttached",value:function(e){this.contexts=e}},{key:"getOrCreateContext",value:function(e){var t=this.getContext(e);return t||(t=new Wh,this.contexts.set(e,t)),t}},{key:"getContext",value:function(e){return this.contexts.get(e)||null}}]),e}(),Zh=((Bh=function(){function e(t,n,a,o,r){_classCallCheck(this,e),this.parentContexts=t,this.location=n,this.resolver=a,this.changeDetector=r,this.activated=null,this._activatedRoute=null,this.activateEvents=new ds,this.deactivateEvents=new ds,this.name=o||"primary",t.onChildOutletCreated(this.name,this)}return _createClass(e,[{key:"ngOnDestroy",value:function(){this.parentContexts.onChildOutletDestroyed(this.name)}},{key:"ngOnInit",value:function(){if(!this.activated){var e=this.parentContexts.getContext(this.name);e&&e.route&&(e.attachRef?this.attach(e.attachRef,e.route):this.activateWith(e.route,e.resolver||null))}}},{key:"detach",value:function(){if(!this.activated)throw new Error("Outlet is not activated");this.location.detach();var e=this.activated;return this.activated=null,this._activatedRoute=null,e}},{key:"attach",value:function(e,t){this.activated=e,this._activatedRoute=t,this.location.insert(e.hostView)}},{key:"deactivate",value:function(){if(this.activated){var e=this.component;this.activated.destroy(),this.activated=null,this._activatedRoute=null,this.deactivateEvents.emit(e)}}},{key:"activateWith",value:function(e,t){if(this.isActivated)throw new Error("Cannot activate an already activated outlet");this._activatedRoute=e;var n=(t=t||this.resolver).resolveComponentFactory(e._futureSnapshot.routeConfig.component),a=this.parentContexts.getOrCreateContext(this.name).children,o=new Kh(e,a,this.location.injector);this.activated=this.location.createComponent(n,this.location.length,o),this.changeDetector.markForCheck(),this.activateEvents.emit(this.activated.instance)}},{key:"isActivated",get:function(){return!!this.activated}},{key:"component",get:function(){if(!this.activated)throw new Error("Outlet is not activated");return this.activated.instance}},{key:"activatedRoute",get:function(){if(!this.activated)throw new Error("Outlet is not activated");return this._activatedRoute}},{key:"activatedRouteData",get:function(){return this._activatedRoute?this._activatedRoute.snapshot.data:{}}}]),e}()).\u0275fac=function(e){return new(e||Bh)(Er(Gh),Er(Vi),Er(gi),function(e,t){var n=e.attrs;if(n)for(var a=n.length,o=0;o<a;){var r=n[o];if(Pn(r))break;if(0===r)o+=2;else if("number"==typeof r)for(o++;o<a&&"string"==typeof n[o];)o++;else{if("name"===r)return n[o+1];o+=2}}return null}(Zt()),Er(tr))},Bh.\u0275dir=_t({type:Bh,selectors:[["router-outlet"]],outputs:{activateEvents:"activate",deactivateEvents:"deactivate"},exportAs:["outlet"]}),Bh),Kh=function(){function e(t,n,a){_classCallCheck(this,e),this.route=t,this.childContexts=n,this.parent=a}return _createClass(e,[{key:"get",value:function(e,t){return e===Ed?this.route:e===Gh?this.childContexts:this.parent.get(e,t)}}]),e}(),Jh=function e(){_classCallCheck(this,e)},Qh=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"preload",value:function(e,t){return Dc(null)}}]),e}(),Yh=((Hh=function(){function e(t,n,a,o,r){_classCallCheck(this,e),this.router=t,this.injector=o,this.preloadingStrategy=r,this.loader=new Nh(n,a,(function(e){return t.triggerEvent(new jp(e))}),(function(e){return t.triggerEvent(new zp(e))}))}return _createClass(e,[{key:"setUpPreloading",value:function(){var e=this;this.subscription=this.router.events.pipe(Bc((function(e){return e instanceof Mp})),yp((function(){return e.preload()}))).subscribe((function(){}))}},{key:"preload",value:function(){var e=this.injector.get(Qe);return this.processRoutes(e,this.router.config)}},{key:"ngOnDestroy",value:function(){this.subscription.unsubscribe()}},{key:"processRoutes",value:function(e,t){var n,a=[],o=_createForOfIteratorHelper(t);try{for(o.s();!(n=o.n()).done;){var r=n.value;if(r.loadChildren&&!r.canLoad&&r._loadedConfig){var i=r._loadedConfig;a.push(this.processRoutes(i.module,i.routes))}else r.loadChildren&&!r.canLoad?a.push(this.preloadConfig(e,r)):r.children&&a.push(this.processRoutes(e,r.children))}}catch(s){o.e(s)}finally{o.f()}return V(a).pipe(G(),L((function(e){})))}},{key:"preloadConfig",value:function(e,t){var n=this;return this.preloadingStrategy.preload(t,(function(){return n.loader.load(e.injector,t).pipe(H((function(e){return t._loadedConfig=e,n.processRoutes(e.module,e.routes)})))}))}}]),e}()).\u0275fac=function(e){return new(e||Hh)(Ge(qh),Ge(gl),Ge(qs),Ge(_r),Ge(Jh))},Hh.\u0275prov=ce({token:Hh,factory:Hh.\u0275fac}),Hh),$h=((Vh=function(){function e(t,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_classCallCheck(this,e),this.router=t,this.viewportScroller=n,this.options=a,this.lastId=0,this.lastSource="imperative",this.restoredId=0,this.store={},a.scrollPositionRestoration=a.scrollPositionRestoration||"disabled",a.anchorScrolling=a.anchorScrolling||"disabled"}return _createClass(e,[{key:"init",value:function(){"disabled"!==this.options.scrollPositionRestoration&&this.viewportScroller.setHistoryScrollRestoration("manual"),this.routerEventsSubscription=this.createScrollEvents(),this.scrollEventsSubscription=this.consumeScrollEvents()}},{key:"createScrollEvents",value:function(){var e=this;return this.router.events.subscribe((function(t){t instanceof Op?(e.store[e.lastId]=e.viewportScroller.getScrollPosition(),e.lastSource=t.navigationTrigger,e.restoredId=t.restoredState?t.restoredState.navigationId:0):t instanceof Mp&&(e.lastId=t.id,e.scheduleScrollEvent(t,e.router.parseUrl(t.urlAfterRedirects).fragment))}))}},{key:"consumeScrollEvents",value:function(){var e=this;return this.router.events.subscribe((function(t){t instanceof Vp&&(t.position?"top"===e.options.scrollPositionRestoration?e.viewportScroller.scrollToPosition([0,0]):"enabled"===e.options.scrollPositionRestoration&&e.viewportScroller.scrollToPosition(t.position):t.anchor&&"enabled"===e.options.anchorScrolling?e.viewportScroller.scrollToAnchor(t.anchor):"disabled"!==e.options.scrollPositionRestoration&&e.viewportScroller.scrollToPosition([0,0]))}))}},{key:"scheduleScrollEvent",value:function(e,t){this.router.triggerEvent(new Vp(e,"popstate"===this.lastSource?this.store[this.restoredId]:null,t))}},{key:"ngOnDestroy",value:function(){this.routerEventsSubscription&&this.routerEventsSubscription.unsubscribe(),this.scrollEventsSubscription&&this.scrollEventsSubscription.unsubscribe()}}]),e}()).\u0275fac=function(e){Rr()},Vh.\u0275dir=_t({type:Vh}),Vh),ef=new ze("ROUTER_CONFIGURATION"),tf=new ze("ROUTER_FORROOT_GUARD"),nf=[Zl,{provide:dd,useClass:hd},{provide:qh,useFactory:function(e,t,n,a,o,r,i){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:{},l=arguments.length>8?arguments[8]:void 0,u=arguments.length>9?arguments[9]:void 0,c=new qh(null,e,t,n,a,o,r,nd(i));if(l&&(c.urlHandlingStrategy=l),u&&(c.routeReuseStrategy=u),s.errorHandler&&(c.errorHandler=s.errorHandler),s.malformedUriErrorHandler&&(c.malformedUriErrorHandler=s.malformedUriErrorHandler),s.enableTracing){var p=Pl();c.events.subscribe((function(e){p.logGroup("Router Event: "+e.constructor.name),p.log(e.toString()),p.log(e),p.logGroupEnd()}))}return s.onSameUrlNavigation&&(c.onSameUrlNavigation=s.onSameUrlNavigation),s.paramsInheritanceStrategy&&(c.paramsInheritanceStrategy=s.paramsInheritanceStrategy),s.urlUpdateStrategy&&(c.urlUpdateStrategy=s.urlUpdateStrategy),s.relativeLinkResolution&&(c.relativeLinkResolution=s.relativeLinkResolution),c},deps:[dd,Gh,Zl,_r,gl,qs,Rh,ef,[function(){return function e(){_classCallCheck(this,e)}}(),new re],[function(){return function e(){_classCallCheck(this,e)}}(),new re]]},Gh,{provide:Ed,useFactory:function(e){return e.routerState.root},deps:[qh]},{provide:gl,useClass:bl},Yh,Qh,function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"preload",value:function(e,t){return t().pipe(ap((function(){return Dc(null)})))}}]),e}(),{provide:ef,useValue:{enableTracing:!1}}];function af(){return new ul("Router",qh)}var of,rf=((of=function(){function e(t,n){_classCallCheck(this,e)}return _createClass(e,null,[{key:"forRoot",value:function(t,n){return{ngModule:e,providers:[nf,cf(t),{provide:tf,useFactory:uf,deps:[[qh,new re,new se]]},{provide:ef,useValue:n||{}},{provide:Xl,useFactory:lf,deps:[Ml,[new oe(ql),new re],ef]},{provide:$h,useFactory:sf,deps:[qh,$u,ef]},{provide:Jh,useExisting:n&&n.preloadingStrategy?n.preloadingStrategy:Qh},{provide:ul,multi:!0,useFactory:af},[df,{provide:Ss,multi:!0,useFactory:hf,deps:[df]},{provide:mf,useFactory:ff,deps:[df]},{provide:Es,multi:!0,useExisting:mf}]]}}},{key:"forChild",value:function(t){return{ngModule:e,providers:[cf(t)]}}}]),e}()).\u0275mod=ft({type:of}),of.\u0275inj=pe({factory:function(e){return new(e||of)(Ge(tf,8),Ge(qh,8))}}),of);function sf(e,t,n){return n.scrollOffset&&t.setOffset(n.scrollOffset),new $h(e,t,n)}function lf(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.useHash?new Gl(e,t):new Wl(e,t)}function uf(e){if(e)throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");return"guarded"}function cf(e){return[{provide:gr,multi:!0,useValue:e},{provide:Rh,multi:!0,useValue:e}]}var pf,df=((pf=function(){function e(t){_classCallCheck(this,e),this.injector=t,this.initNavigation=!1,this.resultOfPreactivationDone=new O}return _createClass(e,[{key:"appInitializer",value:function(){var e=this;return this.injector.get(Dl,Promise.resolve(null)).then((function(){var t=null,n=new Promise((function(e){return t=e})),a=e.injector.get(qh),o=e.injector.get(ef);if(e.isLegacyDisabled(o)||e.isLegacyEnabled(o))t(!0);else if("disabled"===o.initialNavigation)a.setUpLocationChangeListener(),t(!0);else{if("enabled"!==o.initialNavigation)throw new Error("Invalid initialNavigation options: '".concat(o.initialNavigation,"'"));a.hooks.afterPreactivation=function(){return e.initNavigation?Dc(null):(e.initNavigation=!0,t(!0),e.resultOfPreactivationDone)},a.initialNavigation()}return n}))}},{key:"bootstrapListener",value:function(e){var t=this.injector.get(ef),n=this.injector.get(Yh),a=this.injector.get($h),o=this.injector.get(qh),r=this.injector.get(ml);e===r.components[0]&&(this.isLegacyEnabled(t)?o.initialNavigation():this.isLegacyDisabled(t)&&o.setUpLocationChangeListener(),n.setUpPreloading(),a.init(),o.resetRootComponentType(r.componentTypes[0]),this.resultOfPreactivationDone.next(null),this.resultOfPreactivationDone.complete())}},{key:"isLegacyEnabled",value:function(e){return"legacy_enabled"===e.initialNavigation||!0===e.initialNavigation||void 0===e.initialNavigation}},{key:"isLegacyDisabled",value:function(e){return"legacy_disabled"===e.initialNavigation||!1===e.initialNavigation}}]),e}()).\u0275fac=function(e){return new(e||pf)(Ge(_r))},pf.\u0275prov=ce({token:pf,factory:pf.\u0275fac}),pf);function hf(e){return e.appInitializer.bind(e)}function ff(e){return e.bootstrapListener.bind(e)}var mf=new ze("Router Initializer"),_f=function(){var e=function e(){_classCallCheck(this,e)};return e.newProject=(e.baseURL="https://madeatub.buffalo.edu/mltoolkit")+"/projects/n/",e.getProjects=e.baseURL+"/projects/a/",e.openProject=e.baseURL+"/api/v1/openProject",e.runPipeline=e.baseURL+"/execute/",e.fileUploadURL=e.baseURL+"/upload_files/",e.getProjectFiles=e.baseURL+"/get_project_file_names/",e.getResults=e.baseURL+"/get_results/",e}(),gf=function e(){_classCallCheck(this,e)},vf=function e(){_classCallCheck(this,e)},yf=function(){function e(t){var n=this;_classCallCheck(this,e),this.normalizedNames=new Map,this.lazyUpdate=null,t?this.lazyInit="string"==typeof t?function(){n.headers=new Map,t.split("\n").forEach((function(e){var t=e.indexOf(":");if(t>0){var a=e.slice(0,t),o=a.toLowerCase(),r=e.slice(t+1).trim();n.maybeSetNormalizedName(a,o),n.headers.has(o)?n.headers.get(o).push(r):n.headers.set(o,[r])}}))}:function(){n.headers=new Map,Object.keys(t).forEach((function(e){var a=t[e],o=e.toLowerCase();"string"==typeof a&&(a=[a]),a.length>0&&(n.headers.set(o,a),n.maybeSetNormalizedName(e,o))}))}:this.headers=new Map}return _createClass(e,[{key:"has",value:function(e){return this.init(),this.headers.has(e.toLowerCase())}},{key:"get",value:function(e){this.init();var t=this.headers.get(e.toLowerCase());return t&&t.length>0?t[0]:null}},{key:"keys",value:function(){return this.init(),Array.from(this.normalizedNames.values())}},{key:"getAll",value:function(e){return this.init(),this.headers.get(e.toLowerCase())||null}},{key:"append",value:function(e,t){return this.clone({name:e,value:t,op:"a"})}},{key:"set",value:function(e,t){return this.clone({name:e,value:t,op:"s"})}},{key:"delete",value:function(e,t){return this.clone({name:e,value:t,op:"d"})}},{key:"maybeSetNormalizedName",value:function(e,t){this.normalizedNames.has(t)||this.normalizedNames.set(t,e)}},{key:"init",value:function(){var t=this;this.lazyInit&&(this.lazyInit instanceof e?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach((function(e){return t.applyUpdate(e)})),this.lazyUpdate=null))}},{key:"copyFrom",value:function(e){var t=this;e.init(),Array.from(e.headers.keys()).forEach((function(n){t.headers.set(n,e.headers.get(n)),t.normalizedNames.set(n,e.normalizedNames.get(n))}))}},{key:"clone",value:function(t){var n=new e;return n.lazyInit=this.lazyInit&&this.lazyInit instanceof e?this.lazyInit:this,n.lazyUpdate=(this.lazyUpdate||[]).concat([t]),n}},{key:"applyUpdate",value:function(e){var t=e.name.toLowerCase();switch(e.op){case"a":case"s":var n=e.value;if("string"==typeof n&&(n=[n]),0===n.length)return;this.maybeSetNormalizedName(e.name,t);var a=("a"===e.op?this.headers.get(t):void 0)||[];a.push.apply(a,_toConsumableArray(n)),this.headers.set(t,a);break;case"d":var o=e.value;if(o){var r=this.headers.get(t);if(!r)return;0===(r=r.filter((function(e){return-1===o.indexOf(e)}))).length?(this.headers.delete(t),this.normalizedNames.delete(t)):this.headers.set(t,r)}else this.headers.delete(t),this.normalizedNames.delete(t)}}},{key:"forEach",value:function(e){var t=this;this.init(),Array.from(this.normalizedNames.keys()).forEach((function(n){return e(t.normalizedNames.get(n),t.headers.get(n))}))}}]),e}(),bf=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"encodeKey",value:function(e){return xf(e)}},{key:"encodeValue",value:function(e){return xf(e)}},{key:"decodeKey",value:function(e){return decodeURIComponent(e)}},{key:"decodeValue",value:function(e){return decodeURIComponent(e)}}]),e}();function xf(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/gi,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%2B/gi,"+").replace(/%3D/gi,"=").replace(/%3F/gi,"?").replace(/%2F/gi,"/")}var wf=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(_classCallCheck(this,e),this.updates=null,this.cloneFrom=null,this.encoder=n.encoder||new bf,n.fromString){if(n.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=function(e,t){var n=new Map;return e.length>0&&e.split("&").forEach((function(e){var a=e.indexOf("="),o=_slicedToArray(-1==a?[t.decodeKey(e),""]:[t.decodeKey(e.slice(0,a)),t.decodeValue(e.slice(a+1))],2),r=o[0],i=o[1],s=n.get(r)||[];s.push(i),n.set(r,s)})),n}(n.fromString,this.encoder)}else n.fromObject?(this.map=new Map,Object.keys(n.fromObject).forEach((function(e){var a=n.fromObject[e];t.map.set(e,Array.isArray(a)?a:[a])}))):this.map=null}return _createClass(e,[{key:"has",value:function(e){return this.init(),this.map.has(e)}},{key:"get",value:function(e){this.init();var t=this.map.get(e);return t?t[0]:null}},{key:"getAll",value:function(e){return this.init(),this.map.get(e)||null}},{key:"keys",value:function(){return this.init(),Array.from(this.map.keys())}},{key:"append",value:function(e,t){return this.clone({param:e,value:t,op:"a"})}},{key:"set",value:function(e,t){return this.clone({param:e,value:t,op:"s"})}},{key:"delete",value:function(e,t){return this.clone({param:e,value:t,op:"d"})}},{key:"toString",value:function(){var e=this;return this.init(),this.keys().map((function(t){var n=e.encoder.encodeKey(t);return e.map.get(t).map((function(t){return n+"="+e.encoder.encodeValue(t)})).join("&")})).filter((function(e){return""!==e})).join("&")}},{key:"clone",value:function(t){var n=new e({encoder:this.encoder});return n.cloneFrom=this.cloneFrom||this,n.updates=(this.updates||[]).concat([t]),n}},{key:"init",value:function(){var e=this;null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach((function(t){return e.map.set(t,e.cloneFrom.map.get(t))})),this.updates.forEach((function(t){switch(t.op){case"a":case"s":var n=("a"===t.op?e.map.get(t.param):void 0)||[];n.push(t.value),e.map.set(t.param,n);break;case"d":if(void 0===t.value){e.map.delete(t.param);break}var a=e.map.get(t.param)||[],o=a.indexOf(t.value);-1!==o&&a.splice(o,1),a.length>0?e.map.set(t.param,a):e.map.delete(t.param)}})),this.cloneFrom=this.updates=null)}}]),e}();function Cf(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer}function kf(e){return"undefined"!=typeof Blob&&e instanceof Blob}function Tf(e){return"undefined"!=typeof FormData&&e instanceof FormData}var Pf=function(){function e(t,n,a,o){var r;if(_classCallCheck(this,e),this.url=n,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=t.toUpperCase(),function(e){switch(e){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}(this.method)||o?(this.body=void 0!==a?a:null,r=o):r=a,r&&(this.reportProgress=!!r.reportProgress,this.withCredentials=!!r.withCredentials,r.responseType&&(this.responseType=r.responseType),r.headers&&(this.headers=r.headers),r.params&&(this.params=r.params)),this.headers||(this.headers=new yf),this.params){var i=this.params.toString();if(0===i.length)this.urlWithParams=n;else{var s=n.indexOf("?");this.urlWithParams=n+(-1===s?"?":s<n.length-1?"&":"")+i}}else this.params=new wf,this.urlWithParams=n}return _createClass(e,[{key:"serializeBody",value:function(){return null===this.body?null:Cf(this.body)||kf(this.body)||Tf(this.body)||"string"==typeof this.body?this.body:this.body instanceof wf?this.body.toString():"object"==typeof this.body||"boolean"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()}},{key:"detectContentTypeHeader",value:function(){return null===this.body||Tf(this.body)?null:kf(this.body)?this.body.type||null:Cf(this.body)?null:"string"==typeof this.body?"text/plain":this.body instanceof wf?"application/x-www-form-urlencoded;charset=UTF-8":"object"==typeof this.body||"number"==typeof this.body||Array.isArray(this.body)?"application/json":null}},{key:"clone",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.method||this.method,a=t.url||this.url,o=t.responseType||this.responseType,r=void 0!==t.body?t.body:this.body,i=void 0!==t.withCredentials?t.withCredentials:this.withCredentials,s=void 0!==t.reportProgress?t.reportProgress:this.reportProgress,l=t.headers||this.headers,u=t.params||this.params;return void 0!==t.setHeaders&&(l=Object.keys(t.setHeaders).reduce((function(e,n){return e.set(n,t.setHeaders[n])}),l)),t.setParams&&(u=Object.keys(t.setParams).reduce((function(e,n){return e.set(n,t.setParams[n])}),u)),new e(n,a,r,{params:u,headers:l,reportProgress:s,responseType:o,withCredentials:i})}}]),e}(),Sf=function(){var e={Sent:0,UploadProgress:1,ResponseHeader:2,DownloadProgress:3,Response:4,User:5};return e[e.Sent]="Sent",e[e.UploadProgress]="UploadProgress",e[e.ResponseHeader]="ResponseHeader",e[e.DownloadProgress]="DownloadProgress",e[e.Response]="Response",e[e.User]="User",e}(),Of=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:200,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"OK";_classCallCheck(this,e),this.headers=t.headers||new yf,this.status=void 0!==t.status?t.status:n,this.statusText=t.statusText||a,this.url=t.url||null,this.ok=this.status>=200&&this.status<300},Mf=function(e){_inherits(n,e);var t=_createSuper(n);function n(){var e,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return _classCallCheck(this,n),(e=t.call(this,a)).type=Sf.ResponseHeader,e}return _createClass(n,[{key:"clone",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new n({headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}}]),n}(Of),If=function(e){_inherits(n,e);var t=_createSuper(n);function n(){var e,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return _classCallCheck(this,n),(e=t.call(this,a)).type=Sf.Response,e.body=void 0!==a.body?a.body:null,e}return _createClass(n,[{key:"clone",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new n({body:void 0!==e.body?e.body:this.body,headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}}]),n}(Of),Ff=function(e){_inherits(n,e);var t=_createSuper(n);function n(e){var a;return _classCallCheck(this,n),(a=t.call(this,e,0,"Unknown Error")).name="HttpErrorResponse",a.ok=!1,a.message=a.status>=200&&a.status<300?"Http failure during parsing for "+(e.url||"(unknown url)"):"Http failure response for ".concat(e.url||"(unknown url)",": ").concat(e.status," ").concat(e.statusText),a.error=e.error||null,a}return n}(Of);function Df(e,t){return{body:t,headers:e.headers,observe:e.observe,params:e.params,reportProgress:e.reportProgress,responseType:e.responseType,withCredentials:e.withCredentials}}var Af,Ef,Rf,Nf,jf,zf,Lf,Xf,Uf,Bf,Vf,Hf,qf,Wf,Gf=((Af=function(){function e(t){_classCallCheck(this,e),this.handler=t}return _createClass(e,[{key:"request",value:function(e,t){var n,a=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e instanceof Pf)n=e;else{var r=void 0;r=o.headers instanceof yf?o.headers:new yf(o.headers);var i=void 0;o.params&&(i=o.params instanceof wf?o.params:new wf({fromObject:o.params})),n=new Pf(e,t,void 0!==o.body?o.body:null,{headers:r,params:i,reportProgress:o.reportProgress,responseType:o.responseType||"json",withCredentials:o.withCredentials})}var s=Dc(n).pipe(yp((function(e){return a.handler.handle(e)})));if(e instanceof Pf||"events"===o.observe)return s;var l=s.pipe(Bc((function(e){return e instanceof If})));switch(o.observe||"body"){case"body":switch(n.responseType){case"arraybuffer":return l.pipe(L((function(e){if(null!==e.body&&!(e.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return e.body})));case"blob":return l.pipe(L((function(e){if(null!==e.body&&!(e.body instanceof Blob))throw new Error("Response is not a Blob.");return e.body})));case"text":return l.pipe(L((function(e){if(null!==e.body&&"string"!=typeof e.body)throw new Error("Response is not a string.");return e.body})));case"json":default:return l.pipe(L((function(e){return e.body})))}case"response":return l;default:throw new Error("Unreachable: unhandled observe type ".concat(o.observe,"}"))}}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request("DELETE",e,t)}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request("GET",e,t)}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request("HEAD",e,t)}},{key:"jsonp",value:function(e,t){return this.request("JSONP",e,{params:(new wf).append(t,"JSONP_CALLBACK"),observe:"body",responseType:"json"})}},{key:"options",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request("OPTIONS",e,t)}},{key:"patch",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request("PATCH",e,Df(n,t))}},{key:"post",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request("POST",e,Df(n,t))}},{key:"put",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request("PUT",e,Df(n,t))}}]),e}()).\u0275fac=function(e){return new(e||Af)(Ge(gf))},Af.\u0275prov=ce({token:Af,factory:Af.\u0275fac}),Af),Zf=function(){function e(t,n){_classCallCheck(this,e),this.next=t,this.interceptor=n}return _createClass(e,[{key:"handle",value:function(e){return this.interceptor.intercept(e,this.next)}}]),e}(),Kf=new ze("HTTP_INTERCEPTORS"),Jf=((Ef=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"intercept",value:function(e,t){return t.handle(e)}}]),e}()).\u0275fac=function(e){return new(e||Ef)},Ef.\u0275prov=ce({token:Ef,factory:Ef.\u0275fac}),Ef),Qf=/^\)\]\}',?\n/,Yf=function e(){_classCallCheck(this,e)},$f=((Nf=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"build",value:function(){return new XMLHttpRequest}}]),e}()).\u0275fac=function(e){return new(e||Nf)},Nf.\u0275prov=ce({token:Nf,factory:Nf.\u0275fac}),Nf),em=((Rf=function(){function e(t){_classCallCheck(this,e),this.xhrFactory=t}return _createClass(e,[{key:"handle",value:function(e){var t=this;if("JSONP"===e.method)throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");return new w((function(n){var a=t.xhrFactory.build();if(a.open(e.method,e.urlWithParams),e.withCredentials&&(a.withCredentials=!0),e.headers.forEach((function(e,t){return a.setRequestHeader(e,t.join(","))})),e.headers.has("Accept")||a.setRequestHeader("Accept","application/json, text/plain, */*"),!e.headers.has("Content-Type")){var o=e.detectContentTypeHeader();null!==o&&a.setRequestHeader("Content-Type",o)}if(e.responseType){var r=e.responseType.toLowerCase();a.responseType="json"!==r?r:"text"}var i=e.serializeBody(),s=null,l=function(){if(null!==s)return s;var t=1223===a.status?204:a.status,n=a.statusText||"OK",o=new yf(a.getAllResponseHeaders()),r=function(e){return"responseURL"in e&&e.responseURL?e.responseURL:/^X-Request-URL:/m.test(e.getAllResponseHeaders())?e.getResponseHeader("X-Request-URL"):null}(a)||e.url;return s=new Mf({headers:o,status:t,statusText:n,url:r})},u=function(){var t=l(),o=t.headers,r=t.status,i=t.statusText,s=t.url,u=null;204!==r&&(u=void 0===a.response?a.responseText:a.response),0===r&&(r=u?200:0);var c=r>=200&&r<300;if("json"===e.responseType&&"string"==typeof u){var p=u;u=u.replace(Qf,"");try{u=""!==u?JSON.parse(u):null}catch(d){u=p,c&&(c=!1,u={error:d,text:u})}}c?(n.next(new If({body:u,headers:o,status:r,statusText:i,url:s||void 0})),n.complete()):n.error(new Ff({error:u,headers:o,status:r,statusText:i,url:s||void 0}))},c=function(e){var t=l().url,o=new Ff({error:e,status:a.status||0,statusText:a.statusText||"Unknown Error",url:t||void 0});n.error(o)},p=!1,d=function(t){p||(n.next(l()),p=!0);var o={type:Sf.DownloadProgress,loaded:t.loaded};t.lengthComputable&&(o.total=t.total),"text"===e.responseType&&a.responseText&&(o.partialText=a.responseText),n.next(o)},h=function(e){var t={type:Sf.UploadProgress,loaded:e.loaded};e.lengthComputable&&(t.total=e.total),n.next(t)};return a.addEventListener("load",u),a.addEventListener("error",c),e.reportProgress&&(a.addEventListener("progress",d),null!==i&&a.upload&&a.upload.addEventListener("progress",h)),a.send(i),n.next({type:Sf.Sent}),function(){a.removeEventListener("error",c),a.removeEventListener("load",u),e.reportProgress&&(a.removeEventListener("progress",d),null!==i&&a.upload&&a.upload.removeEventListener("progress",h)),a.abort()}}))}}]),e}()).\u0275fac=function(e){return new(e||Rf)(Ge(Yf))},Rf.\u0275prov=ce({token:Rf,factory:Rf.\u0275fac}),Rf),tm=new ze("XSRF_COOKIE_NAME"),nm=new ze("XSRF_HEADER_NAME"),am=function e(){_classCallCheck(this,e)},om=((Wf=function(){function e(t,n,a){_classCallCheck(this,e),this.doc=t,this.platform=n,this.cookieName=a,this.lastCookieString="",this.lastToken=null,this.parseCount=0}return _createClass(e,[{key:"getToken",value:function(){if("server"===this.platform)return null;var e=this.doc.cookie||"";return e!==this.lastCookieString&&(this.parseCount++,this.lastToken=Su(e,this.cookieName),this.lastCookieString=e),this.lastToken}}]),e}()).\u0275fac=function(e){return new(e||Wf)(Ge(Ol),Ge(As),Ge(tm))},Wf.\u0275prov=ce({token:Wf,factory:Wf.\u0275fac}),Wf),rm=((qf=function(){function e(t,n){_classCallCheck(this,e),this.tokenService=t,this.headerName=n}return _createClass(e,[{key:"intercept",value:function(e,t){var n=e.url.toLowerCase();if("GET"===e.method||"HEAD"===e.method||n.startsWith("http://")||n.startsWith("https://"))return t.handle(e);var a=this.tokenService.getToken();return null===a||e.headers.has(this.headerName)||(e=e.clone({headers:e.headers.set(this.headerName,a)})),t.handle(e)}}]),e}()).\u0275fac=function(e){return new(e||qf)(Ge(am),Ge(nm))},qf.\u0275prov=ce({token:qf,factory:qf.\u0275fac}),qf),im=((Hf=function(){function e(t,n){_classCallCheck(this,e),this.backend=t,this.injector=n,this.chain=null}return _createClass(e,[{key:"handle",value:function(e){if(null===this.chain){var t=this.injector.get(Kf,[]);this.chain=t.reduceRight((function(e,t){return new Zf(e,t)}),this.backend)}return this.chain.handle(e)}}]),e}()).\u0275fac=function(e){return new(e||Hf)(Ge(vf),Ge(_r))},Hf.\u0275prov=ce({token:Hf,factory:Hf.\u0275fac}),Hf),sm=((Vf=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"disable",value:function(){return{ngModule:e,providers:[{provide:rm,useClass:Jf}]}}},{key:"withOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{ngModule:e,providers:[t.cookieName?{provide:tm,useValue:t.cookieName}:[],t.headerName?{provide:nm,useValue:t.headerName}:[]]}}}]),e}()).\u0275mod=ft({type:Vf}),Vf.\u0275inj=pe({factory:function(e){return new(e||Vf)},providers:[rm,{provide:Kf,useExisting:rm,multi:!0},{provide:am,useClass:om},{provide:tm,useValue:"XSRF-TOKEN"},{provide:nm,useValue:"X-XSRF-TOKEN"}]}),Vf),lm=((Bf=function e(){_classCallCheck(this,e)}).\u0275mod=ft({type:Bf}),Bf.\u0275inj=pe({factory:function(e){return new(e||Bf)},providers:[Gf,{provide:gf,useClass:im},em,{provide:vf,useExisting:em},$f,{provide:Yf,useExisting:$f}],imports:[[sm.withOptions({cookieName:"XSRF-TOKEN",headerName:"X-XSRF-TOKEN"})]]}),Bf),um=((Uf=function(){function e(t){_classCallCheck(this,e),this.http=t}return _createClass(e,[{key:"handleError",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"operation",n=arguments.length>1?arguments[1]:void 0;return function(a){return console.error(a),e.log("".concat(t," failed: ").concat(a.message)),Dc(n)}}},{key:"log",value:function(e){console.log("HeroService: "+e)}},{key:"getProjects",value:function(){return this.http.get(_f.getProjects).pipe(ap(this.handleError("getProjects",[])))}},{key:"getResults",value:function(e){return this.http.get(_f.getResults+e).pipe(ap(this.handleError("getResults",[])))}},{key:"createProject",value:function(e){return this.http.get(_f.newProject+e).pipe(ap(this.handleError("newProject",[])))}},{key:"runPipeline",value:function(e,t){return this.http.post(_f.runPipeline+e,JSON.stringify({data:t})).pipe(ap(this.handleError("runPipeline",[])))}},{key:"postFile",value:function(e,t){console.log(e,t);var n=_f.fileUploadURL+t,a=new FormData;return a.append("file",e,e.name),this.http.post(n,a)}},{key:"getProjectFiles",value:function(e){return this.http.get(_f.getProjectFiles+e).pipe(ap(this.handleError("getProjectFiles",[])))}}]),e}()).\u0275fac=function(e){return new(e||Uf)(Ge(Gf))},Uf.\u0275prov=ce({token:Uf,factory:Uf.\u0275fac,providedIn:"root"}),Uf),cm=((Xf=function(){function e(){_classCallCheck(this,e),this.execChange=new O,this.defaultProjectInfo={project_name:"Default ChemML Project"},this.chemMLJsonChange=new O,this.chemMLJson={nodes:{}},this.execChange.next(this.defaultProjectInfo),this.chemMLJsonChange.next(this.chemMLJson)}return _createClass(e,[{key:"updateProjectInfo",value:function(e){this.execChange.next(e)}},{key:"getCurrentProject",value:function(){return this.defaultProjectInfo}},{key:"updateCurrentChemMLJson",value:function(e){this.chemMLJsonChange.next(e)}},{key:"getCurrentChemMLJson",value:function(){return this.chemMLJson}}]),e}()).\u0275fac=function(e){return new(e||Xf)},Xf.\u0275prov=ce({token:Xf,factory:Xf.\u0275fac,providedIn:"root"}),Xf),pm=((Lf=function(){function e(){_classCallCheck(this,e),this.callFunction=new ds}return _createClass(e,[{key:"ngOnInit",value:function(){}},{key:"onClick",value:function(e){this.callFunction.emit(e)}}]),e}()).\u0275fac=function(e){return new(e||Lf)},Lf.\u0275cmp=ct({type:Lf,selectors:[["nav-button"]],inputs:{group:"group",type:"type",description:"description",class:"class",data:"data"},outputs:{callFunction:"callFunction"},decls:2,vars:4,consts:[[3,"type","click"]],template:function(e,t){1&e&&(zr(0,"button",0),Vr("click",(function(e){return t.onClick(e)})),ci(1),Lr()),2&e&&(function(e,t,n,a){var o=Wt(),r=nn(2);o.firstUpdatePass&&function(e,t,n,a){var o=e.data;if(null===o[n+1]){var r=o[mn()+20],i=ai(e,n);ui(r,!0)&&null===t&&!i&&(t=!1),t=function(e,t,n,a){var o=function(e){var t=Vt.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}(e),r=t.residualClasses;if(null===o)0===t.classBindings&&(n=ri(n=oi(null,e,t,n,!0),t.attrs,!0),r=null);else{var i=t.directiveStylingLast;if(-1===i||e[i]!==o)if(n=oi(o,e,t,n,!0),null===r){var s=function(e,t,n){var a=t.classBindings;if(0!==Na(a))return e[Ea(a)]}(e,t);void 0!==s&&Array.isArray(s)&&function(e,t,n,a){e[Ea(t.classBindings)]=a}(e,t,0,s=ri(s=oi(null,e,t,s[1],!0),t.attrs,!0))}else r=function(e,t,n){for(var a=void 0,o=t.directiveEnd,r=1+t.directiveStylingLast;r<o;r++)a=ri(a,e[r].hostAttrs,!0);return ri(a,t.attrs,!0)}(e,t)}return void 0!==r&&(t.residualClasses=r),n}(o,r,t),function(e,t,n,a,o,r){var i=t.classBindings,s=Ea(i),l=Na(i);e[a]=n;var u,c=!1;if(Array.isArray(n)){var p=n;(null===(u=p[1])||ot(p,u)>0)&&(c=!0)}else u=n;if(o)if(0!==l){var d=Ea(e[s+1]);e[a+1]=Aa(d,s),0!==d&&(e[d+1]=ja(e[d+1],a)),e[s+1]=131071&e[s+1]|a<<17}else e[a+1]=Aa(s,0),0!==s&&(e[s+1]=ja(e[s+1],a)),s=a;else e[a+1]=Aa(l,0),0===s?s=a:e[l+1]=ja(e[l+1],a),l=a;c&&(e[a+1]=Ra(e[a+1])),Jr(e,u,a,!0),Jr(e,u,a,!1),function(e,t,n,a,o){var r=e.residualClasses;null!=r&&"string"==typeof t&&ot(r,t)>=0&&(n[a+1]=za(n[a+1]))}(t,u,e,a),i=Aa(s,l),t.classBindings=i}(o,r,t,n,i)}}(o,null,r);var i=qt();if(n!==Pa&&Mr(i,r,n)){var s=o.data[mn()+20];if(ui(s,!0)&&!ai(o,r)){var l=s.classesWithoutHost;null!==l&&(n=xe(l,n||"")),jr(o,s,i,n,!0)}else!function(e,t,n,a,o,r,i,s){o===Pa&&(o=Kr);for(var l=0,u=0,c=0<o.length?o[0]:null,p=0<r.length?r[0]:null;null!==c||null!==p;){var d=l<o.length?o[l+1]:void 0,h=u<r.length?r[u+1]:void 0,f=null,m=void 0;c===p?(l+=2,u+=2,d!==h&&(f=p,m=h)):null===p||null!==c&&c<p?(l+=2,f=c):(u+=2,f=p,m=h),null!==f&&ii(e,t,n,a,f,m,!0,s),c=l<o.length?o[l]:null,p=u<r.length?r[u]:null}}(o,s,i,i[11],i[r+1],i[r+1]=function(e,t,n){if(null==n||""===n)return Kr;var a=[],o=ra(n);if(Array.isArray(o))for(var r=0;r<o.length;r++)e(a,o[r],!0);else if("object"==typeof o)for(var i in o)o.hasOwnProperty(i)&&e(a,i,o[i]);else"string"==typeof o&&t(a,o);return a}(e,t,n),0,r)}}(nt,ni,t.class),Nr("type",t.type),Fa(1),di(" ",t.description,"\n"))},styles:["button{color:#808292;border-radius:29px;border:1px solid #e8e8ef;line-height:39px;background-color:#f1f4fc;padding:0 2%;margin-right:2%;outline:None!important;cursor:pointer}button,button:hover{font-family:Roboto;display:inline-block;font-size:14px;text-align:center}button:hover{background-color:#fbfbfb;-webkit-text-decoration:None;text-decoration:None;outline:None;color:#393c44}"],encapsulation:2}),Lf),dm=((zf=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"ngOnInit",value:function(){}}]),e}()).\u0275fac=function(e){return new(e||zf)},zf.\u0275cmp=ct({type:zf,selectors:[["app-global-footer"]],decls:11,vars:0,consts:[[1,"footer"],[1,"left"],["href","/home"],["href","/github-link"],[1,"center"],[1,"right"],["href","email-link"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),zr(2,"a",2),ci(3," About this project "),Lr(),ci(4," \xa0 \xa0 | \xa0 \xa0 "),zr(5,"a",3),ci(6,"Contribute to the project on Github "),Lr(),Lr(),Xr(7,"div",4),zr(8,"div",5),zr(9,"a",6),ci(10,"Report a bug"),Lr(),Lr(),Lr())},styles:[".footer[_ngcontent-%COMP%]{z-index:1000;position:absolute;bottom:0;left:0;width:-webkit-fill-available;padding:1%;background-color:#fff;border-top:1px solid #e2e2e2}.footer[_ngcontent-%COMP%], a[_ngcontent-%COMP%]{font-family:Roboto;color:#8c8c8c}a[_ngcontent-%COMP%], a[_ngcontent-%COMP%]:hover{text-decoration:none}a[_ngcontent-%COMP%]:hover{font-family:Roboto;color:#545454}.left[_ngcontent-%COMP%]{float:left}.left[_ngcontent-%COMP%], .right[_ngcontent-%COMP%]{display:inline-block}.right[_ngcontent-%COMP%]{float:right}"]}),zf),hm=((jf=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"transform",value:function(e){return new Date(e).toDateString()}}]),e}()).\u0275fac=function(e){return new(e||jf)},jf.\u0275pipe=gt({name:"timePipe",type:jf,pure:!0}),jf);function fm(e,t){if(1&e){var n=Ur();zr(0,"div",25),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit;return Wr().selectProject("project_"+e,a)})),zr(1,"div",26),ci(2),Lr(),zr(3,"div",27),ci(4),ls(5,"timePipe"),Lr(),zr(6,"div",28),ci(7,"Bhavin"),Lr(),zr(8,"div",29),Xr(9,"img",30),Lr(),zr(10,"div",29),Xr(11,"img",31),Lr(),zr(12,"div",29),Xr(13,"img",32),Lr(),Lr()}if(2&e){var a=t.$implicit,o=t.index;Zr("id","project_",o,""),Fr("data-index",o),Fa(2),pi(a.project_name),Fa(2),pi(us(5,4,a.created_date.$date))}}var mm,_m,gm,vm=((mm=function(){function e(t,n){_classCallCheck(this,e),this.dataServiceService=t,this.currentProjectService=n,this.closeBoxEmit=new ds}return _createClass(e,[{key:"goToProjectCanvas",value:function(){this.closeBoxEmit.emit()}},{key:"createProject",value:function(e){console.log("Create a new project")}},{key:"ngOnInit",value:function(){this.getProjects()}},{key:"getProjects",value:function(){var e=this;this.dataServiceService.getProjects().subscribe((function(t){e.projectsList=t.data,e.renderList=e.projectsList,console.log(t)}))}},{key:"selectProject",value:function(e,t){for(var n=document.getElementById(e),a=n.parentElement,o=0;o<a.children.length;o++)if(console.log(a.children[o].classList),a.children[o].classList.contains("selectedProject")){a.children[o].classList.remove("selectedProject"),a.children[o].classList.add("project_list_item");break}this.selectedProject=t,n.classList.remove("project_list_item"),n.classList.add("selectedProject")}},{key:"searchFilter",value:function(e){var t=this,n=e.srcElement.value;0!=n.length?(this.renderList=[],this.projectsList.forEach((function(e){e.project_name.includes(n)&&t.renderList.push(e)}))):this.renderList=this.projectsList}},{key:"openProject",value:function(){this.currentProjectService.updateProjectInfo(this.selectedProject),this.goToProjectCanvas()}},{key:"newProject",value:function(){}},{key:"goHome",value:function(e){}}]),e}()).\u0275fac=function(e){return new(e||mm)(Er(um),Er(cm))},mm.\u0275cmp=ct({type:mm,selectors:[["app-landing-page"]],outputs:{closeBoxEmit:"closeBoxEmit"},decls:41,vars:1,consts:[[1,"landingPage"],["id","header"],["src","../../assets/University_at_Buffalo_logo.svg.png",1,"ub_logo"],[1,"header-left"],["src","../../assets/nsf_logo.png",1,"nsf_logo"],[1,"made_logo"],["id","navigation"],["id","leftside"],["id","details"],["id","back"],["src","assets/arrow.svg"],["id","names"],["id","title"],["id","subtitle"],["description","Home",1,"button",3,"callFunction"],["description","New Project",1,"button",3,"callFunction"],["description","Open Project",1,"button",3,"callFunction"],["id","buttonsright"],["id","publish",3,"click"],[1,"projects"],[1,"table-container"],[1,"header-container"],[1,"table-item-header"],[1,"table-body"],["class","project_list_item",3,"id","click",4,"ngFor","ngForOf"],[1,"project_list_item",3,"id","click"],[1,"table-item","project_name"],[1,"table-item","created_date"],[1,"table-item","project_author"],[1,"table-item"],["src","../assets/bin.svg",1,"row_icon"],["src","../assets/tab.svg",1,"row_icon"],["src","../assets/copy.svg",1,"row_icon"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),Xr(2,"img",2),zr(3,"div",3),Xr(4,"img",4),zr(5,"p",5),ci(6," MaDE@UB Machine Learning Toolkit "),Lr(),Lr(),Lr(),zr(7,"div",6),zr(8,"div",7),zr(9,"div",8),zr(10,"div",9),Xr(11,"img",10),Lr(),zr(12,"div",11),zr(13,"p",12),ci(14,"Toolkit Toolbar"),Lr(),zr(15,"p",13),ci(16,"Portal"),Lr(),Lr(),Lr(),Lr(),zr(17,"nav-button",14),Vr("callFunction",(function(e){return t.goHome(e)})),Lr(),zr(18,"nav-button",15),Vr("callFunction",(function(){return t.newProject()})),Lr(),zr(19,"nav-button",16),Vr("callFunction",(function(){return t.openProject()})),Lr(),zr(20,"div",17),zr(21,"div",18),Vr("click",(function(){return t.openProject()})),ci(22,"Open Selected Project"),Lr(),Lr(),Lr(),zr(23,"div",19),zr(24,"div",20),zr(25,"div",21),zr(26,"div",22),ci(27,"Project Name"),Lr(),zr(28,"div",22),ci(29,"Created Date"),Lr(),zr(30,"div",22),ci(31,"Author"),Lr(),zr(32,"div",22),ci(33,"Delete"),Lr(),zr(34,"div",22),ci(35,"Open in new tab"),Lr(),zr(36,"div",22),ci(37,"Duplicate Project"),Lr(),Lr(),zr(38,"div",23),Ar(39,fm,14,6,"div",24),Lr(),Lr(),Lr(),Xr(40,"app-global-footer"),Lr()),2&e&&(Fa(39),Nr("ngForOf",t.renderList))},directives:[pm,Au,dm],pipes:[hm],styles:['#header[_ngcontent-%COMP%]{padding:1% 2%!important;background-color:#fff!important;border-bottom:1px solid #e2e2e2!important;z-index:1000!important}.ub_logo[_ngcontent-%COMP%]{width:8%!important}.made_logo[_ngcontent-%COMP%], .ub_logo[_ngcontent-%COMP%]{display:inline-block!important}.made_logo[_ngcontent-%COMP%]{float:right!important;margin:0!important;font-family:Roboto!important;font-weight:800!important;font-size:1.3em!important;color:#393c44!important;width:108%!important;padding-left:5%!important;border-left:2px solid #d4d4d4!important}.nsf_logo[_ngcontent-%COMP%]{width:65px!important;position:absolute!important;top:-12px!important;left:-101px!important;padding-right:10px!important}.header-left[_ngcontent-%COMP%]{display:inline-block;float:right;position:relative}.side[_ngcontent-%COMP%]{width:25%!important;margin-left:10%!important}.select_file_btn[_ngcontent-%COMP%]{display:inline-block;border-radius:5px;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:287px;height:38px;line-height:38px;color:#253134;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}.select_file_btn[_ngcontent-%COMP%]:hover{background-color:#217ce8;color:#fff}.items[_ngcontent-%COMP%]{display:inline-block;background-color:#237ce8;color:#fff;border-radius:26px;font-family:Roboto;padding:11px 1%;margin:15px 15px 15px 2%}.visualize[_ngcontent-%COMP%]{height:90%;background-color:#fff;padding:0;border-radius:15px;margin:9% 3% 5%}.axis[_ngcontent-%COMP%]   line[_ngcontent-%COMP%], .axis[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{fill:none;stroke:#000;shape-rendering:crispEdges}.axis[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{font-family:sans-serif;font-size:11px}#navigation[_ngcontent-%COMP%]{border-radius:18px;height:71px;background-color:#fff;border-bottom:1px solid #e8e8ef;width:96%;display:table;box-sizing:border-box;position:fixed;top:0;z-index:100;margin:5% 2% 2%}.projects[_ngcontent-%COMP%]{background-color:#fff;box-shadow:0 0 5px 0 #e2e2e2;border-radius:11px;margin-top:6.5%!important;margin-left:2%;margin-right:2%;border-top:13px solid #3186e9;margin-top:3%;padding:5% 1% 2%}table[_ngcontent-%COMP%]{font-family:arial,sans-serif;border-collapse:collapse;width:auto;font-size:1.4em}td[_ngcontent-%COMP%], th[_ngcontent-%COMP%]{border-bottom:1px solid #828282;text-align:left;padding:1%}#back[_ngcontent-%COMP%]{width:40px;height:40px;border-radius:100px;background-color:#f1f4fc;text-align:center;display:inline-block;vertical-align:top;margin-top:15px;margin-right:10px}#back[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:13px}#names[_ngcontent-%COMP%]{display:inline-block;vertical-align:top}#title[_ngcontent-%COMP%]{font-weight:500;font-size:16px;color:#393c44;margin-bottom:0;margin-top:14%}#subtitle[_ngcontent-%COMP%], #title[_ngcontent-%COMP%]{font-family:Roboto}#subtitle[_ngcontent-%COMP%]{color:#808292;font-size:14px;margin-top:0}#leftside[_ngcontent-%COMP%]{margin-right:2%;display:inline-block;vertical-align:middle;margin-left:20px}#centerswitch[_ngcontent-%COMP%]{position:absolute;width:222px;left:50%;margin-left:-111px;top:15px}#leftswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef;background-color:#fbfbfb;width:111px;border-radius:5px 0 0 5px;color:#393c44}#leftswitch[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{height:39px;line-height:39px;font-family:Roboto;display:inline-block;font-size:14px;text-align:center}#rightswitch[_ngcontent-%COMP%]{color:#808292;border-radius:0 5px 5px 0;width:102px;margin-left:-5px}#discard[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef}#discard[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#a6a6b3;width:95px;height:38px;border-radius:5px;text-align:center;line-height:38px;display:inline-block;vertical-align:top;transition:all .2s cubic-bezier(.05,.03,.35,1)}#discard[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#publish[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#217ce8;background-color:#fff;width:auto;padding-left:16px;padding-right:16px;height:45px;padding-top:1%;margin-left:18px;display:inline-block;vertical-align:top;text-align:center;line-height:38px;margin-right:20px;transition:all .2s cubic-bezier(.05,.03,.35,1)}#publish[_ngcontent-%COMP%], #publish[_ngcontent-%COMP%]:hover{border-radius:5px;border:2px solid #217ce8}#publish[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7;background-color:#217ce8;color:#fff}#buttonsright[_ngcontent-%COMP%]{float:right;margin-top:15px}#leftcard[_ngcontent-%COMP%]{width:370px;border:1px solid #e8e8ef;padding-top:3%;padding-left:20px;height:auto;position:absolute;z-index:2;vertical-align:middle;margin-top:9%;border-radius:16px;margin-left:2%;box-shadow:2px 2px 25px 2px #e2e2e2;transition:.5s;padding-bottom:5%}#leftcard[_ngcontent-%COMP%], #search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{background-color:#fff;box-sizing:border-box}#search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-family:Roboto;font-size:16px}[_ngcontent-%COMP%]::-moz-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::placeholder{color:#c9c9d5}#search[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:absolute;margin-top:10px;width:18px;margin-left:12px}#subnav[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:calc(100% + 20px);margin-left:-20px;margin-top:10px;overflow:scroll;display:flex;border-top:1px solid #e8e8ef}.navdisabled[_ngcontent-%COMP%]{transition:all .3s cubic-bezier(.05,.03,.35,1)}.navdisabled[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.navactive[_ngcontent-%COMP%]{color:#393c44!important}#triggers[_ngcontent-%COMP%]{margin-left:20px;font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#808292;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left}.navactive[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#actions[_ngcontent-%COMP%]{float:left}#actions[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{display:inline-block;font-weight:500;color:#808292;height:48px;line-height:48px;width:29.33333%;text-align:center}#actions[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px}#footer[_ngcontent-%COMP%]{position:absolute;left:0;padding-left:20px;line-height:40px;bottom:0;width:362px;border:1px solid #e8e8ef;height:67px;box-sizing:border-box;background-color:#fff}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;color:#393c44;transition:all .2s cubic-bezier(.05,.03,.35,1)}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{opacity:.5}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#808292}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block}#footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:5px;margin-right:5px}.blockelem[_ngcontent-%COMP%]:first-child{margin-top:20px}.block[_ngcontent-%COMP%], .blockintree[_ngcontent-%COMP%]{padding-top:10px;width:350px;border:1px solid transparent;transition-property:box-shadow,height;transition-duration:.2s;transition-timing-function:cubic-bezier(.05,.03,.35,1);border-radius:5px;box-shadow:11px 11px 30px #e2e2e2;box-sizing:border-box}.blockintree[_ngcontent-%COMP%]{background-color:#fff}.blockelem[_ngcontent-%COMP%]{padding-top:10px;width:350px;border:1px solid transparent;transition-property:box-shadow,height;transition-duration:.2s;transition-timing-function:cubic-bezier(.05,.03,.35,1);border-radius:5px;box-shadow:0 0 30px rgba(22,33,74,0);box-sizing:border-box}.blockelem[_ngcontent-%COMP%]:hover{box-shadow:0 4px 30px rgba(22,33,74,.08);border-radius:5px;background-color:#fff;cursor:pointer}.blockico[_ngcontent-%COMP%], .grabme[_ngcontent-%COMP%]{display:inline-block}.grabme[_ngcontent-%COMP%]{margin-top:10px;margin-left:10px;margin-bottom:-14px;width:15px}.np-box-container[_ngcontent-%COMP%]{position:absolute;left:42%;top:40%;background-color:#fff;padding:2%;border-radius:11px;box-shadow:2px 2px 25px 2px #292929;z-index:1000;border-top:19px solid #227ce8}.title[_ngcontent-%COMP%]{font-family:Roboto;font-weight:800;font-size:19px;margin-bottom:8%;color:#393c44}.overlay[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;background-color:rgba(0,0,0,.72);z-index:999}.input_text[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-sizing:border-box;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-size:20px;width:100%;color:#393c44;padding:8% 3%}.input_text[_ngcontent-%COMP%], .submit-btn[_ngcontent-%COMP%]{background-color:#fff;font-family:Roboto}.submit-btn[_ngcontent-%COMP%]{color:#217ce8;border-radius:5px;border:2px solid #217ce8;margin-top:2%;float:right}.close-btn[_ngcontent-%COMP%], .submit-btn[_ngcontent-%COMP%]{font-weight:800;font-size:14px;padding:1% 5%;display:inline-block;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.close-btn[_ngcontent-%COMP%]{font-family:Roboto;color:#9c9c9c;background-color:#fff;border-radius:5px;border:2px solid #9c9c9c;margin-top:8%;float:left}.options[_ngcontent-%COMP%]{margin-top:9%;margin-left:2%}.close-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#9c9c9c}.table-item[_ngcontent-%COMP%], .table-item-header[_ngcontent-%COMP%]{display:inline-block;float:left;font-size:16px;width:13em;font-family:Roboto;color:#393c44}.table-item-header[_ngcontent-%COMP%]{font-weight:700}#blocklist[_ngcontent-%COMP%]{height:calc(100% - 220px);overflow:auto}#proplist[_ngcontent-%COMP%]{height:calc(100% - 305px);overflow:auto;margin-top:-30px;padding-top:13px}.blockin[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;margin-left:12px}.blockico[_ngcontent-%COMP%]{width:36px;height:36px;background-color:#f1f4fc;border-radius:5px;text-align:center;white-space:nowrap}.blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{height:100%;width:0}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:auto;margin-right:auto;width:52%}.blocktext[_ngcontent-%COMP%]{display:inline-block;width:220px;vertical-align:top;margin-left:12px}.blocktitle[_ngcontent-%COMP%]{margin:0!important;padding:0!important;font-family:Roboto;font-weight:500;font-size:16px;color:#393c44}.blockdesc[_ngcontent-%COMP%]{margin-top:5px;font-family:Roboto;color:#808292;font-size:14px;line-height:21px}.blockdisabled[_ngcontent-%COMP%]{background-color:#f0f2f9;opacity:.5}.project_name_input[_ngcontent-%COMP%]{padding:1%;font-size:1.3em;border:1px solid #e2e2e2;display:inline-block}.project_list_item[_ngcontent-%COMP%]{cursor:pointer;height:9%!important;display:flex;border-top:2px solid #e6e6e6;padding:20px}.header-container[_ngcontent-%COMP%]{position:fixed;height:6%;background-color:#f1f4fc;border-radius:12px;margin-bottom:0;width:92%;margin-top:-4%;padding:.9% 1% 1%}#closecard[_ngcontent-%COMP%]{position:absolute;margin-left:348px;background-color:#fff;border-radius:0 5px 5px 0;border-bottom:1px solid #e8e8ef;border-right:1px solid #e8e8ef;border-top:1px solid #e8e8ef;width:53px;height:53px;text-align:center;z-index:10}#closecard[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:15px}#canvas[_ngcontent-%COMP%]{position:absolute;width:calc(100% - 361px);height:calc(100% - 71px);top:71px;left:361px;z-index:0;overflow:auto}#search[_ngcontent-%COMP%]{margin-bottom:7%!important}#propwrap[_ngcontent-%COMP%]{right:0;width:40%;overflow:hidden;z-index:-2}#properties[_ngcontent-%COMP%], #propwrap[_ngcontent-%COMP%]{position:absolute;top:0;height:100%;padding-left:20px}#properties[_ngcontent-%COMP%]{width:70%;background-color:#fff;right:-150px;opacity:0;z-index:2;box-shadow:-4px 0 40px rgba(26,26,73,0);transition:all .25s cubic-bezier(.05,.03,.35,1)}.itson[_ngcontent-%COMP%]{z-index:2!important}.expanded[_ngcontent-%COMP%]{right:0!important;opacity:1!important;box-shadow:-4px 0 40px rgba(26,26,73,.05);z-index:2}#header2[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;margin-top:101px}#close[_ngcontent-%COMP%]{margin-top:100px;position:absolute;right:20px;z-index:9999;transition:all .25s cubic-bezier(.05,.03,.35,1)}#close[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#propswitch[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:100%;margin-top:10px;margin-left:-20px;margin-bottom:30px}#dataprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#dataprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#alertprop[_ngcontent-%COMP%]{float:left}#alertprop[_ngcontent-%COMP%], #logsprop[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;font-weight:500;color:#808292;font-size:14px;height:48px;line-height:48px;width:29.33333%;text-align:center}.dropme[_ngcontent-%COMP%], .inputlabel[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#253134}.dropme[_ngcontent-%COMP%]{background-color:#fff;border-radius:5px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);text-indent:20px;height:40px;line-height:40px;width:287px;margin-bottom:25px}.dropme[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:17px;float:right;margin-right:15px}.checkus[_ngcontent-%COMP%]{margin-bottom:10px}.checkus[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;margin-left:10px}#divisionthing[_ngcontent-%COMP%]{height:1px;width:100%;background-color:#e8e8ef;position:absolute;right:0;bottom:80}#removeblock[_ngcontent-%COMP%]{width:287px;color:#253134}#removeblock[_ngcontent-%COMP%], #visualize_btn[_ngcontent-%COMP%]{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;height:38px;line-height:38px;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}#visualize_btn[_ngcontent-%COMP%]{width:23%;color:#fff;right:21px;background-color:#247ce8}#table_preview[_ngcontent-%COMP%]{font-family:Trebuchet MS,Arial,Helvetica,sans-serif;border-collapse:collapse;width:81%;margin-left:2%}#customers[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], #table_preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:8px}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(2n){background-color:#f2f2f2}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#ddd}#table_preview[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#247ce8;color:#fff;text-align:center}#visualize_btn[_ngcontent-%COMP%]:hover{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:23%;height:38px;line-height:38px;color:#247ce8;right:21px;border:1px solid #e8e8ef;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1)}#filename[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;margin-left:2%;font-weight:800}#removeblock[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.noselect[_ngcontent-%COMP%]{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blockyname[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;color:#253134;margin-left:8px;font-size:16px}.blockyleft[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockyname[_ngcontent-%COMP%], .blockyright[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockyright[_ngcontent-%COMP%]{float:right;margin-right:20px;margin-top:10px;width:28px;height:28px;border-radius:5px;text-align:center;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1);z-index:10}.blockyright[_ngcontent-%COMP%]:hover{background-color:#f1f4fc;cursor:pointer}.blockyright[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:12px}.blockyleft[_ngcontent-%COMP%]{display:inline-block;margin-left:20px}.blockydiv[_ngcontent-%COMP%]{width:100%;height:1px;background-color:#e9e9ef}.blockyinfo[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#808292;margin-top:15px;text-indent:20px;margin-bottom:20px}.blockyinfo[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#253134;font-weight:500;display:inline-block;border-bottom:1px solid #d3dcea;line-height:20px;text-indent:0}.selectedProject[_ngcontent-%COMP%]{color:#fff;cursor:pointer;height:9%!important;display:flex;border-left:6px solid #217ce8;background-color:#f7f5f5;padding:20px 20px 20px 14px;border-top:2px solid #e6e6e6;border-right:6px solid #217ce8}.newProjectButton[_ngcontent-%COMP%]{display:inline-block;margin-right:4%;font-family:Roboto;font-weight:800;font-size:18px!important;color:#217ce8;background-color:#fff;border:2px solid #217ce8;font-size:14px;padding:.7% 2%;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.row_icon[_ngcontent-%COMP%]{width:10%}.submit-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#217ce8}.table-container[_ngcontent-%COMP%]{height:500px!important;overflow-y:scroll}.block[_ngcontent-%COMP%]{width:40%!important;background-color:#fff;margin-top:0!important;box-shadow:0 4px 30px rgba(22,33,74,.05)}.selectedblock[_ngcontent-%COMP%]{border:2px solid #217ce8;box-shadow:0 4px 30px rgba(22,33,74,.08)}.custom-select[_ngcontent-%COMP%]{position:relative;font-family:Arial}.custom-select[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{display:none}.select-selected[_ngcontent-%COMP%]{background-color:#1e90ff}.select-selected[_ngcontent-%COMP%]:after{position:absolute;content:"";top:14px;right:10px;width:0;height:0;border:6px solid transparent;border-top-color:#fff}.select-selected.select-arrow-active[_ngcontent-%COMP%]:after{border-color:transparent transparent #fff;top:7px}.select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%], .select-selected[_ngcontent-%COMP%]{color:#fff;padding:8px 16px;border:1px solid transparent;border-bottom-color:rgba(0,0,0,.1);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-items[_ngcontent-%COMP%]{position:absolute;background-color:#1e90ff;top:100%;left:0;right:0;z-index:99}.select-hide[_ngcontent-%COMP%]{display:none}.same-as-selected[_ngcontent-%COMP%], .select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:hover{background-color:rgba(0,0,0,.1)}@media only screen and (max-width:832px){#centerswitch[_ngcontent-%COMP%]{display:none}}@media only screen and (max-width:560px){#names[_ngcontent-%COMP%]{display:none}}']}),mm),ym=[{path:"",component:(_m=function(){function e(t){_classCallCheck(this,e),this.router=t}return _createClass(e,[{key:"ngOnInit",value:function(){}},{key:"sendToPortal",value:function(){this.router.navigate(["/portal"])}}]),e}(),_m.\u0275fac=function(e){return new(e||_m)(Er(qh))},_m.\u0275cmp=ct({type:_m,selectors:[["app-home-page"]],decls:34,vars:0,consts:[[1,"main-container"],["id","header"],["src","../../assets/University_at_Buffalo_logo.svg.png",1,"ub_logo"],[1,"header-left"],["src","../../assets/nsf_logo.png",1,"nsf_logo"],[1,"made_logo"],[1,"quick-intro"],[1,"left-image"],["src","../../assets/mlflow.PNG",1,"ml-image"],[1,"right-text"],[1,"text-title"],[1,"text-subtitle"],[1,"text-info"],[1,"links"],[1,"link-block","about"],[1,"link-block-text"],[1,"link-block-subtext"],[1,"link-block","faq-help"],[1,"link-block","portal",3,"click"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),Xr(2,"img",2),zr(3,"div",3),Xr(4,"img",4),zr(5,"p",5),ci(6," MaDE@UB Machine Learning Toolkit "),Lr(),Lr(),Lr(),zr(7,"div",6),zr(8,"div",7),Xr(9,"img",8),Lr(),zr(10,"div",9),zr(11,"div",10),ci(12," Machine Learning Toolkit "),Lr(),zr(13,"div",11),ci(14," Materials Data Engineering @ UB "),Lr(),zr(15,"div",12),ci(16," An easy-to-use GUI has been developed to reduce the time it takes to build prototypes for ML models as well as experiment with various feature extraction methods available. Further, plug-and-play-style interactions for the different blocks associated with a typical ML pipeline via a graphical representation with directed edges make the GUI intuitive to use and easy to learn. "),Lr(),Lr(),Lr(),zr(17,"div",13),zr(18,"div",14),zr(19,"div",15),ci(20," About "),Lr(),zr(21,"div",16),ci(22," About Made at Machine Learning Toolkit "),Lr(),Lr(),zr(23,"div",17),zr(24,"div",15),ci(25," FAQ/Help "),Lr(),zr(26,"div",16),ci(27," Get quick help regarding most frequent asked questions about toolkit. "),Lr(),Lr(),zr(28,"div",18),Vr("click",(function(){return t.sendToPortal()})),zr(29,"div",15),ci(30," Get Started "),Lr(),zr(31,"div",16),ci(32," Go ML Toolkit Portal "),Lr(),Lr(),Lr(),Xr(33,"app-global-footer"),Lr())},directives:[dm],styles:[".links[_ngcontent-%COMP%]{clear:both}.portal[_ngcontent-%COMP%]{display:inline-block;width:29.33333%;margin:2%;font-family:Roboto;height:200px;background-color:#fff;border:5px solid #217ce8!important;text-align:-webkit-center;padding:4% 1% 8%;color:#000}.link-block-text[_ngcontent-%COMP%]{font-size:1.4em;font-weight:800;text-align:center;background-color:#217ce8;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;text-align:-webkit-center;border-radius:32px;padding:1% 5%;margin-bottom:3%;color:#fff}.link-block[_ngcontent-%COMP%]{display:inline-block;width:28.33333%;margin:0 2% 2% 50px;font-family:Roboto;height:200px;background-color:#fff;border:1px solid #e2e2e2;text-align:-webkit-center;padding:4% 1% 8%;box-shadow:1px 3px 20px -4px #e2e2e2;cursor:pointer}.left-image[_ngcontent-%COMP%]{display:inline-block;float:left}.ml-image[_ngcontent-%COMP%]{width:80%;margin-left:10%}.right-text[_ngcontent-%COMP%]{display:inline-block;float:right;width:49%;padding:2%;margin:3%}.text-title[_ngcontent-%COMP%]{font-size:3em;font-family:Roboto;font-weight:500}.text-subtitle[_ngcontent-%COMP%]{font-size:1.5em;font-family:Roboto;font-weight:200}.text-info[_ngcontent-%COMP%]{font-family:Roboto;font-size:1.2em;margin-top:5%;padding-right:7%;text-align:justify}#header[_ngcontent-%COMP%]{padding:1% 2%!important;background-color:#fff!important;border-bottom:1px solid #e2e2e2!important;z-index:1000!important}.ub_logo[_ngcontent-%COMP%]{width:8%!important}.made_logo[_ngcontent-%COMP%], .ub_logo[_ngcontent-%COMP%]{display:inline-block!important}.made_logo[_ngcontent-%COMP%]{float:right!important;margin:0!important;font-family:Roboto!important;font-weight:800!important;font-size:1.3em!important;color:#393c44!important;width:108%!important;padding-left:5%!important;border-left:2px solid #d4d4d4!important}.nsf_logo[_ngcontent-%COMP%]{width:65px!important;position:absolute!important;top:-12px!important;left:-101px!important;padding-right:10px!important}.header-left[_ngcontent-%COMP%]{display:inline-block;float:right;position:relative}"]}),_m)},{path:"portal",component:vm}],bm=((gm=function e(){_classCallCheck(this,e)}).\u0275mod=ft({type:gm}),gm.\u0275inj=pe({factory:function(e){return new(e||gm)},imports:[[rf.forRoot(ym)],rf]}),gm),xm={name:"pandas",docstring:"",inputs:[],outputs:[],node_functions:[{name:"read_csv",docstring:"\nRead a comma-separated values (csv) file into DataFrame.",inputs:[{name:"filepath_or_buffer",docstring:"Choose a CSV file to upload.",param_type:["object","str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"sep",docstring:"Delimiter to use. Use \\s+ for whitespace",param_type:["str"],expected_shape:null,is_optional:!0,default_value:",",options:null},{name:"header",docstring:"Row number(s) to use as the column names, and the start of the data.  Default behavior is to infer the column names: if no names are passed the behavior is identical to ``header=0`` and column names are inferred from the first line of the file, if column names are passed explicitly then the behavior is identical to ``header=None``. Explicitly pass ``header=0`` to be able to replace existing names. The header can be a list of integers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if ``skip_blank_lines=True``, so ``header=0`` denotes the first line of data rather than the first line of the file.",param_type:["int","list"],expected_shape:null,is_optional:!0,default_value:"infer",options:null},{name:"names",docstring:"List of column names to use. If file contains no header row, then you should explicitly pass ``header=None``. Duplicates in this list are not allowed.",param_type:["array"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"index_col",docstring:"Column(s) to use as the row labels of the ``DataFrame``, either given as string name or column index. If a sequence of int / str is given, a MultiIndex is used.  Note: ``index_col=False`` can be used to force pandas to *not* use the first column as the index, e.g. when you have a malformed file with delimiters at the end of each line.",param_type:["int","str",null],expected_shape:null,is_optional:!0,default_value:"``None``",options:null},{name:"usecols",docstring:"Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in `names` or inferred from the document header row(s). For example, a valid list-like `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``. Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.",param_type:["list","callable"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"mangle_dupe_cols",docstring:"Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than 'X'...'X'. Passing in False will cause data to be overwritten if there are duplicate names in the columns.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"skiprows",docstring:"Line numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file. By default no rows are skipped",param_type:["int","list","callable"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"skipfooter",docstring:"Number of lines at bottom of file to skip (Unsupported with engine='c').",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"0",options:null},{name:"nrows",docstring:"Number of rows of file to read. Useful for reading pieces of large files.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"na_values",docstring:"Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values.  By default the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null'.",param_type:["str","dict","list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"keep_default_na",docstring:"Whether or not to include the default NaN values when parsing the data. Depending on whether `na_values` is passed in, the behavior is as follows:  * If `keep_default_na` is True, and `na_values` are specified, `na_values`   is appended to the default NaN values used for parsing. * If `keep_default_na` is True, and `na_values` are not specified, only   the default NaN values are used for parsing. * If `keep_default_na` is False, and `na_values` are specified, only   the NaN values specified `na_values` are used for parsing. * If `keep_default_na` is False, and `na_values` are not specified, no   strings will be parsed as NaN.  Note that if `na_filter` is passed in as False, the `keep_default_na` and `na_values` parameters will be ignored.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"na_filter",docstring:"Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"skip_blank_lines",docstring:"If True, skip over blank lines rather than interpreting as NaN values.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"compression",docstring:"For on-the-fly decompression of on-disk data. If 'infer' and `filepath_or_buffer` is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no decompression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to None for no decompression.  .. versionadded:: 0.18.1 support for 'zip' and 'xz' compression.",param_type:["LIST_VALID_OPTIONS",null],expected_shape:null,is_optional:!0,default_value:"infer",options:["infer","gzip","bz2","zip","xz","None"]},{name:"thousands",docstring:"Thousands separator.",param_type:["str"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"decimal",docstring:"Character to recognize as decimal point (e.g. use ',' for European data).",param_type:["str"],expected_shape:null,is_optional:!0,default_value:".",options:null},{name:"comment",docstring:"Indicates remainder of line should not be parsed. If found at the beginning of a line, the line will be ignored altogether. This parameter must be a single character. Like empty lines (as long as ``skip_blank_lines=True``), fully commented lines are ignored by the parameter `header` but not by `skiprows`. For example, if ``comment='#'``, parsing ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being treated as the header.",param_type:["str"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"data",docstring:"A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes.",param_type:["dataframe"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[],library:"pandas",module:null},wm={name:"chemml.datasets",docstring:"",inputs:[],outputs:[],node_functions:[{name:"load_cep_homo",docstring:"Load and return a small sample of HOMO energies of organic photovoltaic candidates from CEP database (regression).\n    Clean Energy Project (CEP) database is available at: https://cepdb.molecularspace.org\n    The unit of HOMO (highest occupied molecular orbitals) energies is electron Volt (eV).\n    The photovaltaic candidates are provided using SMILES representation.\n\n    =================   ==============\n    rows                           500\n    Columns                          2\n    headers             smiles,homo_eV\n    molecules rep.              SMILES\n    Features                         0\n    Returns               2 dataframes\n    =================   ==============\n\n    Returns\n    -------\n    smiles: pandas dataframe\n        The SMILES representation of molecules, shape: (500,1)\n\n    homo: pandas dataframe\n        The HOMO energies of the molecules (eV), shape: (500,1)\n\n    Examples\n    --------\n    >>> from chemml.datasets import load_cep_homo\n    >>> smi, homo  = load_cep_homo()\n    >>> print(list(smi.columns))\n    ['smiles']\n    >>> print(homo.shape)\n    (500, 1)\n    ",inputs:[],outputs:[{name:"smiles",docstring:"The SMILES representation of molecules, shape: (500,1)",param_type:["dataframe"],returned:!0},{name:"homo",docstring:"The HOMO energies of the molecules (eV), shape: (500,1)",param_type:["dataframe"],returned:!0}]},{name:"load_comp_energy",docstring:"Load and return composition entries and formation energies (eV).\n    From Magpie https://bitbucket.org/wolverton/magpie\n\n    =================   ======================\n    rows                                   630\n    header                    formation_energy\n    molecules rep.                 composition\n    Features                                 0\n    Returns             1 dataframe and 1 list\n    =================   ======================\n\n    Returns\n    -------\n    entries: list\n        The list of composition entries from CompositionEntry class.\n\n    energy: pandas dataframe\n        The formation energy for each composition.\n\n    Examples\n    --------\n    >>> from chemml.datasets import load_comp_energy\n    >>> entries, df = load_comp_energy()\n    >>> print(df.shape)\n    (630, 1)\n    ",inputs:[],outputs:[{name:"entries",docstring:"The list of composition entries from CompositionEntry class.",param_type:["list"],returned:!0},{name:"energy",docstring:"The formation energy for each composition.",param_type:["dataframe"],returned:!0}]},{name:"load_crystal_structures",docstring:"Load and return crystal structure entries.\n    From Magpie https://bitbucket.org/wolverton/magpie\n\n    =================   ======================\n    length                                  18\n    header                    formation_energy\n    molecules rep.                 composition\n    Features                                 0\n    Returns                             1 list\n    =================   ======================\n\n    Returns\n    -------\n    entries: list\n        The list of crystal structure entries from CrystalStructureEntry class.\n\n    Examples\n    --------\n    >>> from chemml.datasets import load_crystal_structures\n    >>> entries = load_crystal_structures()\n    >>> print(len(entries))\n    18\n    ",inputs:[],outputs:[{name:"entries",docstring:"The list of crystal structure entries from CrystalStructureEntry class.",param_type:["list"],returned:!0}]},{name:"load_organic_density",docstring:"Load and return 500 small organic molecules with their density and molecular descriptors.\n\n    =================   ======================\n    rows                                   500\n    Columns                                202\n    last twoo headers     smiles,density_Kg/m3\n    molecules rep.                      SMILES\n    Features                               200\n    Returns                       3 dataframes\n    =================   ======================\n\n    Returns\n    -------\n    smiles: pandas dataframe\n        The SMILES representation of molecules, shape: (500,1)\n\n    density: pandas dataframe\n        The density of molecules (Kg/m3), shape: (500,1)\n\n    features: pandas dataframe\n        The molecular descriptors of molecules, shape: (500,200)\n\n    Examples\n    --------\n    >>> from chemml.datasets import load_organic_density\n    >>> smi, density, features = load_organic_density()\n    >>> print(list(smi.columns))\n    ['smiles']\n    >>> print(features.shape)\n    (500, 200)\n    ",inputs:[],outputs:[{name:"smiles",docstring:"The SMILES representation of molecules, shape: (500,1)",param_type:["dataframe"],returned:!0},{name:"density",docstring:"The density of molecules (Kg/m3), shape: (500,1)",param_type:["dataframe"],returned:!0},{name:"features",docstring:"The molecular descriptors of molecules, shape: (500,200)",param_type:["dataframe"],returned:!0}]},{name:"load_xyz_polarizability",docstring:"Load and return xyz files and polarizability (Bohr^3).\n    The xyz coordinates of small organic molecules are optimized with BP86/def2svp level of theory.\n    Polarizability of the molecules are also calcualted in the same level of thoery.\n\n    =================   ======================\n    rows                                    50\n    Columns                                  1\n    header                      polarizability\n    molecules rep.                         xyz\n    Features                                 0\n    Returns             1 dataframe and 1 dict\n    =================   ======================\n\n    Returns\n    -------\n    molecules: list\n        The list of molecule objects with xyz coordinates.\n\n    pol: pandas dataframe\n        The polarizability of each molecule as a column of dataframe.\n\n    Examples\n    --------\n    >>> from chemml.datasets import load_xyz_polarizability\n    >>> molecules, polarizabilities = load_xyz_polarizability()\n    >>> print(len(molecules))\n    50\n    >>> print(polarizabilities.shape)\n    (50, 1)\n    ",inputs:[],outputs:[{name:"molecules",docstring:"The list of molecule objects with xyz coordinates.",param_type:["list"],returned:!0},{name:"pol",docstring:"The polarizability of each molecule as a column of dataframe.",param_type:["dataframe"],returned:!0}]}],nodes:[],library:"chemml",module:"datasets"},Cm={name:"sklearn.svm",docstring:"",inputs:[],outputs:[],node_functions:[{name:"l1_min_c",docstring:"\n    Return the lowest bound for C such that for C in (l1_min_C, infinity)\n    the model is guaranteed not to be empty. This applies to l1 penalized\n    classifiers, such as LinearSVC with penalty='l1' and\n    linear_model.LogisticRegression with penalty='l1'.\n\n    This value is valid if class_weight parameter in fit() is not set.\n\n    Parameters\n    ----------\n    X : array-like or sparse matrix, shape = [n_samples, n_features]\n        Training vector, where n_samples in the number of samples and\n        n_features is the number of features.\n\n    y : array, shape = [n_samples]\n        Target vector relative to X\n\n    loss : {'squared_hinge', 'log'}, default 'squared_hinge'\n        Specifies the loss function.\n        With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss).\n        With 'log' it is the loss of logistic regression models.\n\n    fit_intercept : bool, default: True\n        Specifies if the intercept should be fitted by the model.\n        It must match the fit() method parameter.\n\n    intercept_scaling : float, default: 1\n        when fit_intercept is True, instance vector x becomes\n        [x, intercept_scaling],\n        i.e. a \"synthetic\" feature with constant value equals to\n        intercept_scaling is appended to the instance vector.\n        It must match the fit() method parameter.\n\n    Returns\n    -------\n    l1_min_c : float\n        minimum value for C\n    ",inputs:[{name:"X",docstring:"Training vector, where n_samples in the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target vector relative to X",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null,options:null},{name:"loss",docstring:"Specifies the loss function. With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss). With 'log' it is the loss of logistic regression models.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"squared_hinge",options:["squared_hinge","log","default squared_hinge"]},{name:"fit_intercept",docstring:"Specifies if the intercept should be fitted by the model. It must match the fit() method parameter.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"intercept_scaling",docstring:'when fit_intercept is True, instance vector x becomes [x, intercept_scaling], i.e. a "synthetic" feature with constant value equals to intercept_scaling is appended to the instance vector. It must match the fit() method parameter.',param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"l1_min_c",docstring:"minimum value for C",param_type:["float"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[{name:"OneClassSVM",docstring:"Unsupervised Outlier Detection.\n\n    Estimate the support of a high-dimensional distribution",inputs:[{name:"kernel",docstring:"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"rbf",options:["linear","poly","rbf","sigmoid","precomputed"]},{name:"degree",docstring:"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"3",options:null},{name:"gamma",docstring:"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"auto",options:null},{name:"coef0",docstring:"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.0",options:null},{name:"tol",docstring:"Tolerance for stopping criterion.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"nu",docstring:"An upper bound on the fraction of training errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1]. By default 0.5 will be taken.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.5",options:null},{name:"shrinking",docstring:"Whether to use the shrinking heuristic.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"cache_size",docstring:"Specify the size of the kernel cache (in MB).",param_type:["float"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"verbose",docstring:"Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"max_iter",docstring:"Hard limit on iterations within solver, or -1 for no limit.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null}],outputs:[{name:"support_",docstring:"Indices of support vectors.",param_type:["array"],returned:!1},{name:"support_vectors_",docstring:"Support vectors.",param_type:["array"],returned:!1},{name:"dual_coef_",docstring:"Coefficients of the support vectors in the decision function.",param_type:["array"],returned:!1},{name:"coef_",docstring:"Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`",param_type:["array"],returned:!1},{name:"intercept_",docstring:"Constant in the decision function.",param_type:["array"],returned:!1},{name:"offset_",docstring:"Offset used to define the decision function from the raw scores. We have the relation: decision_function = score_samples - `offset_`. The offset is the opposite of `intercept_` and is provided for consistency with other outlier detection algorithms.",param_type:["float"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_compute_kernel",docstring:"Return the data transformed by a callable kernel",inputs:[],outputs:[]},{name:"_decision_function",docstring:"Evaluates the decision function for the samples in X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n\n        Returns\n        -------\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\n            Returns the decision function of the sample for each class\n            in the model.\n        ",inputs:[{name:"X",docstring:"",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null}],outputs:[{name:"X",docstring:"Returns the decision function of the sample for each class in the model.",param_type:["array"],returned:!0}]},{name:"_dense_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_dense_fit",docstring:"None",inputs:[],outputs:[]},{name:"_dense_predict",docstring:"None",inputs:[],outputs:[]},{name:"_get_coef",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_fit",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_predict",docstring:"None",inputs:[],outputs:[]},{name:"_validate_for_predict",docstring:"None",inputs:[],outputs:[]},{name:"_validate_targets",docstring:"Validation of y and class_weight.\n\n        Default implementation for SVR and one-class; overridden in BaseSVC.\n        ",inputs:[],outputs:[]},{name:"_warn_from_fit_status",docstring:"None",inputs:[],outputs:[]},{name:"decision_function",docstring:"Signed distance to the separating hyperplane.\n\n        Signed distance is positive for an inlier and negative for an outlier.",inputs:[{name:"X",docstring:"Data.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"dec",docstring:"Returns the decision function of the samples.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit",docstring:"\n        Detects the soft boundary of the set of samples X.",inputs:[{name:"X",docstring:"Set of samples, where n_samples is the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"sample_weight",docstring:"Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.",param_type:["array"],expected_shape:"(n_samples,)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"not used, present for API consistency by convention.",param_type:[null],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_predict",docstring:"Performs fit on X and returns labels for X.\n\n        Returns -1 for outliers and 1 for inliers.",inputs:[{name:"X",docstring:"Input data.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"not used, present for API consistency by convention.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"y",docstring:"1 for inliers, -1 for outliers.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"predict",docstring:"\n        Perform classification on samples in X.\n\n        For a one-class model, +1 or -1 is returned.",inputs:[{name:"X",docstring:'For kernel="precomputed", the expected shape of X is [n_samples_test, n_samples_train]',param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"y_pred",docstring:"Class labels for samples in X.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"score_samples",docstring:"Raw scoring function of the samples.",inputs:[{name:"X",docstring:"",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"score_samples",docstring:"Returns the (unshifted) scoring function of the samples.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"SVC",docstring:"C-Support Vector Classification.\n\n    The implementation is based on libsvm. The fit time scales at least\n    quadratically with the number of samples and may be impractical\n    beyond tens of thousands of samples.\n\n    The multiclass support is handled according to a one-vs-one scheme.\n\n    For details on the precise mathematical formulation of the provided\n    kernel functions and how `gamma`, `coef0` and `degree` affect each\n    other, see the corresponding section in the narrative documentation:\n    :ref:`svm_kernels`.",inputs:[{name:"C",docstring:"Penalty parameter C of the error term.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1.0",options:null},{name:"kernel",docstring:"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape ``(n_samples, n_samples)``.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"rbf",options:["linear","poly","rbf","sigmoid","precomputed"]},{name:"degree",docstring:"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"3",options:null},{name:"gamma",docstring:"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.",param_type:["float","str"],expected_shape:null,is_optional:!0,default_value:"auto",options:null},{name:"coef0",docstring:"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.0",options:null},{name:"shrinking",docstring:"Whether to use the shrinking heuristic.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"probability",docstring:"Whether to enable probability estimates. This must be enabled prior to calling `fit`, and will slow down that method.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"tol",docstring:"Tolerance for stopping criterion.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1e-3",options:null},{name:"class_weight",docstring:'Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``',param_type:["str","dict"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"verbose",docstring:"Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"max_iter",docstring:"Hard limit on iterations within solver, or -1 for no limit.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null},{name:"decision_function_shape",docstring:"Whether to return a one-vs-rest ('ovr') decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one ('ovo') decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one ('ovo') is always used as multi-class strategy.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"ovr",options:["ovr","ovo"]}],outputs:[{name:"support_",docstring:"Indices of support vectors.",param_type:["array"],returned:!1},{name:"support_vectors_",docstring:"Support vectors.",param_type:["array"],returned:!1},{name:"n_support_",docstring:"Number of support vectors for each class.",param_type:["array"],returned:!1},{name:"dual_coef_",docstring:"Coefficients of the support vector in the decision function. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial.",param_type:["array"],returned:!1},{name:"coef_",docstring:"Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is a readonly property derived from `dual_coef_` and `support_vectors_`.",param_type:["array"],returned:!1},{name:"intercept_",docstring:"Constants in decision function.",param_type:["array"],returned:!1},{name:"fit_status_",docstring:"0 if correctly fitted, 1 otherwise (will raise warning)",param_type:["int"],returned:!1},{name:"probA_",docstring:"",param_type:["array"],returned:!1},{name:"probB_",docstring:"If probability=True, the parameters learned in Platt scaling to produce probability estimates from decision values. If probability=False, an empty array. Platt scaling uses the logistic function ``1 / (1 + exp(decision_value * probA_ + probB_))`` where ``probA_`` and ``probB_`` are learned from the dataset.",param_type:["array"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_check_proba",docstring:"None",inputs:[],outputs:[]},{name:"_compute_kernel",docstring:"Return the data transformed by a callable kernel",inputs:[],outputs:[]},{name:"_decision_function",docstring:"Evaluates the decision function for the samples in X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n\n        Returns\n        -------\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\n            Returns the decision function of the sample for each class\n            in the model.\n        ",inputs:[{name:"X",docstring:"",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null}],outputs:[{name:"X",docstring:"Returns the decision function of the sample for each class in the model.",param_type:["array"],returned:!0}]},{name:"_dense_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_dense_fit",docstring:"None",inputs:[],outputs:[]},{name:"_dense_predict",docstring:"None",inputs:[],outputs:[]},{name:"_dense_predict_proba",docstring:"None",inputs:[],outputs:[]},{name:"_get_coef",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_predict_log_proba",docstring:"None",inputs:[],outputs:[]},{name:"_predict_proba",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_fit",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_predict",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_predict_proba",docstring:"None",inputs:[],outputs:[]},{name:"_validate_for_predict",docstring:"None",inputs:[],outputs:[]},{name:"_validate_targets",docstring:"None",inputs:[],outputs:[]},{name:"_warn_from_fit_status",docstring:"None",inputs:[],outputs:[]},{name:"decision_function",docstring:"Evaluates the decision function for the samples in X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n\n        Returns\n        -------\n        X : array-like, shape (n_samples, n_classes * (n_classes-1) / 2)\n            Returns the decision function of the sample for each class\n            in the model.\n            If decision_function_shape='ovr', the shape is (n_samples,\n            n_classes).\n\n        Notes\n        -----\n        If decision_function_shape='ovo', the function values are proportional\n        to the distance of the samples X to the separating hyperplane. If the\n        exact distances are required, divide the function values by the norm of\n        the weight vector (``coef_``). See also `this question\n        <https://stats.stackexchange.com/questions/14876/\n        interpreting-distance-from-hyperplane-in-svm>`_ for further details.\n        If decision_function_shape='ovr', the decision function is a monotonic\n        transformation of ovo decision function.\n        ",inputs:[{name:"X",docstring:"Data.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X",docstring:"Returns the decision function of the sample for each class in the model. If decision_function_shape='ovr', the shape is (n_samples, n_classes), (n_samples, n_classes * (n_classes-1) / 2) otherwise",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit",docstring:"Fit the SVM model according to the given training data.",inputs:[{name:"X",docstring:'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel="precomputed", the expected shape of X is (n_samples, n_samples).',param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values (class labels in classification, real numbers in regression)",param_type:["array"],expected_shape:"(n_samples,)",is_optional:!1,default_value:null,options:null},{name:"sample_weight",docstring:"Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.",param_type:["array"],expected_shape:"(n_samples,)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"predict",docstring:"Perform classification on samples in X.\n\n        For an one-class model, +1 or -1 is returned.",inputs:[{name:"X",docstring:'For kernel="precomputed", the expected shape of X is [n_samples_test, n_samples_train]',param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"y_pred",docstring:"Class labels for samples in X.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"score",docstring:"Returns the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.",inputs:[{name:"X",docstring:"Test samples.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"True labels for X.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null,options:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"[n_samples], optional",is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"score",docstring:"Mean accuracy of self.predict(X) wrt. y.",param_type:["float"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"SVR",docstring:"Epsilon-Support Vector Regression.\n\n    The free parameters in the model are C and epsilon.\n\n    The implementation is based on libsvm. The fit time complexity\n    is more than quadratic with the number of samples which makes it hard\n    to scale to datasets with more than a couple of 10000 samples. ",inputs:[{name:"kernel",docstring:"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"rbf",options:["linear","poly","rbf","sigmoid","precomputed"]},{name:"degree",docstring:"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"3",options:null},{name:"gamma",docstring:"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma. ",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"auto",options:null},{name:"coef0",docstring:"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.0",options:null},{name:"tol",docstring:"Tolerance for stopping criterion.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1e-3",options:null},{name:"C",docstring:"Penalty parameter C of the error term.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1.0",options:null},{name:"epsilon",docstring:"Epsilon in the epsilon-SVR model. It specifies the epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.1",options:null},{name:"shrinking",docstring:"Whether to use the shrinking heuristic.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"cache_size",docstring:"Specify the size of the kernel cache (in MB).",param_type:["float"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"verbose",docstring:"Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"max_iter",docstring:"Hard limit on iterations within solver, or -1 for no limit.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null}],outputs:[{name:"support_",docstring:"Indices of support vectors.",param_type:["array"],returned:!1},{name:"support_vectors_",docstring:"Support vectors.",param_type:["array"],returned:!1},{name:"dual_coef_",docstring:"Coefficients of the support vector in the decision function.",param_type:["array"],returned:!1},{name:"coef_",docstring:"Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`.",param_type:["array"],returned:!1},{name:"intercept_",docstring:"Constants in decision function.",param_type:["array"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_compute_kernel",docstring:"Return the data transformed by a callable kernel",inputs:[],outputs:[]},{name:"_decision_function",docstring:"Evaluates the decision function for the samples in X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n\n        Returns\n        -------\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\n            Returns the decision function of the sample for each class\n            in the model.\n        ",inputs:[{name:"X",docstring:"",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null}],outputs:[{name:"X",docstring:"Returns the decision function of the sample for each class in the model.",param_type:["array"],returned:!0}]},{name:"_dense_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_dense_fit",docstring:"None",inputs:[],outputs:[]},{name:"_dense_predict",docstring:"None",inputs:[],outputs:[]},{name:"_get_coef",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_decision_function",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_fit",docstring:"None",inputs:[],outputs:[]},{name:"_sparse_predict",docstring:"None",inputs:[],outputs:[]},{name:"_validate_for_predict",docstring:"None",inputs:[],outputs:[]},{name:"_validate_targets",docstring:"Validation of y and class_weight.\n\n        Default implementation for SVR and one-class; overridden in BaseSVC.\n        ",inputs:[],outputs:[]},{name:"_warn_from_fit_status",docstring:"None",inputs:[],outputs:[]},{name:"fit",docstring:"Fit the SVM model according to the given training data.",inputs:[{name:"X",docstring:'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel="precomputed", the expected shape of X is (n_samples, n_samples).',param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values (class labels in classification, real numbers in regression)",param_type:["array"],expected_shape:"(n_samples,)",is_optional:!1,default_value:null,options:null},{name:"sample_weight",docstring:"Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.",param_type:["array"],expected_shape:"(n_samples,)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"predict",docstring:"Perform regression on samples in X.\n\n        For an one-class model, +1 (inlier) or -1 (outlier) is returned.",inputs:[{name:"X",docstring:'For kernel="precomputed", the expected shape of X is (n_samples_test, n_samples_train).',param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"y_pred",docstring:"",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"score",docstring:"Returns the coefficient of determination R^2 of the prediction.\n\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always\n        predicts the expected value of y, disregarding the input features,\n        would get a R^2 score of 0.0.",inputs:[{name:"X",docstring:"Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"True values for X.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null,options:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"[n_samples], optional",is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"score",docstring:"R^2 of self.predict(X) wrt. y.",param_type:["float"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]}],library:"sklearn",module:"svm"},km={name:"sklearn.linear_model",outputs:[],docstring:"",inputs:[],module:"linear_model",node_functions:[{name:"enet_path",outputs:[{name:"alphas",returned:!0,param_type:["array"],docstring:"The alphas along the path where models are computed."},{name:"coefs",returned:!0,param_type:["array"],docstring:"Coefficients along the path."},{name:"dual_gaps",returned:!0,param_type:["array"],docstring:"The dual gaps at the end of the optimization for each alpha."},{name:"n_iters",returned:!0,param_type:["array"],docstring:"The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha. (Is returned when ``return_n_iter`` is set to True)."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Compute elastic net path with coordinate descent\n\n    The elastic net optimization function varies for mono and multi-outputs.\n\n    For mono-output tasks it is::\n\n        1 / (2 * n_samples) * ||y - Xw||^2_2\n        + alpha * l1_ratio * ||w||_1\n        + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\n    For multi-output tasks it is::\n\n        (1 / (2 * n_samples)) * ||Y - XW||^Fro_2\n        + alpha * l1_ratio * ||W||_21\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n\n    Where::\n\n        ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\n    i.e. the sum of norm of each row.\n\n    Read more in the :ref:`User Guide <elastic_net>`.\n\n    Parameters\n    ----------\n    X : {array-like}, shape (n_samples, n_features)\n        Training data. Pass directly as Fortran-contiguous data to avoid\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\n        can be sparse.\n\n    y : ndarray, shape (n_samples,) or (n_samples, n_outputs)\n        Target values\n\n    l1_ratio : float, optional\n        float between 0 and 1 passed to elastic net (scaling between\n        l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso\n\n    eps : float\n        Length of the path. ``eps=1e-3`` means that\n        ``alpha_min / alpha_max = 1e-3``\n\n    n_alphas : int, optional\n        Number of alphas along the regularization path\n\n    alphas : ndarray, optional\n        List of alphas where to compute the models.\n        If None alphas are set automatically\n\n    precompute : True | False | 'auto' | array-like\n        Whether to use a precomputed Gram matrix to speed up\n        calculations. If set to ``'auto'`` let us decide. The Gram\n        matrix can also be passed as argument.\n\n    Xy : array-like, optional\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\n        only when the Gram matrix is precomputed.\n\n    copy_X : boolean, optional, default True\n        If ``True``, X will be copied; else, it may be overwritten.\n\n    coef_init : array, shape (n_features, ) | None\n        The initial values of the coefficients.\n\n    verbose : bool or integer\n        Amount of verbosity.\n\n    return_n_iter : bool\n        whether to return the number of iterations or not.\n\n    positive : bool, default False\n        If set to True, forces coefficients to be positive.\n        (Only allowed when ``y.ndim == 1``).\n\n    check_input : bool, default True\n        Skip input validation checks, including the Gram matrix when provided\n        assuming there are handled by the caller when check_input=False.\n\n    **params : kwargs\n        keyword arguments passed to the coordinate descent solver.\n\n    Returns\n    -------\n    alphas : array, shape (n_alphas,)\n        The alphas along the path where models are computed.\n\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\n        Coefficients along the path.\n\n    dual_gaps : array, shape (n_alphas,)\n        The dual gaps at the end of the optimization for each alpha.\n\n    n_iters : array-like, shape (n_alphas,)\n        The number of iterations taken by the coordinate descent optimizer to\n        reach the specified tolerance for each alpha.\n        (Is returned when ``return_n_iter`` is set to True).\n\n    Notes\n    -----\n    For an example, see\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\n\n    See also\n    --------\n    MultiTaskElasticNet\n    MultiTaskElasticNetCV\n    ElasticNet\n    ElasticNetCV\n    ",inputs:[{name:"X",default_value:null,param_type:["LIST_VALID_OPTIONS","array"],expected_shape:"(n_samples, n_features)",docstring:"Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.",is_optional:!1,options:["array-like}"," shape (n_samples"," n_features)"]},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_outputs)",docstring:"Target values",is_optional:!1,options:null},{name:"l1_ratio",default_value:null,param_type:["float"],expected_shape:null,docstring:"float between 0 and 1 passed to elastic net (scaling between l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso",is_optional:!0,options:null},{name:"eps",default_value:null,param_type:["float"],expected_shape:null,docstring:"Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``",is_optional:!1,options:null},{name:"n_alphas",default_value:null,param_type:["int"],expected_shape:null,docstring:"Number of alphas along the regularization path",is_optional:!0,options:null},{name:"alphas",default_value:null,param_type:["array"],expected_shape:null,docstring:"List of alphas where to compute the models. If None alphas are set automatically",is_optional:!0,options:null},{name:"precompute",default_value:null,param_type:["LIST_VALID_OPTIONS","array"],expected_shape:null,docstring:"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.",is_optional:!1,options:["True "," False "," 'auto' "," array-like"]},{name:"Xy",default_value:null,param_type:["array"],expected_shape:null,docstring:"Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``True``, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"coef_init",default_value:null,param_type:["LIST_VALID_OPTIONS","array",null],expected_shape:"(n_features, ) | None",docstring:"The initial values of the coefficients.",is_optional:!1,options:["array, shape (n_features, ) "," None"]},{name:"verbose",default_value:null,param_type:["int","bool"],expected_shape:null,docstring:"Amount of verbosity.",is_optional:!1,options:null},{name:"return_n_iter",default_value:null,param_type:["bool"],expected_shape:null,docstring:"whether to return the number of iterations or not.",is_optional:!1,options:null},{name:"positive",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).",is_optional:!0,options:null},{name:"check_input",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"Skip input validation checks, including the Gram matrix when provided assuming there are handled by the caller when check_input=False.",is_optional:!0,options:null},{name:"**params",default_value:null,param_type:[null],expected_shape:null,docstring:"keyword arguments passed to the coordinate descent solver.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"lars_path",outputs:[{name:"alphas",returned:!0,param_type:["array"],docstring:"Maximum of covariances (in absolute value) at each iteration. ``n_alphas`` is either ``max_iter``, ``n_features`` or the number of nodes in the path with ``alpha >= alpha_min``, whichever is smaller."},{name:"active",returned:!0,param_type:["array"],docstring:"Indices of active variables at the end of the path."},{name:"coefs",returned:!0,param_type:["array"],docstring:"Coefficients along the path"},{name:"n_iter",returned:!0,param_type:["int"],docstring:"Number of iterations run. Returned only if return_n_iter is set to True."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Compute Least Angle Regression or Lasso path using LARS algorithm [1]\n\n    The optimization objective for the case method='lasso' is::\n\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\n    in the case of method='lars', the objective function is only known in\n    the form of an implicit equation (see discussion in [1])\n\n    Read more in the :ref:`User Guide <least_angle_regression>`.\n\n    Parameters\n    -----------\n    X : array, shape: (n_samples, n_features)\n        Input data.\n\n    y : array, shape: (n_samples)\n        Input targets.\n\n    Xy : array-like, shape (n_samples,) or (n_samples, n_targets),             optional\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\n        only when the Gram matrix is precomputed.\n\n    Gram : None, 'auto', array, shape: (n_features, n_features), optional\n        Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram\n        matrix is precomputed from the given X, if there are more samples\n        than features.\n\n    max_iter : integer, optional (default=500)\n        Maximum number of iterations to perform, set to infinity for no limit.\n\n    alpha_min : float, optional (default=0)\n        Minimum correlation along the path. It corresponds to the\n        regularization parameter alpha parameter in the Lasso.\n\n    method : {'lar', 'lasso'}, optional (default='lar')\n        Specifies the returned model. Select ``'lar'`` for Least Angle\n        Regression, ``'lasso'`` for the Lasso.\n\n    copy_X : bool, optional (default=True)\n        If ``False``, ``X`` is overwritten.\n\n    eps : float, optional (default=``np.finfo(np.float).eps``)\n        The machine-precision regularization in the computation of the\n        Cholesky diagonal factors. Increase this for very ill-conditioned\n        systems.\n\n    copy_Gram : bool, optional (default=True)\n        If ``False``, ``Gram`` is overwritten.\n\n    verbose : int (default=0)\n        Controls output verbosity.\n\n    return_path : bool, optional (default=True)\n        If ``return_path==True`` returns the entire path, else returns only the\n        last point of the path.\n\n    return_n_iter : bool, optional (default=False)\n        Whether to return the number of iterations.\n\n    positive : boolean (default=False)\n        Restrict coefficients to be >= 0.\n        This option is only allowed with method 'lasso'. Note that the model\n        coefficients will not converge to the ordinary-least-squares solution\n        for small values of alpha. Only coefficients up to the smallest alpha\n        value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by\n        the stepwise Lars-Lasso algorithm are typically in congruence with the\n        solution of the coordinate descent lasso_path function.\n\n    Returns\n    --------\n    alphas : array, shape: [n_alphas + 1]\n        Maximum of covariances (in absolute value) at each iteration.\n        ``n_alphas`` is either ``max_iter``, ``n_features`` or the\n        number of nodes in the path with ``alpha >= alpha_min``, whichever\n        is smaller.\n\n    active : array, shape [n_alphas]\n        Indices of active variables at the end of the path.\n\n    coefs : array, shape (n_features, n_alphas + 1)\n        Coefficients along the path\n\n    n_iter : int\n        Number of iterations run. Returned only if return_n_iter is set\n        to True.\n\n    See also\n    --------\n    lasso_path\n    LassoLars\n    Lars\n    LassoLarsCV\n    LarsCV\n    sklearn.decomposition.sparse_encode\n\n    References\n    ----------\n    .. [1] \"Least Angle Regression\", Effron et al.\n           http://statweb.stanford.edu/~tibs/ftp/lars.pdf\n\n    .. [2] `Wikipedia entry on the Least-angle regression\n           <https://en.wikipedia.org/wiki/Least-angle_regression>`_\n\n    .. [3] `Wikipedia entry on the Lasso\n           <https://en.wikipedia.org/wiki/Lasso_(statistics)>`_\n\n    ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:": (n_samples, n_features)",docstring:"Input data.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:": (n_samples)",docstring:"Input targets.",is_optional:!1,options:null},{name:"Xy",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_targets),             optional",docstring:"Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.",is_optional:!0,options:null},{name:"Gram",default_value:null,param_type:["array",null],expected_shape:": (n_features, n_features), optional",docstring:"Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram matrix is precomputed from the given X, if there are more samples than features.",is_optional:!0,options:null},{name:"max_iter",default_value:"500",param_type:["int"],expected_shape:null,docstring:"Maximum number of iterations to perform, set to infinity for no limit.",is_optional:!0,options:null},{name:"alpha_min",default_value:"0",param_type:["float"],expected_shape:null,docstring:"Minimum correlation along the path. It corresponds to the regularization parameter alpha parameter in the Lasso.",is_optional:!0,options:null},{name:"method",default_value:"lar",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Specifies the returned model. Select ``'lar'`` for Least Angle Regression, ``'lasso'`` for the Lasso.",is_optional:!0,options:["lar"," 'lasso'}"," optional (default='lar')"]},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``False``, ``X`` is overwritten.",is_optional:!0,options:null},{name:"eps",default_value:"``np.finfonp.float.eps``",param_type:["float"],expected_shape:null,docstring:"The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems.",is_optional:!0,options:null},{name:"copy_Gram",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``False``, ``Gram`` is overwritten.",is_optional:!0,options:null},{name:"verbose",default_value:"0",param_type:["int"],expected_shape:null,docstring:"Controls output verbosity.",is_optional:!0,options:null},{name:"return_path",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``return_path==True`` returns the entire path, else returns only the last point of the path.",is_optional:!0,options:null},{name:"return_n_iter",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"Whether to return the number of iterations.",is_optional:!0,options:null},{name:"positive",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"Restrict coefficients to be >= 0. This option is only allowed with method 'lasso'. Note that the model coefficients will not converge to the ordinary-least-squares solution for small values of alpha. Only coefficients up to the smallest alpha value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso algorithm are typically in congruence with the solution of the coordinate descent lasso_path function.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"lasso_path",outputs:[{name:"alphas",returned:!0,param_type:["array"],docstring:"The alphas along the path where models are computed."},{name:"coefs",returned:!0,param_type:["array"],docstring:"Coefficients along the path."},{name:"dual_gaps",returned:!0,param_type:["array"],docstring:"The dual gaps at the end of the optimization for each alpha."},{name:"n_iters",returned:!0,param_type:["array"],docstring:"The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Compute Lasso path with coordinate descent\n\n    The Lasso optimization function varies for mono and multi-outputs.\n\n    For mono-output tasks it is::\n\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\n    For multi-output tasks it is::\n\n        (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\n\n    Where::\n\n        ||W||_21 = \\sum_i \\sqrt{\\sum_j w_{ij}^2}\n\n    i.e. the sum of norm of each row.\n\n    Read more in the :ref:`User Guide <lasso>`.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}, shape (n_samples, n_features)\n        Training data. Pass directly as Fortran-contiguous data to avoid\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\n        can be sparse.\n\n    y : ndarray, shape (n_samples,), or (n_samples, n_outputs)\n        Target values\n\n    eps : float, optional\n        Length of the path. ``eps=1e-3`` means that\n        ``alpha_min / alpha_max = 1e-3``\n\n    n_alphas : int, optional\n        Number of alphas along the regularization path\n\n    alphas : ndarray, optional\n        List of alphas where to compute the models.\n        If ``None`` alphas are set automatically\n\n    precompute : True | False | 'auto' | array-like\n        Whether to use a precomputed Gram matrix to speed up\n        calculations. If set to ``'auto'`` let us decide. The Gram\n        matrix can also be passed as argument.\n\n    Xy : array-like, optional\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\n        only when the Gram matrix is precomputed.\n\n    copy_X : boolean, optional, default True\n        If ``True``, X will be copied; else, it may be overwritten.\n\n    coef_init : array, shape (n_features, ) | None\n        The initial values of the coefficients.\n\n    verbose : bool or integer\n        Amount of verbosity.\n\n    return_n_iter : bool\n        whether to return the number of iterations or not.\n\n    positive : bool, default False\n        If set to True, forces coefficients to be positive.\n        (Only allowed when ``y.ndim == 1``).\n\n    **params : kwargs\n        keyword arguments passed to the coordinate descent solver.\n\n    Returns\n    -------\n    alphas : array, shape (n_alphas,)\n        The alphas along the path where models are computed.\n\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\n        Coefficients along the path.\n\n    dual_gaps : array, shape (n_alphas,)\n        The dual gaps at the end of the optimization for each alpha.\n\n    n_iters : array-like, shape (n_alphas,)\n        The number of iterations taken by the coordinate descent optimizer to\n        reach the specified tolerance for each alpha.\n\n    Notes\n    -----\n    For an example, see\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\n\n    To avoid unnecessary memory duplication the X argument of the fit method\n    should be directly passed as a Fortran-contiguous numpy array.\n\n    Note that in certain cases, the Lars solver may be significantly\n    faster to implement this functionality. In particular, linear\n    interpolation can be used to retrieve model coefficients between the\n    values output by lars_path\n\n    Examples\n    ---------\n\n    Comparing lasso_path and lars_path with interpolation:\n\n    >>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\n    >>> y = np.array([1, 2, 3.1])\n    >>> # Use lasso_path to compute a coefficient path\n    >>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\n    >>> print(coef_path)\n    [[0.         0.         0.46874778]\n     [0.2159048  0.4425765  0.23689075]]\n\n    >>> # Now use lars_path and 1D linear interpolation to compute the\n    >>> # same path\n    >>> from sklearn.linear_model import lars_path\n    >>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\n    >>> from scipy import interpolate\n    >>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\n    ...                                             coef_path_lars[:, ::-1])\n    >>> print(coef_path_continuous([5., 1., .5]))\n    [[0.         0.         0.46915237]\n     [0.2159048  0.4425765  0.23668876]]\n\n\n    See also\n    --------\n    lars_path\n    Lasso\n    LassoLars\n    LassoCV\n    LassoLarsCV\n    sklearn.decomposition.sparse_encode\n    ",inputs:[{name:"X",default_value:null,param_type:["LIST_VALID_OPTIONS","array"],expected_shape:"(n_samples, n_features)",docstring:"Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.",is_optional:!1,options:["array-like"," sparse matrix}"," shape (n_samples"," n_features)"]},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,), or (n_samples, n_outputs)",docstring:"Target values",is_optional:!1,options:null},{name:"eps",default_value:null,param_type:["float"],expected_shape:null,docstring:"Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``",is_optional:!0,options:null},{name:"n_alphas",default_value:null,param_type:["int"],expected_shape:null,docstring:"Number of alphas along the regularization path",is_optional:!0,options:null},{name:"alphas",default_value:null,param_type:["array"],expected_shape:null,docstring:"List of alphas where to compute the models. If ``None`` alphas are set automatically",is_optional:!0,options:null},{name:"precompute",default_value:null,param_type:["LIST_VALID_OPTIONS","array"],expected_shape:null,docstring:"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.",is_optional:!1,options:["True "," False "," 'auto' "," array-like"]},{name:"Xy",default_value:null,param_type:["array"],expected_shape:null,docstring:"Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``True``, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"coef_init",default_value:null,param_type:["LIST_VALID_OPTIONS","array",null],expected_shape:"(n_features, ) | None",docstring:"The initial values of the coefficients.",is_optional:!1,options:["array, shape (n_features, ) "," None"]},{name:"verbose",default_value:null,param_type:["int","bool"],expected_shape:null,docstring:"Amount of verbosity.",is_optional:!1,options:null},{name:"return_n_iter",default_value:null,param_type:["bool"],expected_shape:null,docstring:"whether to return the number of iterations or not.",is_optional:!1,options:null},{name:"positive",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).",is_optional:!0,options:null},{name:"**params",default_value:null,param_type:[null],expected_shape:null,docstring:"keyword arguments passed to the coordinate descent solver.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"lasso_stability_path",outputs:[{name:"alphas_grid",returned:!0,param_type:["array"],docstring:"The grid points between 0 and 1: alpha/alpha_max  scores_path : array, shape = [n_features, n_grid]     The scores for each feature along the path."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"DEPRECATED: The function lasso_stability_path is deprecated in 0.19 and will be removed in 0.21.\n\nStability path based on randomized Lasso estimates\n\n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        training data.\n\n    y : array-like, shape = [n_samples]\n        target values.\n\n    scaling : float, optional, default=0.5\n        The alpha parameter in the stability selection article used to\n        randomly scale the features. Should be between 0 and 1.\n\n    random_state : int, RandomState instance or None, optional, default=None\n        The generator used to randomize the design.  If int, random_state is\n        the seed used by the random number generator; If RandomState instance,\n        random_state is the random number generator; If None, the random number\n        generator is the RandomState instance used by `np.random`.\n\n    n_resampling : int, optional, default=200\n        Number of randomized models.\n\n    n_grid : int, optional, default=100\n        Number of grid points. The path is linearly reinterpolated\n        on a grid between 0 and 1 before computing the scores.\n\n    sample_fraction : float, optional, default=0.75\n        The fraction of samples to be used in each randomized design.\n        Should be between 0 and 1. If 1, all samples are used.\n\n    eps : float, optional\n        Smallest value of alpha / alpha_max considered\n\n    n_jobs : int or None, optional (default=None)\n        Number of CPUs to use during the resampling.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    verbose : boolean or integer, optional\n        Sets the verbosity amount\n\n    Returns\n    -------\n    alphas_grid : array, shape ~ [n_grid]\n        The grid points between 0 and 1: alpha/alpha_max\n\n    scores_path : array, shape = [n_features, n_grid]\n        The scores for each feature along the path.\n    ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"[n_samples, n_features]",docstring:"training data.  y : array-like, shape = [n_samples]     target values.  scaling : float, optional, default=0.5     The alpha parameter in the stability selection article used to     randomly scale the features. Should be between 0 and 1.  random_state : int, RandomState instance or None, optional, default=None     The generator used to randomize the design.  If int, random_state is     the seed used by the random number generator; If RandomState instance,     random_state is the random number generator; If None, the random number     generator is the RandomState instance used by `np.random`.  n_resampling : int, optional, default=200     Number of randomized models.  n_grid : int, optional, default=100     Number of grid points. The path is linearly reinterpolated     on a grid between 0 and 1 before computing the scores.  sample_fraction : float, optional, default=0.75     The fraction of samples to be used in each randomized design.     Should be between 0 and 1. If 1, all samples are used.  eps : float, optional     Smallest value of alpha / alpha_max considered  n_jobs : int or None, optional (default=None)     Number of CPUs to use during the resampling.     ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.     ``-1`` means using all processors. See :term:`Glossary <n_jobs>`     for more details.  verbose : boolean or integer, optional     Sets the verbosity amount",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"logistic_regression_path",outputs:[{name:"coefs",returned:!0,param_type:["array"],docstring:"List of coefficients for the Logistic Regression model. If fit_intercept is set to True then the second dimension will be n_features + 1, where the last item represents the intercept. For ``multiclass='multinomial'``, the shape is (n_classes, n_cs, n_features) or (n_classes, n_cs, n_features + 1)."},{name:"Cs",returned:!0,param_type:["array"],docstring:"Grid of Cs used for cross-validation."},{name:"n_iter",returned:!0,param_type:["array"],docstring:"Actual number of iteration for each Cs."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Compute a Logistic Regression model for a list of regularization\n    parameters.\n\n    This is an implementation that uses the result of the previous model\n    to speed up computations along the set of solutions, making it faster\n    than sequentially calling LogisticRegression for the different parameters.\n    Note that there will be no speedup with liblinear solver, since it does\n    not handle warm-starting.\n\n    Read more in the :ref:`User Guide <logistic_regression>`.\n\n    Parameters\n    ----------\n    X : array-like or sparse matrix, shape (n_samples, n_features)\n        Input data.\n\n    y : array-like, shape (n_samples,) or (n_samples, n_targets)\n        Input data, target values.\n\n    pos_class : int, None\n        The class with respect to which we perform a one-vs-all fit.\n        If None, then it is assumed that the given problem is binary.\n\n    Cs : int | array-like, shape (n_cs,)\n        List of values for the regularization parameter or integer specifying\n        the number of regularization parameters that should be used. In this\n        case, the parameters will be chosen in a logarithmic scale between\n        1e-4 and 1e4.\n\n    fit_intercept : bool\n        Whether to fit an intercept for the model. In this case the shape of\n        the returned array is (n_cs, n_features + 1).\n\n    max_iter : int\n        Maximum number of iterations for the solver.\n\n    tol : float\n        Stopping criterion. For the newton-cg and lbfgs solvers, the iteration\n        will stop when ``max{|g_i | i = 1, ..., n} <= tol``\n        where ``g_i`` is the i-th component of the gradient.\n\n    verbose : int\n        For the liblinear and lbfgs solvers set verbose to any positive\n        number for verbosity.\n\n    solver : {'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}\n        Numerical solver to use.\n\n    coef : array-like, shape (n_features,), default None\n        Initialization value for coefficients of logistic regression.\n        Useless for liblinear solver.\n\n    class_weight : dict or 'balanced', optional\n        Weights associated with classes in the form ``{class_label: weight}``.\n        If not given, all classes are supposed to have weight one.\n\n        The \"balanced\" mode uses the values of y to automatically adjust\n        weights inversely proportional to class frequencies in the input data\n        as ``n_samples / (n_classes * np.bincount(y))``.\n\n        Note that these weights will be multiplied with sample_weight (passed\n        through the fit method) if sample_weight is specified.\n\n    dual : bool\n        Dual or primal formulation. Dual formulation is only implemented for\n        l2 penalty with liblinear solver. Prefer dual=False when\n        n_samples > n_features.\n\n    penalty : str, 'l1' or 'l2'\n        Used to specify the norm used in the penalization. The 'newton-cg',\n        'sag' and 'lbfgs' solvers support only l2 penalties.\n\n    intercept_scaling : float, default 1.\n        Useful only when the solver 'liblinear' is used\n        and self.fit_intercept is set to True. In this case, x becomes\n        [x, self.intercept_scaling],\n        i.e. a \"synthetic\" feature with constant value equal to\n        intercept_scaling is appended to the instance vector.\n        The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\n        Note! the synthetic feature weight is subject to l1/l2 regularization\n        as all other features.\n        To lessen the effect of regularization on synthetic feature weight\n        (and therefore on the intercept) intercept_scaling has to be increased.\n\n    multi_class : str, {'ovr', 'multinomial', 'auto'}, default: 'ovr'\n        If the option chosen is 'ovr', then a binary problem is fit for each\n        label. For 'multinomial' the loss minimised is the multinomial loss fit\n        across the entire probability distribution, *even when the data is\n        binary*. 'multinomial' is unavailable when solver='liblinear'.\n        'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\n        and otherwise selects 'multinomial'.\n\n        .. versionadded:: 0.18\n           Stochastic Average Gradient descent solver for 'multinomial' case.\n        .. versionchanged:: 0.20\n            Default will change from 'ovr' to 'auto' in 0.22.\n\n    random_state : int, RandomState instance or None, optional, default None\n        The seed of the pseudo random number generator to use when shuffling\n        the data.  If int, random_state is the seed used by the random number\n        generator; If RandomState instance, random_state is the random number\n        generator; If None, the random number generator is the RandomState\n        instance used by `np.random`. Used when ``solver`` == 'sag' or\n        'liblinear'.\n\n    check_input : bool, default True\n        If False, the input arrays X and y will not be checked.\n\n    max_squared_sum : float, default None\n        Maximum squared sum of X over samples. Used only in SAG solver.\n        If None, it will be computed, going through all the samples.\n        The value should be precomputed to speed up cross validation.\n\n    sample_weight : array-like, shape(n_samples,) optional\n        Array of weights that are assigned to individual samples.\n        If not provided, then each sample is given unit weight.\n\n    Returns\n    -------\n    coefs : ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)\n        List of coefficients for the Logistic Regression model. If\n        fit_intercept is set to True then the second dimension will be\n        n_features + 1, where the last item represents the intercept. For\n        ``multiclass='multinomial'``, the shape is (n_classes, n_cs,\n        n_features) or (n_classes, n_cs, n_features + 1).\n\n    Cs : ndarray\n        Grid of Cs used for cross-validation.\n\n    n_iter : array, shape (n_cs,)\n        Actual number of iteration for each Cs.\n\n    Notes\n    -----\n    You might get slightly different results with the solver liblinear than\n    with the others since this uses LIBLINEAR which penalizes the intercept.\n\n    .. versionchanged:: 0.19\n        The \"copy\" parameter was removed.\n    ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Input data.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_targets)",docstring:"Input data, target values.",is_optional:!1,options:null},{name:"pos_class",default_value:null,param_type:["int",null],expected_shape:null,docstring:"The class with respect to which we perform a one-vs-all fit. If None, then it is assumed that the given problem is binary.",is_optional:!1,options:null},{name:"Cs",default_value:null,param_type:["LIST_VALID_OPTIONS","array","int"],expected_shape:"(n_cs,)",docstring:"List of values for the regularization parameter or integer specifying the number of regularization parameters that should be used. In this case, the parameters will be chosen in a logarithmic scale between 1e-4 and 1e4.",is_optional:!1,options:["int "," array-like, shape (n_cs,)"]},{name:"fit_intercept",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether to fit an intercept for the model. In this case the shape of the returned array is (n_cs, n_features + 1).",is_optional:!1,options:null},{name:"max_iter",default_value:null,param_type:["int"],expected_shape:null,docstring:"Maximum number of iterations for the solver.",is_optional:!1,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"Stopping criterion. For the newton-cg and lbfgs solvers, the iteration will stop when ``max{|g_i | i = 1, ..., n} <= tol`` where ``g_i`` is the i-th component of the gradient.",is_optional:!1,options:null},{name:"verbose",default_value:null,param_type:["int"],expected_shape:null,docstring:"For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.",is_optional:!1,options:null},{name:"solver",default_value:null,param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Numerical solver to use.",is_optional:!1,options:["lbfgs"," 'newton-cg"," 'liblinear"," 'sag"," 'saga"]},{name:"coef",default_value:"None",param_type:["array",null],expected_shape:"(n_features,), default None",docstring:"Initialization value for coefficients of logistic regression. Useless for liblinear solver.",is_optional:!0,options:null},{name:"class_weight",default_value:null,param_type:["dict"],expected_shape:null,docstring:'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',is_optional:!0,options:null},{name:"dual",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.",is_optional:!1,options:null},{name:"penalty",default_value:null,param_type:["str"],expected_shape:null,docstring:"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.",is_optional:!1,options:null},{name:"intercept_scaling",default_value:"1.",param_type:["float"],expected_shape:null,docstring:"Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.",is_optional:!0,options:null},{name:"multi_class",default_value:"ovr",param_type:["LIST_VALID_OPTIONS","str"],expected_shape:null,docstring:"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.  .. versionadded:: 0.18    Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.20     Default will change from 'ovr' to 'auto' in 0.22.",is_optional:!0,options:["str"," {'ovr"," 'multinomial"," 'auto'}"," default: 'ovr"]},{name:"random_state",default_value:"None",param_type:["int",null],expected_shape:null,docstring:"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag' or 'liblinear'.",is_optional:!0,options:null},{name:"check_input",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If False, the input arrays X and y will not be checked.",is_optional:!0,options:null},{name:"max_squared_sum",default_value:"None",param_type:["float",null],expected_shape:null,docstring:"Maximum squared sum of X over samples. Used only in SAG solver. If None, it will be computed, going through all the samples. The value should be precomputed to speed up cross validation.",is_optional:!0,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"(n_samples,) optional",docstring:"Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"orthogonal_mp",outputs:[{name:"coef",returned:!0,param_type:["array"],docstring:"Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features."},{name:"n_iters",returned:!0,param_type:["array","int"],docstring:"Number of active features across every target. Returned only if `return_n_iter` is set to True."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Orthogonal Matching Pursuit (OMP)\n\n    Solves n_targets Orthogonal Matching Pursuit problems.\n    An instance of the problem has the form:\n\n    When parametrized by the number of non-zero coefficients using\n    `n_nonzero_coefs`:\n    argmin ||y - X\\gamma||^2 subject to ||\\gamma||_0 <= n_{nonzero coefs}\n\n    When parametrized by error using the parameter `tol`:\n    argmin ||\\gamma||_0 subject to ||y - X\\gamma||^2 <= tol\n\n    Read more in the :ref:`User Guide <omp>`.\n\n    Parameters\n    ----------\n    X : array, shape (n_samples, n_features)\n        Input data. Columns are assumed to have unit norm.\n\n    y : array, shape (n_samples,) or (n_samples, n_targets)\n        Input targets\n\n    n_nonzero_coefs : int\n        Desired number of non-zero entries in the solution. If None (by\n        default) this value is set to 10% of n_features.\n\n    tol : float\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\n\n    precompute : {True, False, 'auto'},\n        Whether to perform precomputations. Improves performance when n_targets\n        or n_samples is very large.\n\n    copy_X : bool, optional\n        Whether the design matrix X must be copied by the algorithm. A false\n        value is only helpful if X is already Fortran-ordered, otherwise a\n        copy is made anyway.\n\n    return_path : bool, optional. Default: False\n        Whether to return every value of the nonzero coefficients along the\n        forward path. Useful for cross-validation.\n\n    return_n_iter : bool, optional default False\n        Whether or not to return the number of iterations.\n\n    Returns\n    -------\n    coef : array, shape (n_features,) or (n_features, n_targets)\n        Coefficients of the OMP solution. If `return_path=True`, this contains\n        the whole coefficient path. In this case its shape is\n        (n_features, n_features) or (n_features, n_targets, n_features) and\n        iterating over the last axis yields coefficients in increasing order\n        of active features.\n\n    n_iters : array-like or int\n        Number of active features across every target. Returned only if\n        `return_n_iter` is set to True.\n\n    See also\n    --------\n    OrthogonalMatchingPursuit\n    orthogonal_mp_gram\n    lars_path\n    decomposition.sparse_encode\n\n    Notes\n    -----\n    Orthogonal matching pursuit was introduced in S. Mallat, Z. Zhang,\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\n\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\n    Matching Pursuit Technical Report - CS Technion, April 2008.\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\n\n    ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Input data. Columns are assumed to have unit norm.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_targets)",docstring:"Input targets",is_optional:!1,options:null},{name:"n_nonzero_coefs",default_value:null,param_type:["int"],expected_shape:null,docstring:"Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.",is_optional:!1,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"Maximum norm of the residual. If not None, overrides n_nonzero_coefs.",is_optional:!1,options:null},{name:"precompute",default_value:null,param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Whether to perform precomputations. Improves performance when n_targets or n_samples is very large.",is_optional:!1,options:["True"," False"," 'auto'}",""]},{name:"copy_X",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether the design matrix X must be copied by the algorithm. A false value is only helpful if X is already Fortran-ordered, otherwise a copy is made anyway.",is_optional:!0,options:null},{name:"return_path",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.",is_optional:!0,options:null},{name:"return_n_iter",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"Whether or not to return the number of iterations.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"orthogonal_mp_gram",outputs:[{name:"coef",returned:!0,param_type:["array"],docstring:"Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features."},{name:"n_iters",returned:!0,param_type:["array","int"],docstring:"Number of active features across every target. Returned only if `return_n_iter` is set to True."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Gram Orthogonal Matching Pursuit (OMP)\n\n    Solves n_targets Orthogonal Matching Pursuit problems using only\n    the Gram matrix X.T * X and the product X.T * y.\n\n    Read more in the :ref:`User Guide <omp>`.\n\n    Parameters\n    ----------\n    Gram : array, shape (n_features, n_features)\n        Gram matrix of the input data: X.T * X\n\n    Xy : array, shape (n_features,) or (n_features, n_targets)\n        Input targets multiplied by X: X.T * y\n\n    n_nonzero_coefs : int\n        Desired number of non-zero entries in the solution. If None (by\n        default) this value is set to 10% of n_features.\n\n    tol : float\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\n\n    norms_squared : array-like, shape (n_targets,)\n        Squared L2 norms of the lines of y. Required if tol is not None.\n\n    copy_Gram : bool, optional\n        Whether the gram matrix must be copied by the algorithm. A false\n        value is only helpful if it is already Fortran-ordered, otherwise a\n        copy is made anyway.\n\n    copy_Xy : bool, optional\n        Whether the covariance vector Xy must be copied by the algorithm.\n        If False, it may be overwritten.\n\n    return_path : bool, optional. Default: False\n        Whether to return every value of the nonzero coefficients along the\n        forward path. Useful for cross-validation.\n\n    return_n_iter : bool, optional default False\n        Whether or not to return the number of iterations.\n\n    Returns\n    -------\n    coef : array, shape (n_features,) or (n_features, n_targets)\n        Coefficients of the OMP solution. If `return_path=True`, this contains\n        the whole coefficient path. In this case its shape is\n        (n_features, n_features) or (n_features, n_targets, n_features) and\n        iterating over the last axis yields coefficients in increasing order\n        of active features.\n\n    n_iters : array-like or int\n        Number of active features across every target. Returned only if\n        `return_n_iter` is set to True.\n\n    See also\n    --------\n    OrthogonalMatchingPursuit\n    orthogonal_mp\n    lars_path\n    decomposition.sparse_encode\n\n    Notes\n    -----\n    Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\n\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\n    Matching Pursuit Technical Report - CS Technion, April 2008.\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\n\n    ",inputs:[{name:"Gram",default_value:null,param_type:["array"],expected_shape:"(n_features, n_features)",docstring:"Gram matrix of the input data: X.T * X",is_optional:!1,options:null},{name:"Xy",default_value:null,param_type:["array"],expected_shape:"(n_features,) or (n_features, n_targets)",docstring:"Input targets multiplied by X: X.T * y",is_optional:!1,options:null},{name:"n_nonzero_coefs",default_value:null,param_type:["int"],expected_shape:null,docstring:"Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.",is_optional:!1,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"Maximum norm of the residual. If not None, overrides n_nonzero_coefs.",is_optional:!1,options:null},{name:"norms_squared",default_value:null,param_type:["array"],expected_shape:"(n_targets,)",docstring:"Squared L2 norms of the lines of y. Required if tol is not None.",is_optional:!1,options:null},{name:"copy_Gram",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether the gram matrix must be copied by the algorithm. A false value is only helpful if it is already Fortran-ordered, otherwise a copy is made anyway.",is_optional:!0,options:null},{name:"copy_Xy",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether the covariance vector Xy must be copied by the algorithm. If False, it may be overwritten.",is_optional:!0,options:null},{name:"return_path",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.",is_optional:!0,options:null},{name:"return_n_iter",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"Whether or not to return the number of iterations.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"ridge_regression",outputs:[{name:"coef",returned:!0,param_type:["array"],docstring:"Weight vector(s)."},{name:"n_iter",returned:!0,param_type:["int"],docstring:"The actual number of iteration performed by the solver. Only returned if `return_n_iter` is True."},{name:"intercept",returned:!0,param_type:["array","float"],docstring:"The intercept of the model. Only returned if `return_intercept` is True and if X is a scipy sparse array."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Solve the ridge equation by the method of normal equations.\n\n    Read more in the :ref:`User Guide <ridge_regression>`.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix, LinearOperator},\n        shape = [n_samples, n_features]\n        Training data\n\n    y : array-like, shape = [n_samples] or [n_samples, n_targets]\n        Target values\n\n    alpha : {float, array-like},\n        shape = [n_targets] if array-like\n        Regularization strength; must be a positive float. Regularization\n        improves the conditioning of the problem and reduces the variance of\n        the estimates. Larger values specify stronger regularization.\n        Alpha corresponds to ``C^-1`` in other linear models such as\n        LogisticRegression or LinearSVC. If an array is passed, penalties are\n        assumed to be specific to the targets. Hence they must correspond in\n        number.\n\n    sample_weight : float or numpy array of shape [n_samples]\n        Individual weights for each sample. If sample_weight is not None and\n        solver='auto', the solver will be set to 'cholesky'.\n\n        .. versionadded:: 0.17\n\n    solver : {'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}\n        Solver to use in the computational routines:\n\n        - 'auto' chooses the solver automatically based on the type of data.\n\n        - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\n          coefficients. More stable for singular matrices than\n          'cholesky'.\n\n        - 'cholesky' uses the standard scipy.linalg.solve function to\n          obtain a closed-form solution via a Cholesky decomposition of\n          dot(X.T, X)\n\n        - 'sparse_cg' uses the conjugate gradient solver as found in\n          scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\n          more appropriate than 'cholesky' for large-scale data\n          (possibility to set `tol` and `max_iter`).\n\n        - 'lsqr' uses the dedicated regularized least-squares routine\n          scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\n          procedure.\n\n        - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\n          its improved, unbiased version named SAGA. Both methods also use an\n          iterative procedure, and are often faster than other solvers when\n          both n_samples and n_features are large. Note that 'sag' and\n          'saga' fast convergence is only guaranteed on features with\n          approximately the same scale. You can preprocess the data with a\n          scaler from sklearn.preprocessing.\n\n\n        All last five solvers support both dense and sparse data. However, only\n        'sag' and 'saga' supports sparse input when`fit_intercept` is True.\n\n        .. versionadded:: 0.17\n           Stochastic Average Gradient descent solver.\n        .. versionadded:: 0.19\n           SAGA solver.\n\n    max_iter : int, optional\n        Maximum number of iterations for conjugate gradient solver.\n        For the 'sparse_cg' and 'lsqr' solvers, the default value is determined\n        by scipy.sparse.linalg. For 'sag' and saga solver, the default value is\n        1000.\n\n    tol : float\n        Precision of the solution.\n\n    verbose : int\n        Verbosity level. Setting verbose > 0 will display additional\n        information depending on the solver used.\n\n    random_state : int, RandomState instance or None, optional, default None\n        The seed of the pseudo random number generator to use when shuffling\n        the data.  If int, random_state is the seed used by the random number\n        generator; If RandomState instance, random_state is the random number\n        generator; If None, the random number generator is the RandomState\n        instance used by `np.random`. Used when ``solver`` == 'sag'.\n\n    return_n_iter : boolean, default False\n        If True, the method also returns `n_iter`, the actual number of\n        iteration performed by the solver.\n\n        .. versionadded:: 0.17\n\n    return_intercept : boolean, default False\n        If True and if X is sparse, the method also returns the intercept,\n        and the solver is automatically changed to 'sag'. This is only a\n        temporary fix for fitting the intercept with sparse data. For dense\n        data, use sklearn.linear_model._preprocess_data before your regression.\n\n        .. versionadded:: 0.17\n\n    Returns\n    -------\n    coef : array, shape = [n_features] or [n_targets, n_features]\n        Weight vector(s).\n\n    n_iter : int, optional\n        The actual number of iteration performed by the solver.\n        Only returned if `return_n_iter` is True.\n\n    intercept : float or array, shape = [n_targets]\n        The intercept of the model. Only returned if `return_intercept`\n        is True and if X is a scipy sparse array.\n\n    Notes\n    -----\n    This function won't compute the intercept.\n    ",inputs:[{name:"X",default_value:null,param_type:["LIST_VALID_OPTIONS","array"],expected_shape:null,docstring:"shape = [n_samples, n_features] Training data",is_optional:!1,options:["array-like"," sparse matrix"," LinearOperator}",""]},{name:"y",default_value:null,param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_targets]",docstring:"Target values",is_optional:!1,options:null},{name:"alpha",default_value:null,param_type:["LIST_VALID_OPTIONS","array","float"],expected_shape:null,docstring:"shape = [n_targets] if array-like Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.",is_optional:!1,options:["float"," array-like}",""]},{name:"sample_weight",default_value:null,param_type:["array","float"],expected_shape:"[n_samples]",docstring:"Individual weights for each sample. If sample_weight is not None and solver='auto', the solver will be set to 'cholesky'.  .. versionadded:: 0.17",is_optional:!1,options:null},{name:"solver",default_value:null,param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution via a Cholesky decomposition of   dot(X.T, X)  - 'sparse_cg' uses the conjugate gradient solver as found in   scipy.sparse.linalg.cg. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses the dedicated regularized least-squares routine   scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.  All last five solvers support both dense and sparse data. However, only 'sag' and 'saga' supports sparse input when`fit_intercept` is True.  .. versionadded:: 0.17    Stochastic Average Gradient descent solver. .. versionadded:: 0.19    SAGA solver.",is_optional:!1,options:["auto"," 'svd"," 'cholesky"," 'lsqr"," 'sparse_cg"," 'sag"," 'saga"]},{name:"max_iter",default_value:null,param_type:["int"],expected_shape:null,docstring:"Maximum number of iterations for conjugate gradient solver. For the 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' and saga solver, the default value is 1000.",is_optional:!0,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"Precision of the solution.",is_optional:!1,options:null},{name:"verbose",default_value:null,param_type:["int"],expected_shape:null,docstring:"Verbosity level. Setting verbose > 0 will display additional information depending on the solver used.",is_optional:!1,options:null},{name:"random_state",default_value:"None",param_type:["int",null],expected_shape:null,docstring:"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag'.",is_optional:!0,options:null},{name:"return_n_iter",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"If True, the method also returns `n_iter`, the actual number of iteration performed by the solver.  .. versionadded:: 0.17",is_optional:!0,options:null},{name:"return_intercept",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"If True and if X is sparse, the method also returns the intercept, and the solver is automatically changed to 'sag'. This is only a temporary fix for fitting the intercept with sparse data. For dense data, use sklearn.linear_model._preprocess_data before your regression.  .. versionadded:: 0.17",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[{name:"ElasticNet",outputs:[{name:"coef_",returned:!1,param_type:["array"],docstring:"parameter vector (w in the cost function formula)"},{name:"sparse_coef_",returned:!1,param_type:["scipy.sparse.matrix"],docstring:"``sparse_coef_`` is a readonly property derived from ``coef_``"},{name:"intercept_",returned:!1,param_type:["array","float"],docstring:"independent term in decision function."},{name:"n_iter_",returned:!1,param_type:["array"],docstring:"number of iterations run by the coordinate descent solver to reach the specified tolerance."}],docstring:"Linear regression with combined L1 and L2 priors as regularizer.\n\n    Minimizes the objective function::\n\n            1 / (2 * n_samples) * ||y - Xw||^2_2\n            + alpha * l1_ratio * ||w||_1\n            + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\n\n    If you are interested in controlling the L1 and L2 penalty\n    separately, keep in mind that this is equivalent to::\n\n            a * L1 + b * L2\n\n    where::\n\n            alpha = a + b and l1_ratio = a / (a + b)\n\n    The parameter l1_ratio corresponds to alpha in the glmnet R package while\n    alpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\n    = 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\n    unless you supply your own sequence of alpha.",inputs:[{name:"alpha",default_value:"1.0",param_type:["float"],expected_shape:null,docstring:"Constant that multiplies the penalty terms. Defaults to 1.0. See the notes for the exact mathematical meaning of this parameter.``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.",is_optional:!0,options:null},{name:"l1_ratio",default_value:null,param_type:["float"],expected_shape:null,docstring:"The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``. For ``l1_ratio = 0`` the penalty is an L2 penalty. ``For l1_ratio = 1`` it is an L1 penalty.  For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2.",is_optional:!1,options:null},{name:"fit_intercept",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether the intercept should be estimated or not. If ``False``, the data is assumed to be already centered.",is_optional:!1,options:null},{name:"normalize",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.",is_optional:!0,options:null},{name:"precompute",default_value:null,param_type:["bool","array"],expected_shape:null,docstring:"Whether to use a precomputed Gram matrix to speed up calculations. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.",is_optional:!1,options:null},{name:"max_iter",default_value:null,param_type:["int"],expected_shape:null,docstring:"The maximum number of iterations",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``True``, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.",is_optional:!0,options:null},{name:"warm_start",default_value:!1,param_type:["bool"],expected_shape:null,docstring:"When set to ``True``, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.",is_optional:!0,options:null},{name:"positive",default_value:!1,param_type:["bool"],expected_shape:null,docstring:"When set to ``True``, forces the coefficients to be positive.",is_optional:!0,options:null},{name:"selection",default_value:"cyclic",param_type:["str"],expected_shape:null,docstring:"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.",is_optional:!0,options:["random","cyclic"]}],node_functions:[{name:"__init__",outputs:[],docstring:"None",inputs:[]},{name:"_decision_function",outputs:[{name:"T",returned:!0,param_type:["array"],docstring:"The predicted decision function"}],docstring:"Decision function of the linear model\n\n        Parameters\n        ----------\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\n\n        Returns\n        -------\n        T : array, shape (n_samples,)\n            The predicted decision function\n        ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"",is_optional:!1,options:null}]},{name:"_get_param_names",outputs:[],docstring:"Get parameter names for the estimator",inputs:[]},{name:"_preprocess_data",outputs:[],docstring:"\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\n    the X is a sparse matrix, no centering is done, but normalization can still\n    be applied. The function returns the statistics necessary to reconstruct\n    the input data, which are X_offset, y_offset, X_scale, such that the output\n\n        X = (X - X_offset) / X_scale\n\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\n    then the weighted mean of X and y is zero, and not the mean itself. If\n    return_mean=True, the mean, eventually weighted, is returned, independently\n    of whether X was centered (option used for optimization with sparse data in\n    coordinate_descend).\n\n    This is here because nearly all linear models will want their data to be\n    centered. This function also systematically makes y consistent with X.dtype\n    ",inputs:[]},{name:"_set_intercept",outputs:[],docstring:"Set the intercept_\n        ",inputs:[]},{name:"fit",outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Fit model with coordinate descent.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:null,docstring:"Data",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_targets)",docstring:"Target. Will be cast to X's dtype if necessary",is_optional:!1,options:null},{name:"check_input",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"Allow to bypass several input checking. Don't use this parameter unless you know what you do.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict",outputs:[{name:"C",returned:!0,param_type:["array"],docstring:"Returns predicted values."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict using the linear model",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"score",outputs:[{name:"score",returned:!0,param_type:["float"],docstring:"R^2 of self.predict(X) wrt. y."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Returns the coefficient of determination R^2 of the prediction.\n\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always\n        predicts the expected value of y, disregarding the input features,\n        would get a R^2 score of 0.0.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",docstring:"True values for X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples], optional",docstring:"Sample weights.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[]},{name:"Lasso",outputs:[{name:"coef_",returned:!1,param_type:["array"],docstring:"parameter vector (w in the cost function formula)"},{name:"sparse_coef_",returned:!1,param_type:["scipy.sparse.matrix"],docstring:"``sparse_coef_`` is a readonly property derived from ``coef_``"},{name:"intercept_",returned:!1,param_type:["array","float"],docstring:"independent term in decision function."},{name:"n_iter_",returned:!1,param_type:["array","int"],docstring:"number of iterations run by the coordinate descent solver to reach the specified tolerance."}],docstring:"Linear Model trained with L1 prior as regularizer (aka the Lasso)\n\n    The optimization objective for Lasso is::\n\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\n\n    Technically the Lasso model is optimizing the same objective function as\n    the Elastic Net with ``l1_ratio=1.0`` (no L2 penalty).",inputs:[{name:"alpha",default_value:"1.0",param_type:["float"],expected_shape:null,docstring:"Constant that multiplies the L1 term. Defaults to 1.0. ``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.",is_optional:!0,options:null},{name:"fit_intercept",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).",is_optional:!0,options:null},{name:"normalize",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.",is_optional:!0,options:null},{name:"precompute",default_value:"False",param_type:["bool","array"],expected_shape:null,docstring:"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If ``True``, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"max_iter",default_value:null,param_type:["int"],expected_shape:null,docstring:"The maximum number of iterations",is_optional:!0,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.",is_optional:!0,options:null},{name:"warm_start",default_value:null,param_type:["bool"],expected_shape:null,docstring:"When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.",is_optional:!0,options:null},{name:"positive",default_value:null,param_type:["bool"],expected_shape:null,docstring:"When set to ``True``, forces the coefficients to be positive.",is_optional:!0,options:null},{name:"selection",default_value:"cyclic",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.",is_optional:!0,options:["random","cyclic"]}],node_functions:[{name:"__init__",outputs:[],docstring:"None",inputs:[]},{name:"_decision_function",outputs:[{name:"T",returned:!0,param_type:["array"],docstring:"The predicted decision function"}],docstring:"Decision function of the linear model\n\n        Parameters\n        ----------\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\n\n        Returns\n        -------\n        T : array, shape (n_samples,)\n            The predicted decision function\n        ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"",is_optional:!1,options:null}]},{name:"_get_param_names",outputs:[],docstring:"Get parameter names for the estimator",inputs:[]},{name:"_preprocess_data",outputs:[],docstring:"\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\n    the X is a sparse matrix, no centering is done, but normalization can still\n    be applied. The function returns the statistics necessary to reconstruct\n    the input data, which are X_offset, y_offset, X_scale, such that the output\n\n        X = (X - X_offset) / X_scale\n\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\n    then the weighted mean of X and y is zero, and not the mean itself. If\n    return_mean=True, the mean, eventually weighted, is returned, independently\n    of whether X was centered (option used for optimization with sparse data in\n    coordinate_descend).\n\n    This is here because nearly all linear models will want their data to be\n    centered. This function also systematically makes y consistent with X.dtype\n    ",inputs:[]},{name:"_set_intercept",outputs:[],docstring:"Set the intercept_\n        ",inputs:[]},{name:"fit",outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Fit model with coordinate descent.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Data",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,) or (n_samples, n_targets)",docstring:"Target. Will be cast to X's dtype if necessary",is_optional:!1,options:null},{name:"check_input",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"Allow to bypass several input checking. Don't use this parameter unless you know what you do.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict",outputs:[{name:"C",returned:!0,param_type:["array"],docstring:"Returns predicted values."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict using the linear model\n\n        Parameters\n        ----------\n        X : array_like or sparse matrix, shape (n_samples, n_features)\n            Samples.\n\n        Returns\n        -------\n        C : array, shape (n_samples,)\n            Returns predicted values.\n        ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"score",outputs:[{name:"score",returned:!0,param_type:["float"],docstring:"R^2 of self.predict(X) wrt. y."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Returns the coefficient of determination R^2 of the prediction.\n\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always\n        predicts the expected value of y, disregarding the input features,\n        would get a R^2 score of 0.0.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Test samples.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",docstring:"True values for X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples], optional",docstring:"Sample weights.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[]},{name:"LinearRegression",outputs:[{name:"coef_",returned:!1,param_type:["array"],docstring:"Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features."},{name:"intercept_",returned:!1,param_type:["array"],docstring:"Independent term in the linear model."}],docstring:"Ordinary least squares Linear Regression.",inputs:[{name:"fit_intercept",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).",is_optional:!0,options:null},{name:"normalize",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If True, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"n_jobs",default_value:"None",param_type:["int",null],expected_shape:null,docstring:"The number of jobs to use for the computation. This will only provide speedup for n_targets > 1 and sufficient large problems. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",is_optional:!0,options:null}],node_functions:[{name:"__init__",outputs:[],docstring:"None",inputs:[]},{name:"_decision_function",outputs:[],docstring:"None",inputs:[]},{name:"_get_param_names",outputs:[],docstring:"Get parameter names for the estimator",inputs:[]},{name:"_preprocess_data",outputs:[],docstring:"\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\n    the X is a sparse matrix, no centering is done, but normalization can still\n    be applied. The function returns the statistics necessary to reconstruct\n    the input data, which are X_offset, y_offset, X_scale, such that the output\n\n        X = (X - X_offset) / X_scale\n\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\n    then the weighted mean of X and y is zero, and not the mean itself. If\n    return_mean=True, the mean, eventually weighted, is returned, independently\n    of whether X was centered (option used for optimization with sparse data in\n    coordinate_descend).\n\n    This is here because nearly all linear models will want their data to be\n    centered. This function also systematically makes y consistent with X.dtype\n    ",inputs:[]},{name:"_set_intercept",outputs:[],docstring:"Set the intercept_\n        ",inputs:[]},{name:"fit",outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Fit linear model",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Training data",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_targets)",docstring:"Target values. Will be cast to X's dtype if necessary",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples]",docstring:"Individual weights for each sample  .. versionadded:: 0.17    parameter *sample_weight* support to LinearRegression.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict",outputs:[{name:"C",returned:!0,param_type:["array"],docstring:"Returns predicted values."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict using the linear model",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"score",outputs:[{name:"score",returned:!0,param_type:["float"],docstring:"R^2 of self.predict(X) wrt. y."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Returns the coefficient of determination R^2 of the prediction.\n\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always\n        predicts the expected value of y, disregarding the input features,\n        would get a R^2 score of 0.0.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",docstring:"True values for X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples], optional",docstring:"Sample weights.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[]},{name:"LogisticRegression",outputs:[{name:"classes_",returned:!1,param_type:["array"],docstring:"A list of class labels known to the classifier."},{name:"coef_",returned:!1,param_type:["array"],docstring:"Coefficient of the features in the decision function.  `coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False)."},{name:"intercept_",returned:!1,param_type:["array"],docstring:"Intercept (a.k.a. bias) added to the decision function.  If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False)."},{name:"n_iter_",returned:!1,param_type:["array"],docstring:"Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.  .. versionchanged:: 0.20      In SciPy <= 1.0.0 the number of lbfgs iterations may exceed     ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."}],docstring:"Logistic Regression (aka logit, MaxEnt) classifier.\n\n    In the multiclass case, the training algorithm uses the one-vs-rest (OvR)\n    scheme if the 'multi_class' option is set to 'ovr', and uses the cross-\n    entropy loss if the 'multi_class' option is set to 'multinomial'.\n    (Currently the 'multinomial' option is supported only by the 'lbfgs',\n    'sag' and 'newton-cg' solvers.)\n\n    This class implements regularized logistic regression using the\n    'liblinear' library, 'newton-cg', 'sag' and 'lbfgs' solvers. It can handle\n    both dense and sparse input. Use C-ordered arrays or CSR matrices\n    containing 64-bit floats for optimal performance; any other input format\n    will be converted (and copied).\n\n    The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\n    with primal formulation. The 'liblinear' solver supports both L1 and L2\n    regularization, with a dual formulation only for the L2 penalty.",inputs:[{name:"penalty",default_value:"l2",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.  .. versionadded:: 0.19    l1 penalty with SAGA solver (allowing 'multinomial' + L1)",is_optional:!0,options:["l1","l2","elasticnet","none"]},{name:"dual",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.",is_optional:!0,options:null},{name:"tol",default_value:"1e-4",param_type:["float"],expected_shape:null,docstring:"Tolerance for stopping criteria.",is_optional:!0,options:null},{name:"C",default_value:"1.0",param_type:["float"],expected_shape:null,docstring:"Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.",is_optional:!0,options:null},{name:"fit_intercept",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function.",is_optional:!0,options:null},{name:"intercept_scaling",default_value:"1.",param_type:["float"],expected_shape:null,docstring:"Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.",is_optional:!0,options:null},{name:"class_weight",default_value:"None",param_type:["dict","str",null],expected_shape:null,docstring:'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',is_optional:!0,options:null},{name:"solver",default_value:"liblinear.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Algorithm to use in the optimization problem.  - For small datasets, 'liblinear' is a good choice, whereas 'sag' and   'saga' are faster for large ones. - For multiclass problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs'   handle multinomial loss; 'liblinear' is limited to one-versus-rest   schemes. - 'newton-cg', 'lbfgs' and 'sag' only handle L2 penalty, whereas   'liblinear' and 'saga' handle L1 penalty.  Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing.",is_optional:!0,options:["newton-cg","lbfgs","liblinear","sag","saga'}"]},{name:"max_iter",default_value:"100",param_type:["int"],expected_shape:null,docstring:"Useful only for the newton-cg, sag and lbfgs solvers. Maximum number of iterations taken for the solvers to converge.",is_optional:!0,options:null},{name:"multi_class",default_value:"ovr",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.",is_optional:!0,options:["ovr","multinomial","auto"]},{name:"verbose",default_value:"0",param_type:["int"],expected_shape:null,docstring:"For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.",is_optional:!0,options:null},{name:"warm_start",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver.",is_optional:!0,options:null},{name:"n_jobs",default_value:"None",param_type:["int",null],expected_shape:null,docstring:"Number of CPU cores used when parallelizing over classes if multi_class='ovr'\". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",is_optional:!0,options:null}],node_functions:[{name:"__init__",outputs:[],docstring:"None",inputs:[]},{name:"_get_param_names",outputs:[],docstring:"Get parameter names for the estimator",inputs:[]},{name:"_predict_proba_lr",outputs:[],docstring:"Probability estimation for OvR logistic regression.\n\n        Positive class probabilities are computed as\n        1. / (1. + np.exp(-self.decision_function(X)));\n        multiclass is handled by normalizing that over all classes.\n        ",inputs:[]},{name:"decision_function",outputs:[{name:"array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)",returned:!0,param_type:[null],docstring:"Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict confidence scores for samples.\n\n        The confidence score for a sample is the signed distance of that\n        sample to the hyperplane.\n\n        Parameters\n        ----------\n        X : array_like or sparse matrix, shape (n_samples, n_features)\n            Samples.\n\n        Returns\n        -------\n        array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)\n            Confidence scores per (sample, class) combination. In the binary\n            case, confidence score for self.classes_[1] where >0 means this\n            class would be predicted.\n        ",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"fit",outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Fit the model according to the given training data.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Training vector, where n_samples is the number of samples and n_features is the number of features.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples,)",docstring:"Target vector relative to X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"(n_samples,) optional",docstring:"Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict",outputs:[{name:"C",returned:!0,param_type:["array"],docstring:"Predicted class label per sample."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict class labels for samples in X.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict_log_proba",outputs:[{name:"T",returned:!0,param_type:["array"],docstring:"Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Log of probability estimates.\n\n        The returned estimates for all classes are ordered by the\n        label of classes.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"[n_samples, n_features]",docstring:"",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict_proba",outputs:[{name:"T",returned:!0,param_type:["array"],docstring:"Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:'Probability estimates.\n\n        The returned estimates for all classes are ordered by the\n        label of classes.\n\n        For a multi_class problem, if multi_class is set to be "multinomial"\n        the softmax function is used to find the predicted probability of\n        each class.\n        Else use a one-vs-rest approach, i.e calculate the probability\n        of each class assuming it to be positive using the logistic function.\n        and normalize these values across all the classes.',inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"[n_samples, n_features]",docstring:"",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"score",outputs:[{name:"score",returned:!0,param_type:["float"],docstring:"Mean accuracy of self.predict(X) wrt. y."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Returns the mean accuracy on the given test data and labels.\n\n        In multi-label classification, this is the subset accuracy\n        which is a harsh metric since you require for each sample that\n        each label set be correctly predicted.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Test samples.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",docstring:"True labels for X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples]",docstring:"Sample weights.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[]},{name:"Ridge",outputs:[{name:"coef_",returned:!1,param_type:["array"],docstring:"Weight vector(s)."},{name:"intercept_",returned:!1,param_type:["LIST_VALID_OPTIONS","array","float"],docstring:"Independent term in decision function. Set to 0.0 if ``fit_intercept = False``."},{name:"n_iter_",returned:!1,param_type:["array",null],docstring:"Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return None.  .. versionadded:: 0.17"}],docstring:"Linear least squares with l2 regularization.\n\n    Minimizes the objective function::\n\n    ||y - Xw||^2_2 + alpha * ||w||^2_2\n\n    This model solves a regression model where the loss function is\n    the linear least squares function and regularization is given by\n    the l2-norm. Also known as Ridge Regression or Tikhonov regularization.\n    This estimator has built-in support for multi-variate regression\n    (i.e., when y is a 2d-array of shape [n_samples, n_targets]).",inputs:[{name:"alpha",default_value:null,param_type:["array","float"],expected_shape:"(n_targets)",docstring:"Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.",is_optional:!1,options:null},{name:"fit_intercept",default_value:null,param_type:["bool"],expected_shape:null,docstring:"Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered).",is_optional:!1,options:null},{name:"normalize",default_value:"False",param_type:["bool"],expected_shape:null,docstring:"This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.",is_optional:!0,options:null},{name:"copy_X",default_value:"True",param_type:["bool"],expected_shape:null,docstring:"If True, X will be copied; else, it may be overwritten.",is_optional:!0,options:null},{name:"max_iter",default_value:null,param_type:["int"],expected_shape:null,docstring:"Maximum number of iterations for conjugate gradient solver. For 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' solver, the default value is 1000.",is_optional:!0,options:null},{name:"tol",default_value:null,param_type:["float"],expected_shape:null,docstring:"Precision of the solution.",is_optional:!1,options:null},{name:"solver",default_value:null,param_type:["LIST_VALID_OPTIONS"],expected_shape:null,docstring:"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution.  - 'sparse_cg' uses a conjugate gradient solver. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses a dedicated regularized least-squares routine. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.",is_optional:!1,options:["auto","svd","cholesky","lsqr","sparse_cg","sag","saga"]}],node_functions:[{name:"__init__",outputs:[],docstring:"None",inputs:[]},{name:"_decision_function",outputs:[],docstring:"None",inputs:[]},{name:"_get_param_names",outputs:[],docstring:"Get parameter names for the estimator",inputs:[]},{name:"_preprocess_data",outputs:[],docstring:"\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\n    the X is a sparse matrix, no centering is done, but normalization can still\n    be applied. The function returns the statistics necessary to reconstruct\n    the input data, which are X_offset, y_offset, X_scale, such that the output\n\n        X = (X - X_offset) / X_scale\n\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\n    then the weighted mean of X and y is zero, and not the mean itself. If\n    return_mean=True, the mean, eventually weighted, is returned, independently\n    of whether X was centered (option used for optimization with sparse data in\n    coordinate_descend).\n\n    This is here because nearly all linear models will want their data to be\n    centered. This function also systematically makes y consistent with X.dtype\n    ",inputs:[]},{name:"_set_intercept",outputs:[],docstring:"Set the intercept_\n        ",inputs:[]},{name:"fit",outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Fit Ridge regression model",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"[n_samples, n_features]",docstring:"Training data",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_targets]",docstring:"Target values",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array","float"],expected_shape:"[n_samples]",docstring:"Individual weights for each sample",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"predict",outputs:[{name:"C",returned:!0,param_type:["array"],docstring:"Returns predicted values."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Predict using the linear model",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Samples.",is_optional:!1,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]},{name:"score",outputs:[{name:"score",returned:!0,param_type:["float"],docstring:"R^2 of self.predict(X) wrt. y."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],docstring:"Returns the coefficient of determination R^2 of the prediction.\n\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\n        The best possible score is 1.0 and it can be negative (because the\n        model can be arbitrarily worse). A constant model that always\n        predicts the expected value of y, disregarding the input features,\n        would get a R^2 score of 0.0.",inputs:[{name:"X",default_value:null,param_type:["array"],expected_shape:"(n_samples, n_features)",docstring:"Test samples.",is_optional:!1,options:null},{name:"y",default_value:null,param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",docstring:"True values for X.",is_optional:!1,options:null},{name:"sample_weight",default_value:null,param_type:["array"],expected_shape:"[n_samples], optional",docstring:"Sample weights.",is_optional:!0,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}]}],nodes:[]}],library:"sklearn"},Tm={name:"chemml.models",docstring:"",inputs:[],outputs:[],node_functions:[],nodes:[{name:"MLP",docstring:"\n    Class associated with Multi-Layer Perceptron (Neural Network)",inputs:[{name:"nhidden",docstring:"The number of hidden layers in the neural network (excluding input and output)",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1",options:null},{name:"nneurons",docstring:"The number of nodes in each hidden layer. Must be of same length as nhidden. default: [100] * nhidden",param_type:["list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"activations",docstring:"The activation type for each hidden layer. Must be of same length as nhidden. Refer https://keras.io/activations/ for list of valid activations. default: ['sigmoid'] * nhidden",param_type:["list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"nepochs",docstring:"Number of training epochs.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"100",options:null},{name:"batch_size",docstring:"Number of training samples in mini-batch",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"100",options:null},{name:"loss",docstring:"Type of loss used to train the neural network. Refer https://keras.io/losses/ for list of valid losses",param_type:["str"],expected_shape:null,is_optional:!1,default_value:"mean_squared_error",options:["mean_squared_error","mean_absolute_error","squared_hinge","hinge","categorical_hinge","categorical_crossentropy","binary_crossentropy","kullback_liebler_divergence"]},{name:"regression",docstring:"Decides whether we are training for regression or classification task",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"nclasses",docstring:"Number of classes labels needs to be specified if regression is False",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"None",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"fit",docstring:"\n        Train the MLP for training data X and targets y",inputs:[{name:"X",docstring:"Training data",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Training targets",param_type:["array"],expected_shape:"[n_samples,]",is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"predict",docstring:"\n        Return prediction for test data X",inputs:[{name:"X",docstring:"Testing data",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null}],outputs:[{name:"",docstring:"Predicted value from model",param_type:["float"],returned:!0}]},{name:"score",docstring:"\n        Predict results for test data X and compare with true targets y. Returns root mean square error if regression,\n        accuracy if classification\n\n        Parameters\n        ----------\n        X: array_like, shape=[n_samples, n_features]\n            Test data\n\n        y: array_like, shape=[n_samples,]\n            True targets\n\n        Returns\n        -------\n        float\n            root mean square error if regression, accuracy if classification\n        ",inputs:[{name:"X",docstring:"Test data",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"True targets",param_type:["array"],expected_shape:"[n_samples,]",is_optional:!1,default_value:null,options:null}],outputs:[{name:"score",docstring:"root mean square error if regression, accuracy if classification",param_type:["float"],returned:!0}]}],nodes:[]},{name:"OrganicLorentzLorenz",docstring:"\n    A machine learning model for Lorentz-Lorenz (LL) estimates of refractive index.\n    The model predicts refractive index, polarizability, and density of an organic molecule using its\n    SMILES representation.\n\n    The model is trained on 100K small organic molecules with their polarizabilities from DFT calculations, densities from\n    molecular dynamics simulations, and refractive index by feeding calculated polarizabilities and densities into the\n    LL model.\n\n    The model is a fully connected artificial neural network with 3 hidden layers. The number of neurons per layers from\n    input layer to the output layer are as follow: 1024 --\x3e 128 --\x3e 64 --\x3e 32 --\x3e [1, 1, 1].\n    ",inputs:[],outputs:[],node_functions:[{name:"_OrganicLorentzLorenz__represent",docstring:"None",inputs:[],outputs:[]},{name:"get_hidden_layer",docstring:"\n        This functions return the first hidden layer of the model.",inputs:[{name:"X",docstring:"If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"id",docstring:"This is the id of hidden layers. It can be any of 1, 2, or 3 for the first, second, or third hidden layer, respectively.",param_type:["int"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"layer_output",docstring:"The array of shape (length_of_X, 128) as the outputs of the first hidden layer (id=1). The array of shape (length_of_X, 64) as the outputs of the first hidden layer (id=2). The array of shape (length_of_X, 32) as the outputs of the first hidden layer (id=3).",param_type:["array"],returned:!0}]},{name:"load",docstring:"This function loads the Keras model. The model consists of 3 hidden layers and more than 140K parameters.",inputs:[],outputs:[]},{name:"predict",docstring:"After loading the model, this function predicts refractive index, polarizability, and density of the entery.",inputs:[{name:"smiles",docstring:"The SMILES representaion of a molecule.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"pprint",docstring:"If True, a short description of the predicted properties will be printed out.",param_type:["bool"],expected_shape:null,is_optional:!1,default_value:"True",options:null}],outputs:[{name:"predictions",docstring:"includes estimates of refractive index, polarizability, and density, respectively.",param_type:["tuple"],returned:!0}]},{name:"train",docstring:"\n        This function allows the user to retrain the model on a given data set for some further steps.\n        Thus, all the parameters you are able to pass to a keras model's compile or fit methods can be passed to this\n        function as well.",inputs:[{name:"X",docstring:"If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format. If dataframe, it can be a 2D frame with one columnd of SMILES or 1024 columns of features.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"Y",docstring:"a list of three numpy arrays for refractive index, polarizability, and density, respectively. The length of arrays must be same as the length of X. If dataframe, it must be a 2D frame with 3 columns, each for one of the properties.",param_type:["array","list"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"scale: bool, optional (default: True)",docstring:"If True the X and Y will be scaled in the same fashion as the original traning process (recommended).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[]}],nodes:[]}],library:"chemml",module:"models"},Pm={inputs:[],module:"decomposition",library:"sklearn",name:"sklearn.decomposition",nodes:[{inputs:[{is_optional:!1,param_type:["int",null],name:"n_components",docstring:"Dimensionality of latent space, the number of components of ``X`` that are obtained after ``transform``. If None, n_components is set to the number of features.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["float"],name:"tol",docstring:"Stopping tolerance for EM algorithm.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"copy",docstring:"Whether to make a copy of X. If ``False``, the input X gets overwritten during fitting.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["int"],name:"max_iter",docstring:"Maximum number of iterations.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS","array",null],name:"noise_variance_init",docstring:"The initial guess of the noise variance for each feature. If None, it defaults to np.ones(n_features)",options:["None "," array, shape=(n_features,)"],default_value:null,expected_shape:"(n_features,)"},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"svd_method",docstring:"Which SVD method to use. If 'lapack' use standard SVD from scipy.linalg, if 'randomized' use fast ``randomized_svd`` function. Defaults to 'randomized'. For most applications 'randomized' will be sufficiently precise while providing significant speed gains. Accuracy can also be improved by setting higher values for `iterated_power`. If this is not sufficient, for maximum precision you should choose 'lapack'.",options:["lapack","randomized"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"iterated_power",docstring:"Number of iterations for the power method. 3 by default. Only used if ``svd_method`` equals 'randomized'",options:null,default_value:"3",expected_shape:null}],name:"FactorAnalysis",nodes:[],node_functions:[{inputs:[],outputs:[],name:"__init__",docstring:"None"},{inputs:[],outputs:[],name:"_get_param_names",docstring:"Get parameter names for the estimator"},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!1,param_type:[null],name:"y",docstring:"",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit",docstring:"Fit the FactorAnalysis model to X using EM\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Training data.\n\n        y : Ignored\n\n        Returns\n        -------\n        self\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training set.",options:null,default_value:null,expected_shape:"[n_samples, n_features]"},{is_optional:!1,param_type:["array"],name:"y",docstring:"Target values.",options:null,default_value:null,expected_shape:"[n_samples]"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:"Transformed array."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit_transform",docstring:"Fit to data, then transform it.\n\n        Fits transformer to X and y with optional parameters fit_params\n        and returns a transformed version of X.\n\n        Parameters\n        ----------\n        X : numpy array of shape [n_samples, n_features]\n            Training set.\n\n        y : numpy array of shape [n_samples]\n            Target values.\n\n        Returns\n        -------\n        X_new : numpy array of shape [n_samples, n_features_new]\n            Transformed array.\n\n        "},{inputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"cov",docstring:"Estimated covariance of data."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"get_covariance",docstring:"Compute data covariance with the FactorAnalysis model.\n\n        ``cov = components_.T * components_ + diag(noise_variance)``\n\n        Returns\n        -------\n        cov : array, shape (n_features, n_features)\n            Estimated covariance of data.\n        "},{inputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"precision",docstring:"Estimated precision of data."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"get_precision",docstring:"Compute data precision matrix with the FactorAnalysis model.\n\n        Returns\n        -------\n        precision : array, shape (n_features, n_features)\n            Estimated precision of data.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"The data",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["float"],name:"ll",docstring:"Average log-likelihood of the samples under the current model"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"score",docstring:"Compute the average log-likelihood of the samples\n\n        Parameters\n        ----------\n        X : array, shape (n_samples, n_features)\n            The data\n\n        y : Ignored\n\n        Returns\n        -------\n        ll : float\n            Average log-likelihood of the samples under the current model\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"The data",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"ll",docstring:"Log-likelihood of each sample under the current model"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"score_samples",docstring:"Compute the log-likelihood of each sample\n\n        Parameters\n        ----------\n        X : array, shape (n_samples, n_features)\n            The data\n\n        Returns\n        -------\n        ll : array, shape (n_samples,)\n            Log-likelihood of each sample under the current model\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:"The latent variables of X."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"transform",docstring:"Apply dimensionality reduction to X using the model.\n\n        Compute the expected mean of the latent variables.\n        See Barber, 21.2.33 (or Bishop, 12.66).\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Training data.\n\n        Returns\n        -------\n        X_new : array-like, shape (n_samples, n_components)\n            The latent variables of X.\n        "}],docstring:"Factor Analysis (FA)\n\n    A simple linear generative model with Gaussian latent variables.\n\n    The observations are assumed to be caused by a linear transformation of\n    lower dimensional latent factors and added Gaussian noise.\n    Without loss of generality the factors are distributed according to a\n    Gaussian with zero mean and unit covariance. The noise is also zero mean\n    and has an arbitrary diagonal covariance matrix.\n\n    If we would restrict the model further, by assuming that the Gaussian\n    noise is even isotropic (all diagonal entries are the same) we would obtain\n    :class:`PPCA`.\n\n    FactorAnalysis performs a maximum likelihood estimate of the so-called\n    `loading` matrix, the transformation of the latent variables to the\n    observed ones, using expectation-maximization (EM).\n\n    Read more in the :ref:`User Guide <FA>`.\n\n    Parameters\n    ----------\n    n_components : int | None\n        Dimensionality of latent space, the number of components\n        of ``X`` that are obtained after ``transform``.\n        If None, n_components is set to the number of features.\n\n    tol : float\n        Stopping tolerance for EM algorithm.\n\n    copy : bool\n        Whether to make a copy of X. If ``False``, the input X gets overwritten\n        during fitting.\n\n    max_iter : int\n        Maximum number of iterations.\n\n    noise_variance_init : None | array, shape=(n_features,)\n        The initial guess of the noise variance for each feature.\n        If None, it defaults to np.ones(n_features)\n\n    svd_method : {'lapack', 'randomized'}\n        Which SVD method to use. If 'lapack' use standard SVD from\n        scipy.linalg, if 'randomized' use fast ``randomized_svd`` function.\n        Defaults to 'randomized'. For most applications 'randomized' will\n        be sufficiently precise while providing significant speed gains.\n        Accuracy can also be improved by setting higher values for\n        `iterated_power`. If this is not sufficient, for maximum precision\n        you should choose 'lapack'.\n\n    iterated_power : int, optional\n        Number of iterations for the power method. 3 by default. Only used\n        if ``svd_method`` equals 'randomized'\n\n    random_state : int, RandomState instance or None, optional (default=0)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`. Only used when ``svd_method`` equals 'randomized'.\n\n    Attributes\n    ----------\n    components_ : array, [n_components, n_features]\n        Components with maximum variance.\n\n    loglike_ : list, [n_iterations]\n        The log likelihood at each iteration.\n\n    noise_variance_ : array, shape=(n_features,)\n        The estimated noise variance for each feature.\n\n    n_iter_ : int\n        Number of iterations run.\n\n    Examples\n    --------\n    >>> from sklearn.datasets import load_digits\n    >>> from sklearn.decomposition import FactorAnalysis\n    >>> X, _ = load_digits(return_X_y=True)\n    >>> transformer = FactorAnalysis(n_components=7, random_state=0)\n    >>> X_transformed = transformer.fit_transform(X)\n    >>> X_transformed.shape\n    (1797, 7)\n\n    References\n    ----------\n    .. David Barber, Bayesian Reasoning and Machine Learning,\n        Algorithm 21.1\n\n    .. Christopher M. Bishop: Pattern Recognition and Machine Learning,\n        Chapter 12.2.4\n\n    See also\n    --------\n    PCA: Principal component analysis is also a latent linear variable model\n        which however assumes equal noise variance for each feature.\n        This extra assumption makes probabilistic PCA faster as it can be\n        computed in closed form.\n    FastICA: Independent component analysis, a latent variable model with\n        non-Gaussian latent variables.\n    ",outputs:[{returned:!1,param_type:["array"],name:"components_",docstring:"Components with maximum variance."},{returned:!1,param_type:["list"],name:"loglike_",docstring:"The log likelihood at each iteration."},{returned:!1,param_type:["array"],name:"noise_variance_",docstring:"The estimated noise variance for each feature."},{returned:!1,param_type:["int"],name:"n_iter_",docstring:"Number of iterations run."}]},{inputs:[{is_optional:!1,param_type:["int","float","str",null],name:"n_components",docstring:"Number of components to keep. if n_components is not set all components are kept::      n_components == min(n_samples, n_features)  If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's MLE is used to guess the dimension. Use of ``n_components == 'mle'`` will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.  If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components.  If ``svd_solver == 'arpack'``, the number of components must be strictly less than the minimum of n_features and n_samples.  Hence, the None case results in::      n_components == min(n_samples, n_features) - 1",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"copy",docstring:"If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead.",options:null,default_value:"True",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"whiten",docstring:"When True (False by default) the `components_` vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances.  Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions.",options:null,default_value:"False",expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"svd_solver",docstring:"auto :     the solver is selected by a default policy based on `X.shape` and     `n_components`: if the input data is larger than 500x500 and the     number of components to extract is lower than 80% of the smallest     dimension of the data, then the more efficient 'randomized'     method is enabled. Otherwise the exact full SVD is computed and     optionally truncated afterwards. full :     run exact full SVD calling the standard LAPACK solver via     `scipy.linalg.svd` and select the components by postprocessing arpack :     run SVD truncated to n_components calling ARPACK solver via     `scipy.sparse.linalg.svds`. It requires strictly     0 < n_components < min(X.shape) randomized :     run randomized SVD by the method of Halko et al.  .. versionadded:: 0.18.0",options:["auto","full","arpack","randomized"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["float"],name:"tol",docstring:"Tolerance for singular values computed by svd_solver == 'arpack'.  .. versionadded:: 0.18.0",options:null,default_value:".0",expected_shape:null},{is_optional:!0,param_type:["int"],name:"iterated_power",docstring:"Number of iterations for the power method computed by svd_solver == 'randomized'.  .. versionadded:: 0.18.0",options:null,default_value:"auto",expected_shape:null}],name:"PCA",nodes:[],node_functions:[{inputs:[],outputs:[],name:"__init__",docstring:"None"},{inputs:[],outputs:[],name:"_fit",docstring:"Dispatch to the right submethod depending on the chosen solver."},{inputs:[],outputs:[],name:"_fit_full",docstring:"Fit the model by computing full SVD on X"},{inputs:[],outputs:[],name:"_fit_truncated",docstring:"Fit the model by computing truncated SVD (by ARPACK or randomized)\n        on X\n        "},{inputs:[],outputs:[],name:"_get_param_names",docstring:"Get parameter names for the estimator"},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data, where n_samples is the number of samples and n_features is the number of features.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"Ignored",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit",docstring:"Fit the model with X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : Ignored\n\n        Returns\n        -------\n        self : object\n            Returns the instance itself.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data, where n_samples is the number of samples and n_features is the number of features.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"Ignored",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:""},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit_transform",docstring:"Fit the model with X and apply the dimensionality reduction on X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : Ignored\n\n        Returns\n        -------\n        X_new : array-like, shape (n_samples, n_components)\n\n        "},{inputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"cov",docstring:"Estimated covariance of data."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"get_covariance",docstring:"Compute data covariance with the generative model.\n\n        ``cov = components_.T * S**2 * components_ + sigma2 * eye(n_features)``\n        where  S**2 contains the explained variances, and sigma2 contains the\n        noise variances.\n\n        Returns\n        -------\n        cov : array, shape=(n_features, n_features)\n            Estimated covariance of data.\n        "},{inputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"precision",docstring:"Estimated precision of data."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"get_precision",docstring:"Compute data precision matrix with the generative model.\n\n        Equals the inverse of the covariance but computed with\n        the matrix inversion lemma for efficiency.\n\n        Returns\n        -------\n        precision : array, shape=(n_features, n_features)\n            Estimated precision of data.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"New data, where n_samples is the number of samples and n_components is the number of components.",options:null,default_value:null,expected_shape:"(n_samples, n_components)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:[null],name:"X_original array-like, shape (n_samples, n_features)",docstring:""},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"inverse_transform",docstring:"Transform data back to its original space.\n\n        In other words, return an input X_original whose transform would be X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_components)\n            New data, where n_samples is the number of samples\n            and n_components is the number of components.\n\n        Returns\n        -------\n        X_original array-like, shape (n_samples, n_features)\n\n        Notes\n        -----\n        If whitening is enabled, inverse_transform will compute the\n        exact inverse operation, which includes reversing whitening.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"The data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"Ignored",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["float"],name:"ll",docstring:"Average log-likelihood of the samples under the current model"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"score",docstring:'Return the average log-likelihood of all samples.\n\n        See. "Pattern Recognition and Machine Learning"\n        by C. Bishop, 12.2.1 p. 574\n        or http://www.miketipping.com/papers/met-mppca.pdf\n\n        Parameters\n        ----------\n        X : array, shape(n_samples, n_features)\n            The data.\n\n        y : Ignored\n\n        Returns\n        -------\n        ll : float\n            Average log-likelihood of the samples under the current model\n        '},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"The data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"ll",docstring:"Log-likelihood of each sample under the current model"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"score_samples",docstring:'Return the log-likelihood of each sample.\n\n        See. "Pattern Recognition and Machine Learning"\n        by C. Bishop, 12.2.1 p. 574\n        or http://www.miketipping.com/papers/met-mppca.pdf\n\n        Parameters\n        ----------\n        X : array, shape(n_samples, n_features)\n            The data.\n\n        Returns\n        -------\n        ll : array, shape (n_samples,)\n            Log-likelihood of each sample under the current model\n        '},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"New data, where n_samples is the number of samples and n_features is the number of features.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:""},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"transform",docstring:"Apply dimensionality reduction to X.\n\n        X is projected on the first principal components previously extracted\n        from a training set.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            New data, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        Returns\n        -------\n        X_new : array-like, shape (n_samples, n_components)\n\n        Examples\n        --------\n\n        >>> import numpy as np\n        >>> from sklearn.decomposition import IncrementalPCA\n        >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n        >>> ipca = IncrementalPCA(n_components=2, batch_size=3)\n        >>> ipca.fit(X)\n        IncrementalPCA(batch_size=3, copy=True, n_components=2, whiten=False)\n        >>> ipca.transform(X) # doctest: +SKIP\n        "}],docstring:"Principal component analysis (PCA)\n\n    Linear dimensionality reduction using Singular Value Decomposition of the\n    data to project it to a lower dimensional space.\n\n    It uses the LAPACK implementation of the full SVD or a randomized truncated\n    SVD by the method of Halko et al. 2009, depending on the shape of the input\n    data and the number of components to extract.\n\n    It can also use the scipy.sparse.linalg ARPACK implementation of the\n    truncated SVD.\n\n    Notice that this class does not support sparse input. See\n    :class:`TruncatedSVD` for an alternative with sparse data.\n\n    Read more in the :ref:`User Guide <PCA>`.\n\n    Parameters\n    ----------\n    n_components : int, float, None or string\n        Number of components to keep.\n        if n_components is not set all components are kept::\n\n            n_components == min(n_samples, n_features)\n\n        If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's\n        MLE is used to guess the dimension. Use of ``n_components == 'mle'``\n        will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.\n\n        If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the\n        number of components such that the amount of variance that needs to be\n        explained is greater than the percentage specified by n_components.\n\n        If ``svd_solver == 'arpack'``, the number of components must be\n        strictly less than the minimum of n_features and n_samples.\n\n        Hence, the None case results in::\n\n            n_components == min(n_samples, n_features) - 1\n\n    copy : bool (default True)\n        If False, data passed to fit are overwritten and running\n        fit(X).transform(X) will not yield the expected results,\n        use fit_transform(X) instead.\n\n    whiten : bool, optional (default False)\n        When True (False by default) the `components_` vectors are multiplied\n        by the square root of n_samples and then divided by the singular values\n        to ensure uncorrelated outputs with unit component-wise variances.\n\n        Whitening will remove some information from the transformed signal\n        (the relative variance scales of the components) but can sometime\n        improve the predictive accuracy of the downstream estimators by\n        making their data respect some hard-wired assumptions.\n\n    svd_solver : string {'auto', 'full', 'arpack', 'randomized'}\n        auto :\n            the solver is selected by a default policy based on `X.shape` and\n            `n_components`: if the input data is larger than 500x500 and the\n            number of components to extract is lower than 80% of the smallest\n            dimension of the data, then the more efficient 'randomized'\n            method is enabled. Otherwise the exact full SVD is computed and\n            optionally truncated afterwards.\n        full :\n            run exact full SVD calling the standard LAPACK solver via\n            `scipy.linalg.svd` and select the components by postprocessing\n        arpack :\n            run SVD truncated to n_components calling ARPACK solver via\n            `scipy.sparse.linalg.svds`. It requires strictly\n            0 < n_components < min(X.shape)\n        randomized :\n            run randomized SVD by the method of Halko et al.\n\n        .. versionadded:: 0.18.0\n\n    tol : float >= 0, optional (default .0)\n        Tolerance for singular values computed by svd_solver == 'arpack'.\n\n        .. versionadded:: 0.18.0\n\n    iterated_power : int >= 0, or 'auto', (default 'auto')\n        Number of iterations for the power method computed by\n        svd_solver == 'randomized'.\n\n        .. versionadded:: 0.18.0\n\n    random_state : int, RandomState instance or None, optional (default None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`. Used when ``svd_solver`` == 'arpack' or 'randomized'.\n\n        .. versionadded:: 0.18.0\n\n    Attributes\n    ----------\n    components_ : array, shape (n_components, n_features)\n        Principal axes in feature space, representing the directions of\n        maximum variance in the data. The components are sorted by\n        ``explained_variance_``.\n\n    explained_variance_ : array, shape (n_components,)\n        The amount of variance explained by each of the selected components.\n\n        Equal to n_components largest eigenvalues\n        of the covariance matrix of X.\n\n        .. versionadded:: 0.18\n\n    explained_variance_ratio_ : array, shape (n_components,)\n        Percentage of variance explained by each of the selected components.\n\n        If ``n_components`` is not set then all components are stored and the\n        sum of the ratios is equal to 1.0.\n\n    singular_values_ : array, shape (n_components,)\n        The singular values corresponding to each of the selected components.\n        The singular values are equal to the 2-norms of the ``n_components``\n        variables in the lower-dimensional space.\n\n    mean_ : array, shape (n_features,)\n        Per-feature empirical mean, estimated from the training set.\n\n        Equal to `X.mean(axis=0)`.\n\n    n_components_ : int\n        The estimated number of components. When n_components is set\n        to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this\n        number is estimated from input data. Otherwise it equals the parameter\n        n_components, or the lesser value of n_features and n_samples\n        if n_components is None.\n\n    noise_variance_ : float\n        The estimated noise covariance following the Probabilistic PCA model\n        from Tipping and Bishop 1999. See \"Pattern Recognition and\n        Machine Learning\" by C. Bishop, 12.2.1 p. 574 or\n        http://www.miketipping.com/papers/met-mppca.pdf. It is required to\n        compute the estimated data covariance and score samples.\n\n        Equal to the average of (min(n_features, n_samples) - n_components)\n        smallest eigenvalues of the covariance matrix of X.\n\n    References\n    ----------\n    For n_components == 'mle', this class uses the method of `Minka, T. P.\n    \"Automatic choice of dimensionality for PCA\". In NIPS, pp. 598-604`\n\n    Implements the probabilistic PCA model from:\n    `Tipping, M. E., and Bishop, C. M. (1999). \"Probabilistic principal\n    component analysis\". Journal of the Royal Statistical Society:\n    Series B (Statistical Methodology), 61(3), 611-622.\n    via the score and score_samples methods.\n    See http://www.miketipping.com/papers/met-mppca.pdf\n\n    For svd_solver == 'arpack', refer to `scipy.sparse.linalg.svds`.\n\n    For svd_solver == 'randomized', see:\n    `Halko, N., Martinsson, P. G., and Tropp, J. A. (2011).\n    \"Finding structure with randomness: Probabilistic algorithms for\n    constructing approximate matrix decompositions\".\n    SIAM review, 53(2), 217-288.` and also\n    `Martinsson, P. G., Rokhlin, V., and Tygert, M. (2011).\n    \"A randomized algorithm for the decomposition of matrices\".\n    Applied and Computational Harmonic Analysis, 30(1), 47-68.`\n\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.decomposition import PCA\n    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\n    >>> pca = PCA(n_components=2)\n    >>> pca.fit(X)\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\n      svd_solver='auto', tol=0.0, whiten=False)\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\n    [0.9924... 0.0075...]\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\n    [6.30061... 0.54980...]\n\n    >>> pca = PCA(n_components=2, svd_solver='full')\n    >>> pca.fit(X)                 # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\n      svd_solver='full', tol=0.0, whiten=False)\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\n    [0.9924... 0.00755...]\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\n    [6.30061... 0.54980...]\n\n    >>> pca = PCA(n_components=1, svd_solver='arpack')\n    >>> pca.fit(X)\n    PCA(copy=True, iterated_power='auto', n_components=1, random_state=None,\n      svd_solver='arpack', tol=0.0, whiten=False)\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\n    [0.99244...]\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\n    [6.30061...]\n\n    See also\n    --------\n    KernelPCA\n    SparsePCA\n    TruncatedSVD\n    IncrementalPCA\n    ",outputs:[{returned:!1,param_type:["array"],name:"components_",docstring:"Principal axes in feature space, representing the directions of maximum variance in the data. The components are sorted by ``explained_variance_``."},{returned:!1,param_type:["array"],name:"explained_variance_",docstring:"The amount of variance explained by each of the selected components.  Equal to n_components largest eigenvalues of the covariance matrix of X.  .. versionadded:: 0.18"},{returned:!1,param_type:["array"],name:"explained_variance_ratio_",docstring:"Percentage of variance explained by each of the selected components.  If ``n_components`` is not set then all components are stored and the sum of the ratios is equal to 1.0."},{returned:!1,param_type:["array"],name:"singular_values_",docstring:"The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space."},{returned:!1,param_type:["array"],name:"mean_",docstring:"Per-feature empirical mean, estimated from the training set.  Equal to `X.mean(axis=0)`."},{returned:!1,param_type:["int"],name:"n_components_",docstring:"The estimated number of components. When n_components is set to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this number is estimated from input data. Otherwise it equals the parameter n_components, or the lesser value of n_features and n_samples if n_components is None."},{returned:!1,param_type:["float"],name:"noise_variance_",docstring:'The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See "Pattern Recognition and Machine Learning" by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples.  Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X.'}]},{inputs:[{is_optional:!0,param_type:["int"],name:"n_components",docstring:"Desired dimensionality of output data. Must be strictly less than the number of features. The default value is useful for visualisation. For LSA, a value of 100 is recommended.",options:null,default_value:"2",expected_shape:null},{is_optional:!0,param_type:["str"],name:"algorithm",docstring:'SVD solver to use. Either "arpack" for the ARPACK wrapper in SciPy (scipy.sparse.linalg.svds), or "randomized" for the randomized algorithm due to Halko (2009).',options:null,default_value:'"randomized"',expected_shape:null},{is_optional:!0,param_type:["int"],name:"n_iter",docstring:"Number of iterations for randomized SVD solver. Not used by ARPACK. The default is larger than the default in `randomized_svd` to handle sparse matrices that may have large slowly decaying spectrum.",options:null,default_value:"5",expected_shape:null},{is_optional:!0,param_type:["float"],name:"tol",docstring:"Tolerance for ARPACK. 0 means machine precision. Ignored by randomized SVD solver.",options:null,default_value:null,expected_shape:null}],name:"TruncatedSVD",nodes:[],node_functions:[{inputs:[],outputs:[],name:"__init__",docstring:"None"},{inputs:[],outputs:[],name:"_get_param_names",docstring:"Get parameter names for the estimator"},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"Ignored",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit",docstring:"Fit LSI model on training data X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            Training data.\n\n        y : Ignored\n\n        Returns\n        -------\n        self : object\n            Returns the transformer object.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:[null],name:"y",docstring:"Ignored",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:"Reduced version of X. This will always be a dense array."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fit_transform",docstring:"Fit LSI model to X and perform dimensionality reduction on X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            Training data.\n\n        y : Ignored\n\n        Returns\n        -------\n        X_new : array, shape (n_samples, n_components)\n            Reduced version of X. This will always be a dense array.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"New data.",options:null,default_value:null,expected_shape:"(n_samples, n_components)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_original",docstring:"Note that this is always a dense array."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"inverse_transform",docstring:"Transform X back to its original space.\n\n        Returns an array X_original whose transform would be X.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_components)\n            New data.\n\n        Returns\n        -------\n        X_original : array, shape (n_samples, n_features)\n            Note that this is always a dense array.\n        "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"New data.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"X_new",docstring:"Reduced version of X. This will always be a dense array."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"transform",docstring:"Perform dimensionality reduction on X.\n\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            New data.\n\n        Returns\n        -------\n        X_new : array, shape (n_samples, n_components)\n            Reduced version of X. This will always be a dense array.\n        "}],docstring:'Dimensionality reduction using truncated SVD (aka LSA).\n\n    This transformer performs linear dimensionality reduction by means of\n    truncated singular value decomposition (SVD). Contrary to PCA, this\n    estimator does not center the data before computing the singular value\n    decomposition. This means it can work with scipy.sparse matrices\n    efficiently.\n\n    In particular, truncated SVD works on term count/tf-idf matrices as\n    returned by the vectorizers in sklearn.feature_extraction.text. In that\n    context, it is known as latent semantic analysis (LSA).\n\n    This estimator supports two algorithms: a fast randomized SVD solver, and\n    a "naive" algorithm that uses ARPACK as an eigensolver on (X * X.T) or\n    (X.T * X), whichever is more efficient.\n\n    Read more in the :ref:`User Guide <LSA>`.\n\n    Parameters\n    ----------\n    n_components : int, default = 2\n        Desired dimensionality of output data.\n        Must be strictly less than the number of features.\n        The default value is useful for visualisation. For LSA, a value of\n        100 is recommended.\n\n    algorithm : string, default = "randomized"\n        SVD solver to use. Either "arpack" for the ARPACK wrapper in SciPy\n        (scipy.sparse.linalg.svds), or "randomized" for the randomized\n        algorithm due to Halko (2009).\n\n    n_iter : int, optional (default 5)\n        Number of iterations for randomized SVD solver. Not used by ARPACK.\n        The default is larger than the default in `randomized_svd` to handle\n        sparse matrices that may have large slowly decaying spectrum.\n\n    random_state : int, RandomState instance or None, optional, default = None\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    tol : float, optional\n        Tolerance for ARPACK. 0 means machine precision. Ignored by randomized\n        SVD solver.\n\n    Attributes\n    ----------\n    components_ : array, shape (n_components, n_features)\n\n    explained_variance_ : array, shape (n_components,)\n        The variance of the training samples transformed by a projection to\n        each component.\n\n    explained_variance_ratio_ : array, shape (n_components,)\n        Percentage of variance explained by each of the selected components.\n\n    singular_values_ : array, shape (n_components,)\n        The singular values corresponding to each of the selected components.\n        The singular values are equal to the 2-norms of the ``n_components``\n        variables in the lower-dimensional space.\n\n    Examples\n    --------\n    >>> from sklearn.decomposition import TruncatedSVD\n    >>> from sklearn.random_projection import sparse_random_matrix\n    >>> X = sparse_random_matrix(100, 100, density=0.01, random_state=42)\n    >>> svd = TruncatedSVD(n_components=5, n_iter=7, random_state=42)\n    >>> svd.fit(X)  # doctest: +NORMALIZE_WHITESPACE\n    TruncatedSVD(algorithm=\'randomized\', n_components=5, n_iter=7,\n            random_state=42, tol=0.0)\n    >>> print(svd.explained_variance_ratio_)  # doctest: +ELLIPSIS\n    [0.0606... 0.0584... 0.0497... 0.0434... 0.0372...]\n    >>> print(svd.explained_variance_ratio_.sum())  # doctest: +ELLIPSIS\n    0.249...\n    >>> print(svd.singular_values_)  # doctest: +ELLIPSIS\n    [2.5841... 2.5245... 2.3201... 2.1753... 2.0443...]\n\n    See also\n    --------\n    PCA\n\n    References\n    ----------\n    Finding structure with randomness: Stochastic algorithms for constructing\n    approximate matrix decompositions\n    Halko, et al., 2009 (arXiv:909) https://arxiv.org/pdf/0909.4061.pdf\n\n    Notes\n    -----\n    SVD suffers from a problem called "sign indeterminacy", which means the\n    sign of the ``components_`` and the output from transform depend on the\n    algorithm and random state. To work around this, fit instances of this\n    class to data once, then keep the instance around to do transformations.\n\n    ',outputs:[{returned:!1,param_type:["array"],name:"components_",docstring:""},{returned:!1,param_type:["array"],name:"explained_variance_",docstring:"The variance of the training samples transformed by a projection to each component."},{returned:!1,param_type:["array"],name:"explained_variance_ratio_",docstring:"Percentage of variance explained by each of the selected components."},{returned:!1,param_type:["array"],name:"singular_values_",docstring:"The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space."}]}],node_functions:[{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Data matrix.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!1,param_type:["int"],name:"n_components",docstring:"Number of dictionary atoms to extract.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["int"],name:"alpha",docstring:"Sparsity controlling parameter.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["int"],name:"max_iter",docstring:"Maximum number of iterations to perform.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["float"],name:"tol",docstring:"Tolerance for the stopping condition.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"method",docstring:"lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.",options:["lars","cd"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["int",null],name:"n_jobs",docstring:"Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",options:null,default_value:"None",expected_shape:null},{is_optional:!1,param_type:["array"],name:"dict_init",docstring:"Initial value for the dictionary for warm restart scenarios.",options:null,default_value:null,expected_shape:"(n_components, n_features),"},{is_optional:!1,param_type:["array"],name:"code_init",docstring:"Initial value for the sparse code for warm restart scenarios.",options:null,default_value:null,expected_shape:"(n_samples, n_components),"},{is_optional:!0,param_type:["callable",null],name:"callback",docstring:"Callable that gets invoked every five iterations",options:null,default_value:"None",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"verbose",docstring:"To control the verbosity of the procedure.",options:null,default_value:"False",expected_shape:null},{is_optional:!0,param_type:["int",null],name:"random_state",docstring:"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",options:null,default_value:"None",expected_shape:null},{is_optional:!1,param_type:["bool"],name:"return_n_iter",docstring:"Whether or not to return the number of iterations.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"positive_dict",docstring:"Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"positive_code",docstring:"Whether to enforce positivity when finding the code.  .. versionadded:: 0.20",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"code",docstring:"The sparse code factor in the matrix factorization."},{returned:!0,param_type:["array"],name:"dictionary",docstring:"The dictionary factor in the matrix factorization."},{returned:!0,param_type:["array"],name:"errors",docstring:"Vector of errors at each iteration."},{returned:!0,param_type:["int"],name:"n_iter",docstring:"Number of iterations run. Returned only if `return_n_iter` is set to True."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"dict_learning",docstring:"Solves a dictionary learning matrix factorization problem.\n\n    Finds the best dictionary and the corresponding sparse code for\n    approximating the data matrix X by solving::\n\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\n                     (U,V)\n                    with || V_k ||_2 = 1 for all  0 <= k < n_components\n\n    where V is the dictionary and U is the sparse code.\n\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\n\n    Parameters\n    ----------\n    X : array of shape (n_samples, n_features)\n        Data matrix.\n\n    n_components : int,\n        Number of dictionary atoms to extract.\n\n    alpha : int,\n        Sparsity controlling parameter.\n\n    max_iter : int,\n        Maximum number of iterations to perform.\n\n    tol : float,\n        Tolerance for the stopping condition.\n\n    method : {'lars', 'cd'}\n        lars: uses the least angle regression method to solve the lasso problem\n        (linear_model.lars_path)\n        cd: uses the coordinate descent method to compute the\n        Lasso solution (linear_model.Lasso). Lars will be faster if\n        the estimated components are sparse.\n\n    n_jobs : int or None, optional (default=None)\n        Number of parallel jobs to run.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    dict_init : array of shape (n_components, n_features),\n        Initial value for the dictionary for warm restart scenarios.\n\n    code_init : array of shape (n_samples, n_components),\n        Initial value for the sparse code for warm restart scenarios.\n\n    callback : callable or None, optional (default: None)\n        Callable that gets invoked every five iterations\n\n    verbose : bool, optional (default: False)\n        To control the verbosity of the procedure.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    return_n_iter : bool\n        Whether or not to return the number of iterations.\n\n    positive_dict : bool\n        Whether to enforce positivity when finding the dictionary.\n\n        .. versionadded:: 0.20\n\n    positive_code : bool\n        Whether to enforce positivity when finding the code.\n\n        .. versionadded:: 0.20\n\n    Returns\n    -------\n    code : array of shape (n_samples, n_components)\n        The sparse code factor in the matrix factorization.\n\n    dictionary : array of shape (n_components, n_features),\n        The dictionary factor in the matrix factorization.\n\n    errors : array\n        Vector of errors at each iteration.\n\n    n_iter : int\n        Number of iterations run. Returned only if `return_n_iter` is\n        set to True.\n\n    See also\n    --------\n    dict_learning_online\n    DictionaryLearning\n    MiniBatchDictionaryLearning\n    SparsePCA\n    MiniBatchSparsePCA\n    "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Data matrix.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!1,param_type:["int"],name:"n_components",docstring:"Number of dictionary atoms to extract.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["float"],name:"alpha",docstring:"Sparsity controlling parameter.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["int"],name:"n_iter",docstring:"Number of iterations to perform.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"return_code",docstring:"Whether to also return the code U or just the dictionary V.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["array"],name:"dict_init",docstring:"Initial value for the dictionary for warm restart scenarios.",options:null,default_value:null,expected_shape:"(n_components, n_features),"},{is_optional:!0,param_type:["callable",null],name:"callback",docstring:"callable that gets invoked every five iterations",options:null,default_value:"None",expected_shape:null},{is_optional:!1,param_type:["int"],name:"batch_size",docstring:"The number of samples to take in each batch.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"verbose",docstring:"To control the verbosity of the procedure.",options:null,default_value:"False",expected_shape:null},{is_optional:!1,param_type:["bool"],name:"shuffle",docstring:"Whether to shuffle the data before splitting it in batches.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["int",null],name:"n_jobs",docstring:"Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",options:null,default_value:"None",expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"method",docstring:"lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.",options:["lars","cd"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"iter_offset",docstring:"Number of previous iterations completed on the dictionary used for initialization.",options:null,default_value:"0",expected_shape:null},{is_optional:!0,param_type:["int",null],name:"random_state",docstring:"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",options:null,default_value:"None",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"return_inner_stats",docstring:"Return the inner statistics A (dictionary covariance) and B (data approximation). Useful to restart the algorithm in an online setting. If return_inner_stats is True, return_code is ignored",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["array","tuple"],name:"inner_stats",docstring:"Inner sufficient statistics that are kept by the algorithm. Passing them at initialization is useful in online settings, to avoid loosing the history of the evolution. A (n_components, n_components) is the dictionary covariance matrix. B (n_features, n_components) is the data approximation matrix",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"return_n_iter",docstring:"Whether or not to return the number of iterations.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"positive_dict",docstring:"Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["bool"],name:"positive_code",docstring:"Whether to enforce positivity when finding the code.  .. versionadded:: 0.20",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"code",docstring:"the sparse code (only returned if `return_code=True`)"},{returned:!0,param_type:["array"],name:"dictionary",docstring:"the solutions to the dictionary learning problem"},{returned:!0,param_type:["int"],name:"n_iter",docstring:"Number of iterations run. Returned only if `return_n_iter` is set to `True`."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"dict_learning_online",docstring:"Solves a dictionary learning matrix factorization problem online.\n\n    Finds the best dictionary and the corresponding sparse code for\n    approximating the data matrix X by solving::\n\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\n                     (U,V)\n                     with || V_k ||_2 = 1 for all  0 <= k < n_components\n\n    where V is the dictionary and U is the sparse code. This is\n    accomplished by repeatedly iterating over mini-batches by slicing\n    the input data.\n\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\n\n    Parameters\n    ----------\n    X : array of shape (n_samples, n_features)\n        Data matrix.\n\n    n_components : int,\n        Number of dictionary atoms to extract.\n\n    alpha : float,\n        Sparsity controlling parameter.\n\n    n_iter : int,\n        Number of iterations to perform.\n\n    return_code : boolean,\n        Whether to also return the code U or just the dictionary V.\n\n    dict_init : array of shape (n_components, n_features),\n        Initial value for the dictionary for warm restart scenarios.\n\n    callback : callable or None, optional (default: None)\n        callable that gets invoked every five iterations\n\n    batch_size : int,\n        The number of samples to take in each batch.\n\n    verbose : bool, optional (default: False)\n        To control the verbosity of the procedure.\n\n    shuffle : boolean,\n        Whether to shuffle the data before splitting it in batches.\n\n    n_jobs : int or None, optional (default=None)\n        Number of parallel jobs to run.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    method : {'lars', 'cd'}\n        lars: uses the least angle regression method to solve the lasso problem\n        (linear_model.lars_path)\n        cd: uses the coordinate descent method to compute the\n        Lasso solution (linear_model.Lasso). Lars will be faster if\n        the estimated components are sparse.\n\n    iter_offset : int, default 0\n        Number of previous iterations completed on the dictionary used for\n        initialization.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    return_inner_stats : boolean, optional\n        Return the inner statistics A (dictionary covariance) and B\n        (data approximation). Useful to restart the algorithm in an\n        online setting. If return_inner_stats is True, return_code is\n        ignored\n\n    inner_stats : tuple of (A, B) ndarrays\n        Inner sufficient statistics that are kept by the algorithm.\n        Passing them at initialization is useful in online settings, to\n        avoid loosing the history of the evolution.\n        A (n_components, n_components) is the dictionary covariance matrix.\n        B (n_features, n_components) is the data approximation matrix\n\n    return_n_iter : bool\n        Whether or not to return the number of iterations.\n\n    positive_dict : bool\n        Whether to enforce positivity when finding the dictionary.\n\n        .. versionadded:: 0.20\n\n    positive_code : bool\n        Whether to enforce positivity when finding the code.\n\n        .. versionadded:: 0.20\n\n    Returns\n    -------\n    code : array of shape (n_samples, n_components),\n        the sparse code (only returned if `return_code=True`)\n\n    dictionary : array of shape (n_components, n_features),\n        the solutions to the dictionary learning problem\n\n    n_iter : int\n        Number of iterations run. Returned only if `return_n_iter` is\n        set to `True`.\n\n    See also\n    --------\n    dict_learning\n    DictionaryLearning\n    MiniBatchDictionaryLearning\n    SparsePCA\n    MiniBatchSparsePCA\n\n    "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Training vector, where n_samples is the number of samples and n_features is the number of features.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!0,param_type:["int"],name:"n_components",docstring:"Number of components to extract. If None no dimension reduction is performed.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["LIST_VALID_OPTIONS"],name:"algorithm",docstring:"Apply a parallel or deflational FASTICA algorithm.",options:["parallel","deflation","optional"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"whiten",docstring:"If True perform an initial whitening of the data. If False, the data is assumed to have already been preprocessed: it should be centered, normed and white. Otherwise you will get incorrect results. In this case the parameter n_components will be ignored.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["str"],name:"fun",docstring:"The functional form of the G function used in the approximation to neg-entropy. Could be either 'logcosh', 'exp', or 'cube'. You can also provide your own function. It should return a tuple containing the value of the function, and of its derivative, in the point. The derivative should be averaged along its last dimension. Example:  def my_g(x):     return x ** 3, np.mean(3 * x ** 2, axis=-1)",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["dict"],name:"fun_args",docstring:"Arguments to send to the functional form. If empty or None and if fun='logcosh', fun_args will take value {'alpha' : 1.0}",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"max_iter",docstring:"Maximum number of iterations to perform.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["float"],name:"tol",docstring:"A positive scalar giving the tolerance at which the un-mixing matrix is considered to have converged.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["array"],name:"w_init",docstring:"Initial un-mixing array of dimension (n.comp,n.comp). If None (default) then an array of normal r.v.'s is used.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["int",null],name:"random_state",docstring:"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",options:null,default_value:"None",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"return_X_mean",docstring:"If True, X_mean is returned too.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"compute_sources",docstring:"If False, sources are not computed, but only the rotation matrix. This can save memory when working with big data. Defaults to True.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"return_n_iter",docstring:"Whether or not to return the number of iterations.",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["LIST_VALID_OPTIONS","array",null],name:"K",docstring:"If whiten is 'True', K is the pre-whitening matrix that projects data onto the first n_components principal components. If whiten is 'False', K is 'None'."},{returned:!0,param_type:["array"],name:"W",docstring:"Estimated un-mixing matrix. The mixing matrix can be obtained by::      w = np.dot(W, K.T)     A = w.T * (w * w.T).I"},{returned:!0,param_type:["LIST_VALID_OPTIONS","array",null],name:"S",docstring:"Estimated source matrix"},{returned:!0,param_type:["array"],name:"X_mean",docstring:"The mean over features. Returned only if return_X_mean is True."},{returned:!0,param_type:["int"],name:"n_iter",docstring:'If the algorithm is "deflation", n_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge. This is returned only when return_n_iter is set to `True`.'},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"fastica",docstring:"Perform Fast Independent Component Analysis.\n\n    Read more in the :ref:`User Guide <ICA>`.\n\n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features)\n        Training vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    n_components : int, optional\n        Number of components to extract. If None no dimension reduction\n        is performed.\n\n    algorithm : {'parallel', 'deflation'}, optional\n        Apply a parallel or deflational FASTICA algorithm.\n\n    whiten : boolean, optional\n        If True perform an initial whitening of the data.\n        If False, the data is assumed to have already been\n        preprocessed: it should be centered, normed and white.\n        Otherwise you will get incorrect results.\n        In this case the parameter n_components will be ignored.\n\n    fun : string or function, optional. Default: 'logcosh'\n        The functional form of the G function used in the\n        approximation to neg-entropy. Could be either 'logcosh', 'exp',\n        or 'cube'.\n        You can also provide your own function. It should return a tuple\n        containing the value of the function, and of its derivative, in the\n        point. The derivative should be averaged along its last dimension.\n        Example:\n\n        def my_g(x):\n            return x ** 3, np.mean(3 * x ** 2, axis=-1)\n\n    fun_args : dictionary, optional\n        Arguments to send to the functional form.\n        If empty or None and if fun='logcosh', fun_args will take value\n        {'alpha' : 1.0}\n\n    max_iter : int, optional\n        Maximum number of iterations to perform.\n\n    tol : float, optional\n        A positive scalar giving the tolerance at which the\n        un-mixing matrix is considered to have converged.\n\n    w_init : (n_components, n_components) array, optional\n        Initial un-mixing array of dimension (n.comp,n.comp).\n        If None (default) then an array of normal r.v.'s is used.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    return_X_mean : bool, optional\n        If True, X_mean is returned too.\n\n    compute_sources : bool, optional\n        If False, sources are not computed, but only the rotation matrix.\n        This can save memory when working with big data. Defaults to True.\n\n    return_n_iter : bool, optional\n        Whether or not to return the number of iterations.\n\n    Returns\n    -------\n    K : array, shape (n_components, n_features) | None.\n        If whiten is 'True', K is the pre-whitening matrix that projects data\n        onto the first n_components principal components. If whiten is 'False',\n        K is 'None'.\n\n    W : array, shape (n_components, n_components)\n        Estimated un-mixing matrix.\n        The mixing matrix can be obtained by::\n\n            w = np.dot(W, K.T)\n            A = w.T * (w * w.T).I\n\n    S : array, shape (n_samples, n_components) | None\n        Estimated source matrix\n\n    X_mean : array, shape (n_features, )\n        The mean over features. Returned only if return_X_mean is True.\n\n    n_iter : int\n        If the algorithm is \"deflation\", n_iter is the\n        maximum number of iterations run across all components. Else\n        they are just the number of iterations taken to converge. This is\n        returned only when return_n_iter is set to `True`.\n\n    Notes\n    -----\n\n    The data matrix X is considered to be a linear combination of\n    non-Gaussian (independent) components i.e. X = AS where columns of S\n    contain the independent components and A is a linear mixing\n    matrix. In short ICA attempts to `un-mix' the data by estimating an\n    un-mixing matrix W where ``S = W K X.``\n\n    This implementation was originally made for data of shape\n    [n_features, n_samples]. Now the input is transposed\n    before the algorithm is applied. This makes it slightly\n    faster for Fortran-ordered input.\n\n    Implemented using FastICA:\n    `A. Hyvarinen and E. Oja, Independent Component Analysis:\n    Algorithms and Applications, Neural Networks, 13(4-5), 2000,\n    pp. 411-430`\n\n    "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Constant matrix.",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!1,param_type:["array"],name:"W",docstring:"If init='custom', it is used as initial guess for the solution.",options:null,default_value:null,expected_shape:"(n_samples, n_components)"},{is_optional:!1,param_type:["array"],name:"H",docstring:"If init='custom', it is used as initial guess for the solution. If update_H=False, it is used as a constant, to solve for W only.",options:null,default_value:null,expected_shape:"(n_components, n_features)"},{is_optional:!1,param_type:["int"],name:"n_components",docstring:"Number of components, if n_components is not set all features are kept.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS",null],name:"init",docstring:"Method used to initialize the procedure. Default: 'random'. Valid options:  - 'random': non-negative random matrices, scaled with:     sqrt(X.mean() / n_components)  - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)     initialization (better for sparseness)  - 'nndsvda': NNDSVD with zeros filled with the average of X     (better when sparsity is not desired)  - 'nndsvdar': NNDSVD with zeros filled with small random values     (generally faster, less accurate alternative to NNDSVDa     for when sparsity is not desired)  - 'custom': use custom matrices W and H",options:[" None "," 'random' "," 'nndsvd' "," 'nndsvda' "," 'nndsvdar' "," 'custom"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"update_H",docstring:"Set to True, both W and H will be estimated from initial guesses. Set to False, only W will be estimated.",options:null,default_value:"True",expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"solver",docstring:"Numerical solver to use: 'cd' is a Coordinate Descent solver that uses Fast Hierarchical     Alternating Least Squares (Fast HALS). 'mu' is a Multiplicative Update solver.  .. versionadded:: 0.17    Coordinate Descent solver.  .. versionadded:: 0.19    Multiplicative Update solver.",options:["cd' "," 'mu"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["float","str"],name:"beta_loss",docstring:"String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}. Beta divergence to be minimized, measuring the distance between X and the dot product WH. Note that values different from 'frobenius' (or 2) and 'kullback-leibler' (or 1) lead to significantly slower fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input matrix X cannot contain zeros. Used only in 'mu' solver.  .. versionadded:: 0.19",options:null,default_value:"frobenius",expected_shape:null},{is_optional:!0,param_type:["float"],name:"tol",docstring:"Tolerance of the stopping condition.",options:null,default_value:"1e-4",expected_shape:null},{is_optional:!0,param_type:["int"],name:"max_iter",docstring:"Maximum number of iterations before timing out.",options:null,default_value:"200",expected_shape:null},{is_optional:!0,param_type:["float"],name:"alpha",docstring:"Constant that multiplies the regularization terms.",options:null,default_value:"0.",expected_shape:null},{is_optional:!0,param_type:["float"],name:"l1_ratio",docstring:"The regularization mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.",options:null,default_value:"0.",expected_shape:null},{is_optional:!1,param_type:["LIST_VALID_OPTIONS",null],name:"regularization",docstring:"Select whether the regularization affects the components (H), the transformation (W), both or none of them.",options:["both' "," 'components' "," 'transformation' "," None"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["int",null],name:"random_state",docstring:"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",options:null,default_value:"None",expected_shape:null},{is_optional:!0,param_type:["int"],name:"verbose",docstring:"The verbosity level.",options:null,default_value:"0",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"shuffle",docstring:"If true, randomize the order of coordinates in the CD solver.",options:null,default_value:"False",expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"W",docstring:"Solution to the non-negative least squares problem."},{returned:!0,param_type:["array"],name:"H",docstring:"Solution to the non-negative least squares problem."},{returned:!0,param_type:["int"],name:"n_iter",docstring:"Actual number of iterations."},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"non_negative_factorization",docstring:"Compute Non-negative Matrix Factorization (NMF)\n\n    Find two non-negative matrices (W, H) whose product approximates the non-\n    negative matrix X. This factorization can be used for example for\n    dimensionality reduction, source separation or topic extraction.\n\n    The objective function is::\n\n        0.5 * ||X - WH||_Fro^2\n        + alpha * l1_ratio * ||vec(W)||_1\n        + alpha * l1_ratio * ||vec(H)||_1\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\n        + 0.5 * alpha * (1 - l1_ratio) * ||H||_Fro^2\n\n    Where::\n\n        ||A||_Fro^2 = \\sum_{i,j} A_{ij}^2 (Frobenius norm)\n        ||vec(A)||_1 = \\sum_{i,j} abs(A_{ij}) (Elementwise L1 norm)\n\n    For multiplicative-update ('mu') solver, the Frobenius norm\n    (0.5 * ||X - WH||_Fro^2) can be changed into another beta-divergence loss,\n    by changing the beta_loss parameter.\n\n    The objective function is minimized with an alternating minimization of W\n    and H. If H is given and update_H=False, it solves for W only.\n\n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features)\n        Constant matrix.\n\n    W : array-like, shape (n_samples, n_components)\n        If init='custom', it is used as initial guess for the solution.\n\n    H : array-like, shape (n_components, n_features)\n        If init='custom', it is used as initial guess for the solution.\n        If update_H=False, it is used as a constant, to solve for W only.\n\n    n_components : integer\n        Number of components, if n_components is not set all features\n        are kept.\n\n    init :  None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'\n        Method used to initialize the procedure.\n        Default: 'random'.\n        Valid options:\n\n        - 'random': non-negative random matrices, scaled with:\n            sqrt(X.mean() / n_components)\n\n        - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)\n            initialization (better for sparseness)\n\n        - 'nndsvda': NNDSVD with zeros filled with the average of X\n            (better when sparsity is not desired)\n\n        - 'nndsvdar': NNDSVD with zeros filled with small random values\n            (generally faster, less accurate alternative to NNDSVDa\n            for when sparsity is not desired)\n\n        - 'custom': use custom matrices W and H\n\n    update_H : boolean, default: True\n        Set to True, both W and H will be estimated from initial guesses.\n        Set to False, only W will be estimated.\n\n    solver : 'cd' | 'mu'\n        Numerical solver to use:\n        'cd' is a Coordinate Descent solver that uses Fast Hierarchical\n            Alternating Least Squares (Fast HALS).\n        'mu' is a Multiplicative Update solver.\n\n        .. versionadded:: 0.17\n           Coordinate Descent solver.\n\n        .. versionadded:: 0.19\n           Multiplicative Update solver.\n\n    beta_loss : float or string, default 'frobenius'\n        String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}.\n        Beta divergence to be minimized, measuring the distance between X\n        and the dot product WH. Note that values different from 'frobenius'\n        (or 2) and 'kullback-leibler' (or 1) lead to significantly slower\n        fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input\n        matrix X cannot contain zeros. Used only in 'mu' solver.\n\n        .. versionadded:: 0.19\n\n    tol : float, default: 1e-4\n        Tolerance of the stopping condition.\n\n    max_iter : integer, default: 200\n        Maximum number of iterations before timing out.\n\n    alpha : double, default: 0.\n        Constant that multiplies the regularization terms.\n\n    l1_ratio : double, default: 0.\n        The regularization mixing parameter, with 0 <= l1_ratio <= 1.\n        For l1_ratio = 0 the penalty is an elementwise L2 penalty\n        (aka Frobenius Norm).\n        For l1_ratio = 1 it is an elementwise L1 penalty.\n        For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\n\n    regularization : 'both' | 'components' | 'transformation' | None\n        Select whether the regularization affects the components (H), the\n        transformation (W), both or none of them.\n\n    random_state : int, RandomState instance or None, optional, default: None\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    verbose : integer, default: 0\n        The verbosity level.\n\n    shuffle : boolean, default: False\n        If true, randomize the order of coordinates in the CD solver.\n\n    Returns\n    -------\n    W : array-like, shape (n_samples, n_components)\n        Solution to the non-negative least squares problem.\n\n    H : array-like, shape (n_components, n_features)\n        Solution to the non-negative least squares problem.\n\n    n_iter : int\n        Actual number of iterations.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> X = np.array([[1,1], [2, 1], [3, 1.2], [4, 1], [5, 0.8], [6, 1]])\n    >>> from sklearn.decomposition import non_negative_factorization\n    >>> W, H, n_iter = non_negative_factorization(X, n_components=2,\n    ... init='random', random_state=0)\n\n    References\n    ----------\n    Cichocki, Andrzej, and P. H. A. N. Anh-Huy. \"Fast local algorithms for\n    large scale nonnegative matrix and tensor factorizations.\"\n    IEICE transactions on fundamentals of electronics, communications and\n    computer sciences 92.3: 708-721, 2009.\n\n    Fevotte, C., & Idier, J. (2011). Algorithms for nonnegative matrix\n    factorization with the beta-divergence. Neural Computation, 23(9).\n    "},{inputs:[{is_optional:!1,param_type:["array"],name:"M",docstring:"Matrix to decompose",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["int"],name:"n_components",docstring:"Number of singular values and vectors to extract.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"n_oversamples",docstring:"Additional number of random vectors to sample the range of M so as to ensure proper conditioning. The total number of random vectors used to find the range of M is n_components + n_oversamples. Smaller number can improve speed but can negatively impact the quality of approximation of singular vectors and singular values.",options:null,default_value:"10",expected_shape:null},{is_optional:!0,param_type:["int"],name:"n_iter",docstring:"Number of power iterations. It can be used to deal with very noisy problems. When 'auto', it is set to 4, unless `n_components` is small (< .1 * min(X.shape)) `n_iter` in which case is set to 7. This improves precision with few components.  .. versionchanged:: 0.18",options:null,default_value:"auto",expected_shape:null},{is_optional:!0,param_type:[null],name:"power_iteration_normalizer",docstring:"Whether the power iterations are normalized with step-by-step QR factorization (the slowest but most accurate), 'none' (the fastest but numerically unstable when `n_iter` is large, e.g. typically 5 or larger), or 'LU' factorization (numerically stable but can lose slightly in accuracy). The 'auto' mode applies no normalization if `n_iter` <= 2 and switches to LU otherwise.  .. versionadded:: 0.18",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:[null],name:"transpose",docstring:"Whether the algorithm should be applied to M.T instead of M. The result should approximately be the same. The 'auto' mode will trigger the transposition if M.shape[1] > M.shape[0] since this implementation of randomized SVD tend to be a little faster in that case.  .. versionchanged:: 0.18",options:null,default_value:"",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"flip_sign",docstring:"The output of a singular value decomposition is only unique up to a permutation of the signs of the singular vectors. If `flip_sign` is set to `True`, the sign ambiguity is resolved by making the largest loadings for each component in the left singular vectors positive.",options:null,default_value:"",expected_shape:null},{is_optional:!0,param_type:["int",null],name:"random_state",docstring:"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",options:null,default_value:"None",expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"randomized_svd",docstring:"Computes a truncated randomized SVD\n\n    Parameters\n    ----------\n    M : ndarray or sparse matrix\n        Matrix to decompose\n\n    n_components : int\n        Number of singular values and vectors to extract.\n\n    n_oversamples : int (default is 10)\n        Additional number of random vectors to sample the range of M so as\n        to ensure proper conditioning. The total number of random vectors\n        used to find the range of M is n_components + n_oversamples. Smaller\n        number can improve speed but can negatively impact the quality of\n        approximation of singular vectors and singular values.\n\n    n_iter : int or 'auto' (default is 'auto')\n        Number of power iterations. It can be used to deal with very noisy\n        problems. When 'auto', it is set to 4, unless `n_components` is small\n        (< .1 * min(X.shape)) `n_iter` in which case is set to 7.\n        This improves precision with few components.\n\n        .. versionchanged:: 0.18\n\n    power_iteration_normalizer : 'auto' (default), 'QR', 'LU', 'none'\n        Whether the power iterations are normalized with step-by-step\n        QR factorization (the slowest but most accurate), 'none'\n        (the fastest but numerically unstable when `n_iter` is large, e.g.\n        typically 5 or larger), or 'LU' factorization (numerically stable\n        but can lose slightly in accuracy). The 'auto' mode applies no\n        normalization if `n_iter` <= 2 and switches to LU otherwise.\n\n        .. versionadded:: 0.18\n\n    transpose : True, False or 'auto' (default)\n        Whether the algorithm should be applied to M.T instead of M. The\n        result should approximately be the same. The 'auto' mode will\n        trigger the transposition if M.shape[1] > M.shape[0] since this\n        implementation of randomized SVD tend to be a little faster in that\n        case.\n\n        .. versionchanged:: 0.18\n\n    flip_sign : boolean, (True by default)\n        The output of a singular value decomposition is only unique up to a\n        permutation of the signs of the singular vectors. If `flip_sign` is\n        set to `True`, the sign ambiguity is resolved by making the largest\n        loadings for each component in the left singular vectors positive.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        The seed of the pseudo random number generator to use when shuffling\n        the data.  If int, random_state is the seed used by the random number\n        generator; If RandomState instance, random_state is the random number\n        generator; If None, the random number generator is the RandomState\n        instance used by `np.random`.\n\n    Notes\n    -----\n    This algorithm finds a (usually very good) approximate truncated\n    singular value decomposition using randomization to speed up the\n    computations. It is particularly fast on large matrices on which\n    you wish to extract only a small number of components. In order to\n    obtain further speed up, `n_iter` can be set <=2 (at the cost of\n    loss of precision).\n\n    References\n    ----------\n    * Finding structure with randomness: Stochastic algorithms for constructing\n      approximate matrix decompositions\n      Halko, et al., 2009 https://arxiv.org/abs/0909.4061\n\n    * A randomized algorithm for the decomposition of matrices\n      Per-Gunnar Martinsson, Vladimir Rokhlin and Mark Tygert\n\n    * An implementation of a randomized algorithm for principal component\n      analysis\n      A. Szlam et al. 2014\n    "},{inputs:[{is_optional:!1,param_type:["array"],name:"X",docstring:"Data matrix",options:null,default_value:null,expected_shape:"(n_samples, n_features)"},{is_optional:!1,param_type:["array"],name:"dictionary",docstring:"The dictionary matrix against which to solve the sparse coding of the data. Some of the algorithms assume normalized rows for meaningful output.",options:null,default_value:null,expected_shape:"(n_components, n_features)"},{is_optional:!1,param_type:["array"],name:"gram",docstring:"Precomputed Gram matrix, dictionary * dictionary'",options:null,default_value:null,expected_shape:"(n_components, n_components)"},{is_optional:!1,param_type:["array"],name:"cov",docstring:"Precomputed covariance, dictionary' * X",options:null,default_value:null,expected_shape:"(n_components, n_samples)"},{is_optional:!1,param_type:["LIST_VALID_OPTIONS"],name:"algorithm",docstring:"lars: uses the least angle regression method (linear_model.lars_path) lasso_lars: uses Lars to compute the Lasso solution lasso_cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). lasso_lars will be faster if the estimated components are sparse. omp: uses orthogonal matching pursuit to estimate the sparse solution threshold: squashes to zero all coefficients less than alpha from the projection dictionary * X'",options:["lasso_lars","lasso_cd","lars","omp","threshold"],default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"n_nonzero_coefs",docstring:"Number of nonzero coefficients to target in each column of the solution. This is only used by `algorithm='lars'` and `algorithm='omp'` and is overridden by `alpha` in the `omp` case.",options:null,default_value:"",expected_shape:null},{is_optional:!0,param_type:["float"],name:"alpha",docstring:"If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the penalty applied to the L1 norm. If `algorithm='threshold'`, `alpha` is the absolute value of the threshold below which coefficients will be squashed to zero. If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides `n_nonzero_coefs`.",options:null,default_value:"",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"copy_cov",docstring:"Whether to copy the precomputed covariance matrix; if False, it may be overwritten.",options:null,default_value:null,expected_shape:null},{is_optional:!1,param_type:["array"],name:"init",docstring:"Initialization value of the sparse codes. Only used if `algorithm='lasso_cd'`.",options:null,default_value:null,expected_shape:"(n_samples, n_components)"},{is_optional:!0,param_type:["int"],name:"max_iter",docstring:"Maximum number of iterations to perform if `algorithm='lasso_cd'`.",options:null,default_value:"",expected_shape:null},{is_optional:!0,param_type:["int",null],name:"n_jobs",docstring:"Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",options:null,default_value:"None",expected_shape:null},{is_optional:!0,param_type:["bool"],name:"check_input",docstring:"If False, the input arrays X and dictionary will not be checked.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["int"],name:"verbose",docstring:"Controls the verbosity; the higher, the more messages. Defaults to 0.",options:null,default_value:null,expected_shape:null},{is_optional:!0,param_type:["bool"],name:"positive",docstring:"Whether to enforce positivity when finding the encoding.  .. versionadded:: 0.20",options:null,default_value:null,expected_shape:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{returned:!0,param_type:["array"],name:"code",docstring:"The sparse codes"},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}],name:"sparse_encode",docstring:"Sparse coding\n\n    Each row of the result is the solution to a sparse coding problem.\n    The goal is to find a sparse array `code` such that::\n\n        X ~= code * dictionary\n\n    Read more in the :ref:`User Guide <SparseCoder>`.\n\n    Parameters\n    ----------\n    X : array of shape (n_samples, n_features)\n        Data matrix\n\n    dictionary : array of shape (n_components, n_features)\n        The dictionary matrix against which to solve the sparse coding of\n        the data. Some of the algorithms assume normalized rows for meaningful\n        output.\n\n    gram : array, shape=(n_components, n_components)\n        Precomputed Gram matrix, dictionary * dictionary'\n\n    cov : array, shape=(n_components, n_samples)\n        Precomputed covariance, dictionary' * X\n\n    algorithm : {'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}\n        lars: uses the least angle regression method (linear_model.lars_path)\n        lasso_lars: uses Lars to compute the Lasso solution\n        lasso_cd: uses the coordinate descent method to compute the\n        Lasso solution (linear_model.Lasso). lasso_lars will be faster if\n        the estimated components are sparse.\n        omp: uses orthogonal matching pursuit to estimate the sparse solution\n        threshold: squashes to zero all coefficients less than alpha from\n        the projection dictionary * X'\n\n    n_nonzero_coefs : int, 0.1 * n_features by default\n        Number of nonzero coefficients to target in each column of the\n        solution. This is only used by `algorithm='lars'` and `algorithm='omp'`\n        and is overridden by `alpha` in the `omp` case.\n\n    alpha : float, 1. by default\n        If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\n        penalty applied to the L1 norm.\n        If `algorithm='threshold'`, `alpha` is the absolute value of the\n        threshold below which coefficients will be squashed to zero.\n        If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of\n        the reconstruction error targeted. In this case, it overrides\n        `n_nonzero_coefs`.\n\n    copy_cov : boolean, optional\n        Whether to copy the precomputed covariance matrix; if False, it may be\n        overwritten.\n\n    init : array of shape (n_samples, n_components)\n        Initialization value of the sparse codes. Only used if\n        `algorithm='lasso_cd'`.\n\n    max_iter : int, 1000 by default\n        Maximum number of iterations to perform if `algorithm='lasso_cd'`.\n\n    n_jobs : int or None, optional (default=None)\n        Number of parallel jobs to run.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    check_input : boolean, optional\n        If False, the input arrays X and dictionary will not be checked.\n\n    verbose : int, optional\n        Controls the verbosity; the higher, the more messages. Defaults to 0.\n\n    positive : boolean, optional\n        Whether to enforce positivity when finding the encoding.\n\n        .. versionadded:: 0.20\n\n    Returns\n    -------\n    code : array of shape (n_samples, n_components)\n        The sparse codes\n\n    See also\n    --------\n    sklearn.linear_model.lars_path\n    sklearn.linear_model.orthogonal_mp\n    sklearn.linear_model.Lasso\n    SparseCoder\n    "}],docstring:"",outputs:[]},Sm={name:"chemml.chem",docstring:"",inputs:[],outputs:[],node_functions:[{name:"atom_features",docstring:"This function encodes the RDKit atom to a binary vector.\n\n    Parameters\n    ----------\n    bond : rdkit.Chem.rdchem.Bond\n        The bond must be an RDKit Bond object.\n\n    Returns\n    -------\n    features : array\n        A binary array with length 6 that specifies the type of bond, if it is\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\n\n    ",inputs:[{name:"bond",docstring:"The bond must be an RDKit Bond object.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"features",docstring:"A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.",param_type:["array"],returned:!0}]},{name:"bond_features",docstring:"This function encodes the RDKit bond to a binary vector.\n\n    Parameters\n    ----------\n    bond : rdkit.Chem.rdchem.Bond\n        The bond must be an RDKit Bond object.\n\n    Returns\n    -------\n    features : array\n        A binary array with length 6 that specifies the type of bond, if it is\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\n\n    ",inputs:[{name:"bond",docstring:"The bond must be an RDKit Bond object.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"features",docstring:"A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.",param_type:["array"],returned:!0}]},{name:"num_atom_features",docstring:"This function returns the number of atomic features that are available by this module.\n\n    Returns\n    -------\n    n_features : int\n        length of atomic feature vector.\n    ",inputs:[],outputs:[{name:"n_features",docstring:"length of atomic feature vector.",param_type:["int"],returned:!0}]},{name:"num_bond_features",docstring:"This function returns the number of bond features that are available by this module.\n\n    Returns\n    -------\n    n_features : int\n        length of bond feature vector.\n    ",inputs:[],outputs:[{name:"n_features",docstring:"length of bond feature vector.",param_type:["int"],returned:!0}]},{name:"tensorise_molecules",docstring:"Takes a list of molecules and provides tensor representation of atom and bond features.\n    This representation is based on the \"convolutional networks on graphs for learning molecular fingerprints\" by\n    David Duvenaud et al., NIPS 2015.\n\n    Parameters\n    ----------\n    molecules : chemml.chem.Molecule object or array\n        If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError.\n        In addition, all the molecule objects must provide the SMILES representation.\n        We try to create the SMILES representation if it's not available.\n\n    max_degree : int, optional (default=5)\n        The maximum number of neighbour per atom that each molecule can have\n        (to which all molecules will be padded), use 'None' for auto\n\n    max_atoms : int, optional (default=None)\n        The maximum number of atoms per molecule (to which all\n        molecules will be padded), use 'None' for auto\n\n    n_jobs : int, optional(default=-1)\n        The number of parallel processes. If -1, uses all the available processes.\n\n    batch_size : int, optional(default=3000)\n        The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays\n\n    verbose : bool, optional(default=True)\n        The verbosity of messages.\n\n    Notes\n    -----\n        It is not recommended to set max_degree to `None`/auto when\n        using `NeuralGraph` layers. Max_degree determines the number of\n        trainable parameters and is essentially a hyperparameter.\n        While models can be rebuilt using different `max_atoms`, they cannot\n        be rebuild for different values of `max_degree`, as the architecture\n        will be different.\n\n        For organic molecules `max_degree=5` is a good value (Duvenaud et. al, 2015)\n\n\n    Returns\n    -------\n        atoms : array\n            An atom feature array of shape (molecules, max_atoms, atom_features)\n        bonds : array\n            A bonds array of shape (molecules, max_atoms, max_degree)\n        edges : array\n        A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)\n    ",inputs:[{name:"molecules",docstring:"If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the SMILES representation. We try to create the SMILES representation if it's not available.",param_type:["array","object"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"max_degree",docstring:"The maximum number of neighbour per atom that each molecule can have (to which all molecules will be padded), use 'None' for auto",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"5",options:null},{name:"max_atoms",docstring:"The maximum number of atoms per molecule (to which all molecules will be padded), use 'None' for auto",param_type:["int",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"n_jobs",docstring:"The number of parallel processes. If -1, uses all the available processes.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null},{name:"batch_size",docstring:"The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"3000",options:null},{name:"verbose",docstring:"The verbosity of messages.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"atoms",docstring:"An atom feature array of shape (molecules, max_atoms, atom_features)",param_type:["array"],returned:!0},{name:"bonds",docstring:"A bonds array of shape (molecules, max_atoms, max_degree)",param_type:["array"],returned:!0},{name:"edges",docstring:"edges : array A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)",param_type:["array"],returned:!0}]}],nodes:[{name:"BagofBonds",docstring:"\n    The implementation of bag of bonds version of coulomb matrix by katja Hansen et. al. 2015, JPCL.",inputs:[{name:"const",docstring:"The constant value for coordinates unit conversion to atomic unit if const=1.0, returns atomic unit if const=0.529, returns Angstrom  const/|Ri-Rj|, which denominator is the euclidean distance between two atoms",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1.0",options:null},{name:"n_jobs",docstring:"The number of parallel processes. If -1, uses all the available processes.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null},{name:"verbose",docstring:"The verbosity of messages.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"header_",docstring:"contains one nuclear charge (represents single atom) or a tuple of two nuclear charges (represents a bond)",param_type:["list"],returned:!1}],node_functions:[{name:"represent",docstring:"\n        provides bag of bonds representation for input molecules.",inputs:[{name:"molecules",docstring:"If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.",param_type:["array","object"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"features",docstring:"The bag of bond features.",param_type:[null],returned:!0}]}],nodes:[]},{name:"CoulombMatrix",docstring:"\n    The implementation of coulomb matrix descriptors by Matthias Rupp et. al. 2012, PRL (All 3 different variations).",inputs:[{name:"cm_type",docstring:"The coulomb matrix type, one of the following types:     * 'Unsorted_Matrix' or 'UM'     * 'Unsorted_Triangular' or 'UT'     * 'Eigenspectrum' or 'E'      * 'Sorted_Coulomb' or 'SC'     * 'Random_Coulomb' or 'RC'",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"SC",options:["UM","UT","E","SC","RC"]},{name:"max_n_atoms",docstring:"Set the maximum number of atoms per molecule (to which all representations will be padded). If 'auto', we find it based on all input molecules.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"auto",options:null},{name:"nPerm",docstring:"Number of permutation of coulomb matrix per molecule for Random_Coulomb (RC)  type of representation.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"3",options:null},{name:"const",docstring:"The constant value for coordinates unit conversion to atomic unit example: atomic unit -> const=1, Angstrom -> const=0.529 const/|Ri-Rj|, which denominator is the euclidean distance between atoms i and j",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"1",options:null},{name:"n_jobs",docstring:"The number of parallel processes. If -1, uses all the available processes.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"-1",options:null},{name:"verbose",docstring:"The verbosity of messages.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"n_molecules_",docstring:"Total number of molecules.",param_type:["int"],returned:!1},{name:"max_n_atoms_",docstring:"Maximum number of atoms in all molecules.",param_type:["int"],returned:!1}],node_functions:[{name:"represent",docstring:"\n        provides coulomb matrix representation for input molecules.",inputs:[{name:"molecules",docstring:"If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.",param_type:["array","object"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"features",docstring:"A data frame with same number of rows as number of molecules will be returned. The exact shape of the dataframe depends on the type of CM as follows:     - shape of Unsorted_Matrix (UM): (n_molecules, max_n_atoms**2)     - shape of Unsorted_Triangular (UT): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of eigenspectrums (E): (n_molecules, max_n_atoms)     - shape of Sorted_Coulomb (SC): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of Random_Coulomb (RC): (n_molecules, nPerm * max_n_atoms * (max_n_atoms+1)/2)",param_type:["dataframe"],returned:!0}]}],nodes:[]},{name:"Dragon",docstring:"\n    An interface to Dragon 6 and 7 chemoinformatics software. Dragon is a commercial software and\n    you should provide API Key",inputs:[{name:"version",docstring:"The version of available Dragon on the user's system. (available versions: 6 or 7)",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"7",options:null},{name:"Weights",docstring:"A list of weights to be used",param_type:["list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"blocks",docstring:"A list of integers as descriptor blocks' id. There are totally 29 and 30 blocks available in version 6 and 7, respectively. This module is not atimed to cherry pick descriptors in each block. For doing so, please use Script Wizard in Drgon GUI.",param_type:["list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"external",docstring:"If True, include external variables at the end of each saved file.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_save_script",docstring:"None",inputs:[],outputs:[]},{name:"convert_to_csv",docstring:"\n        This function converts the tab-delimited txt file from Dragon to pandas dataframe.\n        Note that this process might require large memory based on the number of data points and features.",inputs:[{name:"remove",docstring:"if True, the original descriptors file (Dragon_descriptors.txt) will be removed.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"features",docstring:"The 2D dataframe of the descriptors. Note that the first two columns are 'No.' and 'NAME'.",param_type:["dataframe"],returned:!0}]},{name:"printout",docstring:"None",inputs:[],outputs:[]},{name:"run",docstring:"None",inputs:[],outputs:[]},{name:"script_wizard",docstring:"\n        The script_wizard is designed to build a Dragon script file. The name and\n        the functionality of this function is the same as available Script wizard\n        in the Dragon Graphic User Interface.\n        Note: All reported nodes are mandatory, except the <EXTERNAL> tag\n        Note: Script for version 7 doesn't support fingerprints block",inputs:[{name:"script",docstring:'If "new" start creating a new script from scratch. If you want to load an existing script, pass the filename with drs format.',param_type:["str"],expected_shape:null,is_optional:!0,default_value:'"new"',options:null},{name:"output_directory",docstring:"the path to the working directory to store output files.",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"./",options:null},{name:"dragon",docstring:"Dragon script in  xml format.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"drs",docstring:"Dragon script file name",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"data_path",docstring:"The path+name of saved data file in any format. If saveType is 'block' or 'subblock' data_path is just the path to the directory that all data files have been saved.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]}],nodes:[]},{name:"Molecule",docstring:"The central class to construct a molecule from different chemical input formats.\n    This module is built on top of RDKit and OpenBabel python API.\n    We join the forces and strength of these two cheminformatic libraris for a consistent user experience.\n\n    Almost all the molecular descriptors and molecule-based ML models require the chemical informatin as a Molecule object.\n    Several methods are available in this module to facilitate the manipulation of chemical data.",inputs:[{name:"input",docstring:"The representation string or path to a file.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"input_type",docstring:"The input type. The available types are enlisted here:     - smiles: The input must be SMILES representation of a molecule.     - smarts: The input must be SMARTS representation of a molecule.     - inchi: The input must be InChi representation of a molecule.     - xyz:  The input must be the path to an xyz file.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:["smiles","smarts","inchi","xyz"]},{name:"kwargs",docstring:"The corresponding RDKit arguments for each of the input types:     - smiles: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmiles     - smarts: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmarts     - inchi: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolFromInchi",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"rdkit_molecule",docstring:"The `rdkit.Chem.rdchem.Mol` object",param_type:["object"],returned:!1},{name:"smiles",docstring:"The SMILES string that you get by running the `to_smiles` method.",param_type:["str"],returned:!1},{name:"smarts",docstring:"The SMARTS string that you get by running the `to_smarts` method.",param_type:["str"],returned:!1},{name:"inchi",docstring:"The InChi string that you get by running the `to_inchi` method.",param_type:["str"],returned:!1},{name:"xyz",docstring:"The class object that stores the 3D info. The available attributes in the class are 'geometry', 'atomic_numbers', and 'atomic_symbols'.",param_type:[null],returned:!1}],node_functions:[{name:"hydrogens",docstring:"\n        This function adds/removes hydrogens to/from a prebuilt molecule object.\n\n        Parameters\n        ----------\n        action : str\n            Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.\n\n        kwargs :\n            The arguments that can be passed to the rdkit functions:\n            - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs\n            - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs\n\n        Notes\n        -----\n            - The rdkit or pybel molecule object must be created in advance.\n            - Only rdkit or pybel molecule object will be modified in place.\n            - If you remove hydrogens from molecules, the atomic 3D coordinates might not be accurate for the conversion to xyz representation.\n\n        ",inputs:[{name:"action",docstring:"Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"kwargs :",docstring:"The arguments that can be passed to the rdkit functions: - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"to_inchi",docstring:"\n        This function creates and stores the InChi string for a pre-built molecule.\n\n        Parameters\n        ----------\n        kwargs :\n            The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available).\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi\n\n        Notes\n        -----\n            - The rdkit or pybel molecule object must be created in advance.\n            - The molecule will be modified in place.\n\n        ",inputs:[{name:"kwargs :",docstring:"The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available). The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"to_smarts",docstring:"\n        This function creates and stores the SMARTS string for a pre-built molecule.\n\n        Parameters\n        ----------\n        kwargs :\n            All the arguments that can be passed to the rdkit.Chem.MolToSmarts function.\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts\n\n        Notes\n        -----\n            - The rdkit or pybel molecule object must be created in advance.\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then create the SMARTS string using rdkit arguments.\n            - The molecule will be modified in place.\n\n        ",inputs:[{name:"kwargs :",docstring:"All the arguments that can be passed to the rdkit.Chem.MolToSmarts function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"to_smiles",docstring:"\n        This function creates and stores the SMILES string for a pre-built molecule.\n\n        Parameters\n        ----------\n        kwargs :\n            The arguments for the rdkit.Chem.MolToSmiles function.\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles\n\n        Notes\n        -----\n            - The rdkit or pybel molecule object must be created in advance.\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then recreate the SMILES string using rdkit arguments.\n            - The molecule will be modified in place.\n            - For rdkit molecule the SMILES string is canocical by default, unless when one requests kekuleSmiles.\n\n        ",inputs:[{name:"kwargs :",docstring:"The arguments for the rdkit.Chem.MolToSmiles function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"to_xyz",docstring:"\n        This function creates and stores the xyz coordinates for a pre-built molecule object.\n\n        Parameters\n        ----------\n        optimizer : None or str, optional (default: None)\n            If None, the geometries will be extracted from the available source of 3D structure (if any).\n            Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or\n            'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.\n\n        kwargs :\n            The arguments that can be passed to the corresponding forcefileds.\n            The documentation is available at:\n                - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule\n                - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule\n\n        Notes\n        -----\n            - The geometry will be stored in the `xyz` attribute.\n            - The molecule object must be created in advance.\n            - The hydrogens won't be added to the molecule automatically. You should add it manually using `hydrogens` method.\n            - If the molecule object has been built using 2D representations (e.g., SMILES or InChi), the conformer\n            doesn't exist and you nedd to set the optimizer parameter to any of the force fields.\n            - If the 3D info exist but you still need to run optimization, the 3D structure will be embedded from scratch (i.e., the current atom coordinates will be removed.)\n\n\n        ",inputs:[{name:"optimizer",docstring:"If None, the geometries will be extracted from the available source of 3D structure (if any). Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or 'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.",param_type:["str",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"kwargs :",docstring:"The arguments that can be passed to the corresponding forcefileds. The documentation is available at:     - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule     - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]},{name:"visualize",docstring:"\n        This function visualizes the molecule. If both rdkit and pybel objects are avaialble, the rdkit object\n        will be used for visualization.\n\n        Parameters\n        ----------\n        filename: str, optional (default = None)\n            This is the path to the file that you want write the image in it.\n            Tkinter and Python Imaging Library are required for writing the image.\n\n        kwargs:\n            any extra parameter that you want to pass to the rdkit or pybel draw tool.\n            Additional information at:\n                - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html\n                - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw\n\n        Returns\n        -------\n        fig : object\n            You will be able to display this object, e.g., inside the Jupyter Notebook.\n\n        ",inputs:[{name:"filename: str, optional (default = None)",docstring:"This is the path to the file that you want write the image in it. Tkinter and Python Imaging Library are required for writing the image.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"kwargs:",docstring:"any extra parameter that you want to pass to the rdkit or pybel draw tool. Additional information at:     - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html     - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"fig",docstring:"You will be able to display this object, e.g., inside the Jupyter Notebook.",param_type:["object"],returned:!0}]}],nodes:[]},{name:"RDKitFingerprint",docstring:"\n    This is an interface to the available molecular fingerprints in the RDKit package.",inputs:[{name:"fingerprint_type",docstring:"The type of fingerprint. Available fingerprint types:     - 'hashed_atom_pair' or 'hap'     - 'MACCS' or 'maccs'     - 'morgan'     - 'hashed_topological_torsion' or 'htt'     - 'topological_torsion' or 'tt'",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"Morgan",options:["hashed_atom_pair","MACCS","morgan","hashed_topological_torsion","topological_torsion"]},{name:"vector",docstring:"Available options for vector:     - 'int' : represent counts for each fragment instead of bits             It is not available for 'MACCS'.     - 'bit' : only zeros and ones             It is not available for 'Topological_torsion'.",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"bit",options:["int","bit"]},{name:"n_bits",docstring:"It sets number of elements/bits in the 'bit' type of fingerprint vectors. Not available for:     - 'MACCS' - (MACCS keys have a fixed length of 167 bits)     - 'Topological_torsion' - doesn't return a bit vector at all.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1024",options:null},{name:"radius",docstring:"only applicable if calculating 'Morgan' fingerprint.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"2",options:null},{name:"kwargs :",docstring:"Any additional argument that should be passed to the rdkit fingerprint function.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"n_molecules_",docstring:"The number of molecules that are received.",param_type:["int"],returned:!1},{name:"fps_",docstring:"The list of rdkit fingerprint objects.",param_type:["list"],returned:!1}],node_functions:[{name:"represent",docstring:"\n        The main function to provide fingerprint representation of input molecule(s).",inputs:[{name:"molecules",docstring:"It must be an instance of chemml.chem.Molecule object or a list of those objects, otherwise a ValueError will be raised. If smiles representation of the molecule (or rdkit molecule object) is not available, we convert the molecule to smiles automatically. However, the automatic conversion may ignore your manual settings, for example removed hydrogens, kekulized, or canonical smiles.",param_type:["object","list"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"features",docstring:"A 2-dimensional pandas dataframe of fingerprint features with same number of rows as number of molecules.",param_type:["dataframe"],returned:!0}]},{name:"store_sparse",docstring:"\n        This function helps you to store higly sparse fingerprint feature sets using `.npz` format for memory efficiency and\n        less store/load time.\n        Another method of this class, `load_sparse`, enables you to load your `.npz` files and convert it back to pandas dataframe.\n\n        Parameters\n        ----------\n        file : str\n            Must be a path to the file with .npz format.\n\n        features : pandas DataFrame\n            Must be the pandas dataframe as you receive it from `represent` method.\n\n        ",inputs:[{name:"file",docstring:"Must be a path to the file with .npz format.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"features",docstring:"Must be the pandas dataframe as you receive it from `represent` method.",param_type:["dataframe"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[]}],nodes:[]},{name:"XYZ",docstring:"\n    This class stores the information that is typically carried by standard XYZ files.",inputs:[{name:"geometry",docstring:"The numpy array of shape (number_of_atoms, 3). It stores the xyz coordinates for each atom of the molecule.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"atomic_numbers",docstring:"The numpy array of shape (number_of_atoms, 1). It stores the atomic numbers of each atom in the molecule (in the same order as geometry).",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"atomic_symbols",docstring:"The numpy array of shape (number_of_atoms, 1). It stores the atomic symbols of each atom in the molecule (in the same order as geometry).",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[],node_functions:[],nodes:[]}],library:"chemml",module:"chem"},Om={name:"sklearn.preprocessing",docstring:"",inputs:[],outputs:[],node_functions:[{name:"add_dummy_feature",docstring:"Augment dataset with an additional dummy feature.\n\n    This is useful for fitting an intercept term with implementations which\n    cannot otherwise fit it directly.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\n        Data.\n\n    value : float\n        Value to use for the dummy feature.\n\n    Returns\n    -------\n\n    X : {array, sparse matrix}, shape [n_samples, n_features + 1]\n        Same data with dummy feature added as first column.\n\n    Examples\n    --------\n\n    >>> from sklearn.preprocessing import add_dummy_feature\n    >>> add_dummy_feature([[0, 1], [1, 0]])\n    array([[1., 0., 1.],\n           [1., 1., 0.]])\n    ",inputs:[{name:"X",docstring:"Data.",param_type:["LIST_VALID_OPTIONS","array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:["array-like","sparse matrix","shape [n_samples","n_features]"]},{name:"value",docstring:"Value to use for the dummy feature.",param_type:["float"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X",docstring:"Same data with dummy feature added as first column.",param_type:["LIST_VALID_OPTIONS","array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"binarize",docstring:"Boolean thresholding of array-like or scipy.sparse matrix\n\n    Read more in the :ref:`User Guide <preprocessing_binarization>`.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\n        The data to binarize, element by element.\n        scipy.sparse matrices should be in CSR or CSC format to avoid an\n        un-necessary copy.\n\n    threshold : float, optional (0.0 by default)\n        Feature values below or equal to this are replaced by 0, above it by 1.\n        Threshold may not be less than 0 for operations on sparse matrices.\n\n    copy : boolean, optional, default True\n        set to False to perform inplace binarization and avoid a copy\n        (if the input is already a numpy array or a scipy.sparse CSR / CSC\n        matrix and if axis is 1).\n\n    See also\n    --------\n    Binarizer: Performs binarization using the ``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n    ",inputs:[{name:"X",docstring:"The data to binarize, element by element. scipy.sparse matrices should be in CSR or CSC format to avoid an un-necessary copy.",param_type:["LIST_VALID_OPTIONS","array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:["array-like","sparse matrix","shape [n_samples","n_features]"]},{name:"threshold",docstring:"Feature values below or equal to this are replaced by 0, above it by 1. Threshold may not be less than 0 for operations on sparse matrices.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"copy",docstring:"set to False to perform inplace binarization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR / CSC matrix and if axis is 1).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"label_binarize",docstring:"Binarize labels in a one-vs-all fashion\n\n    Several regression and binary classification algorithms are\n    available in scikit-learn. A simple way to extend these algorithms\n    to the multi-class classification case is to use the so-called\n    one-vs-all scheme.\n\n    This function makes it possible to compute this transformation for a\n    fixed set of class labels known ahead of time.\n\n    Parameters\n    ----------\n    y : array-like\n        Sequence of integer labels or multilabel data to encode.\n\n    classes : array-like of shape [n_classes]\n        Uniquely holds the label for each class.\n\n    neg_label : int (default: 0)\n        Value with which negative labels must be encoded.\n\n    pos_label : int (default: 1)\n        Value with which positive labels must be encoded.\n\n    sparse_output : boolean (default: False),\n        Set to true if output binary array is desired in CSR sparse format\n\n    Returns\n    -------\n    Y : numpy array or CSR matrix of shape [n_samples, n_classes]\n        Shape will be [n_samples, 1] for binary problems.\n\n    Examples\n    --------\n    >>> from sklearn.preprocessing import label_binarize\n    >>> label_binarize([1, 6], classes=[1, 2, 4, 6])\n    array([[1, 0, 0, 0],\n           [0, 0, 0, 1]])\n\n    The class ordering is preserved:\n\n    >>> label_binarize([1, 6], classes=[1, 6, 4, 2])\n    array([[1, 0, 0, 0],\n           [0, 1, 0, 0]])\n\n    Binary targets transform to a column vector\n\n    >>> label_binarize(['yes', 'no', 'no', 'yes'], classes=['no', 'yes'])\n    array([[1],\n           [0],\n           [0],\n           [1]])\n\n    See also\n    --------\n    LabelBinarizer : class used to wrap the functionality of label_binarize and\n        allow for fitting to classes independently of the transform operation\n    ",inputs:[{name:"y",docstring:"Sequence of integer labels or multilabel data to encode.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"classes",docstring:"Uniquely holds the label for each class.",param_type:["array"],expected_shape:"[n_classes]",is_optional:!1,default_value:null,options:null},{name:"neg_label",docstring:"Value with which negative labels must be encoded.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"0",options:null},{name:"pos_label",docstring:"Value with which positive labels must be encoded.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1",options:null},{name:"sparse_output",docstring:"Set to true if output binary array is desired in CSR sparse format",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"Y",docstring:"Shape will be [n_samples, 1] for binary problems.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"maxabs_scale",docstring:"Scale each feature to the [-1, 1] range without breaking the sparsity.\n\n    This estimator scales each feature individually such\n    that the maximal absolute value of each feature in the\n    training set will be 1.0.\n\n    This scaler can also be applied to sparse CSR or CSC matrices.\n\n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features)\n        The data.\n\n    axis : int (0 by default)\n        axis used to scale along. If 0, independently scale each feature,\n        otherwise (if 1) scale each sample.\n\n    copy : boolean, optional, default is True\n        Set to False to perform inplace scaling and avoid a copy (if the input\n        is already a numpy array).\n\n    See also\n    --------\n    MaxAbsScaler: Performs scaling to the [-1, 1] range using the``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n\n    Notes\n    -----\n    NaNs are treated as missing values: disregarded to compute the statistics,\n    and maintained during the data transformation.\n\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n    ",inputs:[{name:"X",docstring:"The data.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"axis",docstring:"axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"copy",docstring:"Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"minmax_scale",docstring:"Transforms features by scaling each feature to a given range.\n\n    This estimator scales and translates each feature individually such\n    that it is in the given range on the training set, i.e. between\n    zero and one.\n\n    The transformation is given by (when ``axis=0``)::\n\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\n        X_scaled = X_std * (max - min) + min\n\n    where min, max = feature_range.\n\n    The transformation is calculated as (when ``axis=0``)::\n\n       X_scaled = scale * X + min - X.min(axis=0) * scale\n       where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\n\n    This transformation is often used as an alternative to zero mean,\n    unit variance scaling.\n\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\n\n    .. versionadded:: 0.17\n       *minmax_scale* function interface\n       to :class:`sklearn.preprocessing.MinMaxScaler`.\n\n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features)\n        The data.\n\n    feature_range : tuple (min, max), default=(0, 1)\n        Desired range of transformed data.\n\n    axis : int (0 by default)\n        axis used to scale along. If 0, independently scale each feature,\n        otherwise (if 1) scale each sample.\n\n    copy : boolean, optional, default is True\n        Set to False to perform inplace scaling and avoid a copy (if the input\n        is already a numpy array).\n\n    See also\n    --------\n    MinMaxScaler: Performs scaling to a given range using the``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n\n    Notes\n    -----\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n    ",inputs:[{name:"X",docstring:"The data.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"feature_range",docstring:"Desired range of transformed data.",param_type:["tuple"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"axis",docstring:"axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"copy",docstring:"Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"normalize",docstring:"Scale input vectors individually to unit norm (vector length).\n\n    Read more in the :ref:`User Guide <preprocessing_normalization>`.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\n        The data to normalize, element by element.\n        scipy.sparse matrices should be in CSR format to avoid an\n        un-necessary copy.\n\n    norm : 'l1', 'l2', or 'max', optional ('l2' by default)\n        The norm to use to normalize each non zero sample (or each non-zero\n        feature if axis is 0).\n\n    axis : 0 or 1, optional (1 by default)\n        axis used to normalize the data along. If 1, independently normalize\n        each sample, otherwise (if 0) normalize each feature.\n\n    copy : boolean, optional, default True\n        set to False to perform inplace row normalization and avoid a\n        copy (if the input is already a numpy array or a scipy.sparse\n        CSR matrix and if axis is 1).\n\n    return_norm : boolean, default False\n        whether to return the computed norms\n\n    Returns\n    -------\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\n        Normalized input X.\n\n    norms : array, shape [n_samples] if axis=1 else [n_features]\n        An array of norms along given axis for X.\n        When X is sparse, a NotImplementedError will be raised\n        for norm 'l1' or 'l2'.\n\n    See also\n    --------\n    Normalizer: Performs normalization using the ``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n\n    Notes\n    -----\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n\n    ",inputs:[{name:"X",docstring:"The data to normalize, element by element. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.",param_type:["LIST_VALID_OPTIONS","array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:["array-like","sparse matrix","shape [n_samples","n_features]"]},{name:"norm",docstring:"The norm to use to normalize each non zero sample (or each non-zero feature if axis is 0).",param_type:[null],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"axis",docstring:"axis used to normalize the data along. If 1, independently normalize each sample, otherwise (if 0) normalize each feature.",param_type:[null],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"copy",docstring:"set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"return_norm",docstring:"whether to return the computed norms",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X",docstring:"Normalized input X.",param_type:["LIST_VALID_OPTIONS","array"],returned:!0},{name:"norms",docstring:"An array of norms along given axis for X. When X is sparse, a NotImplementedError will be raised for norm 'l1' or 'l2'.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"power_transform",docstring:"\n    Power transforms are a family of parametric, monotonic transformations\n    that are applied to make data more Gaussian-like. This is useful for\n    modeling issues related to heteroscedasticity (non-constant variance),\n    or other situations where normality is desired.\n\n    Currently, power_transform supports the Box-Cox transform and the\n    Yeo-Johnson transform. The optimal parameter for stabilizing variance and\n    minimizing skewness is estimated through maximum likelihood.\n\n    Box-Cox requires input data to be strictly positive, while Yeo-Johnson\n    supports both positive or negative data.\n\n    By default, zero-mean, unit-variance normalization is applied to the\n    transformed data.\n\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\n\n    Parameters\n    ----------\n    X : array-like, shape (n_samples, n_features)\n        The data to be transformed using a power transformation.\n\n    method : str\n        The power transform method. Available methods are:\n\n        - 'yeo-johnson' [1]_, works with positive and negative values\n        - 'box-cox' [2]_, only works with strictly positive values\n\n        The default method will be changed from 'box-cox' to 'yeo-johnson'\n        in version 0.23. To suppress the FutureWarning, explicitly set the\n        parameter.\n\n    standardize : boolean, default=True\n        Set to True to apply zero-mean, unit-variance normalization to the\n        transformed output.\n\n    copy : boolean, optional, default=True\n        Set to False to perform inplace computation during transformation.\n\n    Returns\n    -------\n    X_trans : array-like, shape (n_samples, n_features)\n        The transformed data.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.preprocessing import power_transform\n    >>> data = [[1, 2], [3, 2], [4, 5]]\n    >>> print(power_transform(data, method='box-cox'))  # doctest: +ELLIPSIS\n    [[-1.332... -0.707...]\n     [ 0.256... -0.707...]\n     [ 1.076...  1.414...]]\n\n    See also\n    --------\n    PowerTransformer : Equivalent transformation with the\n        ``Transformer`` API (e.g. as part of a preprocessing\n        :class:`sklearn.pipeline.Pipeline`).\n\n    quantile_transform : Maps data to a standard normal distribution with\n        the parameter `output_distribution='normal'`.\n\n    Notes\n    -----\n    NaNs are treated as missing values: disregarded in ``fit``, and maintained\n    in ``transform``.\n\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n\n    References\n    ----------\n\n    .. [1] I.K. Yeo and R.A. Johnson, \"A new family of power transformations to\n           improve normality or symmetry.\" Biometrika, 87(4), pp.954-959,\n           (2000).\n\n    .. [2] G.E.P. Box and D.R. Cox, \"An Analysis of Transformations\", Journal\n           of the Royal Statistical Society B, 26, 211-252 (1964).\n    ",inputs:[{name:"X",docstring:"The data to be transformed using a power transformation.",param_type:["array"],expected_shape:"(n_samples, n_features)",is_optional:!1,default_value:null,options:null},{name:"method",docstring:"The power transform method. Available methods are:  - 'yeo-johnson' [1]_, works with positive and negative values - 'box-cox' [2]_, only works with strictly positive values  The default method will be changed from 'box-cox' to 'yeo-johnson' in version 0.23. To suppress the FutureWarning, explicitly set the parameter.",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"standardize",docstring:"Set to True to apply zero-mean, unit-variance normalization to the transformed output.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"copy",docstring:"Set to False to perform inplace computation during transformation.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_trans",docstring:"The transformed data.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"quantile_transform",docstring:"Transform features using quantiles information.\n\n    This method transforms the features to follow a uniform or a normal\n    distribution. Therefore, for a given feature, this transformation tends\n    to spread out the most frequent values. It also reduces the impact of\n    (marginal) outliers: this is therefore a robust preprocessing scheme.\n\n    The transformation is applied on each feature independently. First an\n    estimate of the cumulative distribution function of a feature is\n    used to map the original values to a uniform distribution. The obtained\n    values are then mapped to the desired output distribution using the\n    associated quantile function. Features values of new/unseen data that fall\n    below or above the fitted range will be mapped to the bounds of the output\n    distribution. Note that this transform is non-linear. It may distort linear\n    correlations between variables measured at the same scale but renders\n    variables measured at different scales more directly comparable.\n\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\n\n    Parameters\n    ----------\n    X : array-like, sparse matrix\n        The data to transform.\n\n    axis : int, (default=0)\n        Axis used to compute the means and standard deviations along. If 0,\n        transform each feature, otherwise (if 1) transform each sample.\n\n    n_quantiles : int, optional (default=1000 or n_samples)\n        Number of quantiles to be computed. It corresponds to the number\n        of landmarks used to discretize the cumulative distribution function.\n        If n_quantiles is larger than the number of samples, n_quantiles is set\n        to the number of samples as a larger number of quantiles does not give\n        a better approximation of the cumulative distribution function\n        estimator.\n\n    output_distribution : str, optional (default='uniform')\n        Marginal distribution for the transformed data. The choices are\n        'uniform' (default) or 'normal'.\n\n    ignore_implicit_zeros : bool, optional (default=False)\n        Only applies to sparse matrices. If True, the sparse entries of the\n        matrix are discarded to compute the quantile statistics. If False,\n        these entries are treated as zeros.\n\n    subsample : int, optional (default=1e5)\n        Maximum number of samples used to estimate the quantiles for\n        computational efficiency. Note that the subsampling procedure may\n        differ for value-identical sparse and dense matrices.\n\n    random_state : int, RandomState instance or None, optional (default=None)\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by np.random. Note that this is used by subsampling and smoothing\n        noise.\n\n    copy : boolean, optional, (default=\"warn\")\n        Set to False to perform inplace transformation and avoid a copy (if the\n        input is already a numpy array). If True, a copy of `X` is transformed,\n        leaving the original `X` unchanged\n\n        .. deprecated:: 0.21\n            The default value of parameter `copy` will be changed from False\n            to True in 0.23. The current default of False is being changed to\n            make it more consistent with the default `copy` values of other\n            functions in :mod:`sklearn.preprocessing.data`. Furthermore, the\n            current default of False may have unexpected side effects by\n            modifying the value of `X` inplace\n\n    Returns\n    -------\n    Xt : ndarray or sparse matrix, shape (n_samples, n_features)\n        The transformed data.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.preprocessing import quantile_transform\n    >>> rng = np.random.RandomState(0)\n    >>> X = np.sort(rng.normal(loc=0.5, scale=0.25, size=(25, 1)), axis=0)\n    >>> quantile_transform(X, n_quantiles=10, random_state=0, copy=True)\n    ... # doctest: +ELLIPSIS\n    array([...])\n\n    See also\n    --------\n    QuantileTransformer : Performs quantile-based scaling using the\n        ``Transformer`` API (e.g. as part of a preprocessing\n        :class:`sklearn.pipeline.Pipeline`).\n    power_transform : Maps data to a normal distribution using a\n        power transformation.\n    scale : Performs standardization that is faster, but less robust\n        to outliers.\n    robust_scale : Performs robust standardization that removes the influence\n        of outliers but does not put outliers and inliers on the same scale.\n\n    Notes\n    -----\n    NaNs are treated as missing values: disregarded in fit, and maintained in\n    transform.\n\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n    ",inputs:[{name:"X",docstring:"The data to transform.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"axis",docstring:"Axis used to compute the means and standard deviations along. If 0, transform each feature, otherwise (if 1) transform each sample.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"0",options:null},{name:"n_quantiles",docstring:"Number of quantiles to be computed. It corresponds to the number of landmarks used to discretize the cumulative distribution function. If n_quantiles is larger than the number of samples, n_quantiles is set to the number of samples as a larger number of quantiles does not give a better approximation of the cumulative distribution function estimator.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1000 or n_samples",options:null},{name:"output_distribution",docstring:"Marginal distribution for the transformed data. The choices are 'uniform' (default) or 'normal'.",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"uniform",options:null},{name:"ignore_implicit_zeros",docstring:"Only applies to sparse matrices. If True, the sparse entries of the matrix are discarded to compute the quantile statistics. If False, these entries are treated as zeros.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"subsample",docstring:"Maximum number of samples used to estimate the quantiles for computational efficiency. Note that the subsampling procedure may differ for value-identical sparse and dense matrices.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1e5",options:null},{name:"random_state",docstring:"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Note that this is used by subsampling and smoothing noise.",param_type:["int",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"copy",docstring:"Set to False to perform inplace transformation and avoid a copy (if the input is already a numpy array). If True, a copy of `X` is transformed, leaving the original `X` unchanged  .. deprecated:: 0.21     The default value of parameter `copy` will be changed from False     to True in 0.23. The current default of False is being changed to     make it more consistent with the default `copy` values of other     functions in :mod:`sklearn.preprocessing.data`. Furthermore, the     current default of False may have unexpected side effects by     modifying the value of `X` inplace",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:'"warn"',options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"Xt",docstring:"The transformed data.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"robust_scale",docstring:"Standardize a dataset along any axis\n\n    Center to the median and component wise scale\n    according to the interquartile range.\n\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\n\n    Parameters\n    ----------\n    X : array-like\n        The data to center and scale.\n\n    axis : int (0 by default)\n        axis used to compute the medians and IQR along. If 0,\n        independently scale each feature, otherwise (if 1) scale\n        each sample.\n\n    with_centering : boolean, True by default\n        If True, center the data before scaling.\n\n    with_scaling : boolean, True by default\n        If True, scale the data to unit variance (or equivalently,\n        unit standard deviation).\n\n    quantile_range : tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0\n        Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR\n        Quantile range used to calculate ``scale_``.\n\n        .. versionadded:: 0.18\n\n    copy : boolean, optional, default is True\n        set to False to perform inplace row normalization and avoid a\n        copy (if the input is already a numpy array or a scipy.sparse\n        CSR matrix and if axis is 1).\n\n    Notes\n    -----\n    This implementation will refuse to center scipy.sparse matrices\n    since it would make them non-sparse and would potentially crash the\n    program with memory exhaustion problems.\n\n    Instead the caller is expected to either set explicitly\n    `with_centering=False` (in that case, only variance scaling will be\n    performed on the features of the CSR matrix) or to call `X.toarray()`\n    if he/she expects the materialized dense array to fit in memory.\n\n    To avoid memory copy the caller should pass a CSR matrix.\n\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n\n    See also\n    --------\n    RobustScaler: Performs centering and scaling using the ``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n    ",inputs:[{name:"X",docstring:"The data to center and scale.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"axis",docstring:"axis used to compute the medians and IQR along. If 0, independently scale each feature, otherwise (if 1) scale each sample.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"with_centering",docstring:"If True, center the data before scaling.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"with_scaling",docstring:"If True, scale the data to unit variance (or equivalently, unit standard deviation).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"quantile_range",docstring:"Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR Quantile range used to calculate ``scale_``.  .. versionadded:: 0.18",param_type:["tuple"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"copy",docstring:"set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"scale",docstring:"Standardize a dataset along any axis\n\n    Center to the mean and component wise scale to unit variance.\n\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}\n        The data to center and scale.\n\n    axis : int (0 by default)\n        axis used to compute the means and standard deviations along. If 0,\n        independently standardize each feature, otherwise (if 1) standardize\n        each sample.\n\n    with_mean : boolean, True by default\n        If True, center the data before scaling.\n\n    with_std : boolean, True by default\n        If True, scale the data to unit variance (or equivalently,\n        unit standard deviation).\n\n    copy : boolean, optional, default True\n        set to False to perform inplace row normalization and avoid a\n        copy (if the input is already a numpy array or a scipy.sparse\n        CSC matrix and if axis is 1).\n\n    Notes\n    -----\n    This implementation will refuse to center scipy.sparse matrices\n    since it would make them non-sparse and would potentially crash the\n    program with memory exhaustion problems.\n\n    Instead the caller is expected to either set explicitly\n    `with_mean=False` (in that case, only variance scaling will be\n    performed on the features of the CSC matrix) or to call `X.toarray()`\n    if he/she expects the materialized dense array to fit in memory.\n\n    To avoid memory copy the caller should pass a CSC matrix.\n\n    NaNs are treated as missing values: disregarded to compute the statistics,\n    and maintained during the data transformation.\n\n    We use a biased estimator for the standard deviation, equivalent to\n    `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to\n    affect model performance.\n\n    For a comparison of the different scalers, transformers, and normalizers,\n    see :ref:`examples/preprocessing/plot_all_scaling.py\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\n\n    See also\n    --------\n    StandardScaler: Performs scaling to unit variance using the``Transformer`` API\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\n\n    ",inputs:[{name:"X",docstring:"The data to center and scale.",param_type:["LIST_VALID_OPTIONS","array"],expected_shape:null,is_optional:!1,default_value:null,options:["array-like","sparse matrix"]},{name:"axis",docstring:"axis used to compute the means and standard deviations along. If 0, independently standardize each feature, otherwise (if 1) standardize each sample.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"with_mean",docstring:"If True, center the data before scaling.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"with_std",docstring:"If True, scale the data to unit variance (or equivalently, unit standard deviation).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"",options:null},{name:"copy",docstring:"set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSC matrix and if axis is 1).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[{name:"MaxAbsScaler",docstring:"Scale each feature by its maximum absolute value.\n\n    This estimator scales and translates each feature individually such\n    that the maximal absolute value of each feature in the\n    training set will be 1.0. It does not shift/center the data, and\n    thus does not destroy any sparsity.",inputs:[{name:"copy",docstring:"Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"scale_",docstring:"Per feature relative scaling of the data.",param_type:["array"],returned:!1},{name:"max_abs_",docstring:"Per feature maximum absolute value.",param_type:["array"],returned:!1},{name:"n_samples_seen_",docstring:"The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.",param_type:["int"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_more_tags",docstring:"None",inputs:[],outputs:[]},{name:"_reset",docstring:"Reset internal data-dependent state of the scaler, if necessary.\n\n        __init__ parameters are not touched.\n        ",inputs:[],outputs:[]},{name:"fit",docstring:"Compute the maximum absolute value to be used for later scaling.",inputs:[{name:"X",docstring:"The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_transform",docstring:"Fit to data, then transform it.\n\n        Fits transformer to X and y with optional parameters fit_params\n        and returns a transformed version of X.",inputs:[{name:"X",docstring:"Training set.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_new",docstring:"Transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"inverse_transform",docstring:"Scale back the data to the original representation",inputs:[{name:"X",docstring:"The data that should be transformed back.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"partial_fit",docstring:"Online computation of max absolute value of X for later scaling.\n        All of X is processed as a single batch. This is intended for cases\n        when `fit` is not feasible due to very large number of `n_samples`\n        or because X is read from a continuous stream.",inputs:[{name:"X",docstring:"The data used to compute the mean and standard deviation used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Ignored",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"transform",docstring:"Scale the data",inputs:[{name:"X",docstring:"The data that should be scaled.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"MinMaxScaler",docstring:"Transforms features by scaling each feature to a given range.\n\n    This estimator scales and translates each feature individually such\n    that it is in the given range on the training set, e.g. between\n    zero and one.\n\n    The transformation is given by::\n\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\n        X_scaled = X_std * (max - min) + min\n\n    where min, max = feature_range.\n\n    The transformation is calculated as::\n\n        X_scaled = scale * X + min - X.min(axis=0) * scale\n        where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\n\n    This transformation is often used as an alternative to zero mean,\n    unit variance scaling.",inputs:[{name:"feature_range",docstring:"Desired range of transformed data.",param_type:["tuple"],expected_shape:null,is_optional:!0,default_value:"(0, 1)",options:null},{name:"copy",docstring:"Set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"min_",docstring:"Per feature adjustment for minimum. Equivalent to ``min - X.min(axis=0) * self.scale_``",param_type:["array"],returned:!1},{name:"scale_",docstring:"Per feature relative scaling of the data. Equivalent to ``(max - min) / (X.max(axis=0) - X.min(axis=0))``",param_type:["array"],returned:!1},{name:"data_min_",docstring:"Per feature minimum seen in the data",param_type:["array"],returned:!1},{name:"data_max_",docstring:"Per feature maximum seen in the data",param_type:["array"],returned:!1},{name:"data_range_",docstring:"Per feature range ``(data_max_ - data_min_)`` seen in the data",param_type:["array"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_more_tags",docstring:"None",inputs:[],outputs:[]},{name:"_reset",docstring:"Reset internal data-dependent state of the scaler, if necessary.\n\n        __init__ parameters are not touched.\n        ",inputs:[],outputs:[]},{name:"fit",docstring:"Compute the minimum and maximum to be used for later scaling.",inputs:[{name:"X",docstring:"The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_transform",docstring:"Fit to data, then transform it.\n\n        Fits transformer to X and y with optional parameters fit_params\n        and returns a transformed version of X.",inputs:[{name:"X",docstring:"Training set.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_new",docstring:"Transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"inverse_transform",docstring:"Undo the scaling of X according to feature_range.",inputs:[{name:"X",docstring:"Input data that will be transformed. It cannot be sparse.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"partial_fit",docstring:"Online computation of min and max on X for later scaling.\n        All of X is processed as a single batch. This is intended for cases\n        when `fit` is not feasible due to very large number of `n_samples`\n        or because X is read from a continuous stream.",inputs:[{name:"X",docstring:"The data used to compute the mean and standard deviation used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Ignored",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"transform",docstring:"Scaling features of X according to feature_range.",inputs:[{name:"X",docstring:"Input data that will be transformed.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"Normalizer",docstring:"Normalize samples individually to unit norm.\n\n    Each sample (i.e. each row of the data matrix) with at least one\n    non zero component is rescaled independently of other samples so\n    that its norm (l1 or l2) equals one.\n\n    This transformer is able to work both with dense numpy arrays and\n    scipy.sparse matrix (use CSR format if you want to avoid the burden of\n    a copy / conversion).\n\n    Scaling inputs to unit norms is a common operation for text\n    classification or clustering for instance. For instance the dot\n    product of two l2-normalized TF-IDF vectors is the cosine similarity\n    of the vectors and is the base similarity metric for the Vector\n    Space Model commonly used by the Information Retrieval community.",inputs:[{name:"norm",docstring:"The norm to use to normalize each non zero sample.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"l2",options:["l1","l2","max"]},{name:"copy",docstring:"set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_more_tags",docstring:"None",inputs:[],outputs:[]},{name:"fit",docstring:"Do nothing and return the estimator unchanged\n\n        This method is just there to implement the usual API and hence\n        work in pipelines.",inputs:[{name:"X",docstring:"Data",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_transform",docstring:"Fit to data, then transform it.\n\n        Fits transformer to X and y with optional parameters fit_params\n        and returns a transformed version of X.",inputs:[{name:"X",docstring:"Training set.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_new",docstring:"Transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"transform",docstring:"Scale each non zero row of X to unit norm",inputs:[{name:"X",docstring:"The data to normalize, row by row. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"copy",docstring:"Copy the input X or not.",param_type:["bool",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"OneHotEncoder",docstring:"Encode categorical integer features as a one-hot numeric array.\n\n    The input to this transformer should be an array-like of integers or\n    strings, denoting the values taken on by categorical (discrete) features.\n    The features are encoded using a one-hot (aka 'one-of-K' or 'dummy')\n    encoding scheme. This creates a binary column for each category and\n    returns a sparse matrix or dense array.\n\n    By default, the encoder derives the categories based on the unique values\n    in each feature. Alternatively, you can also specify the `categories`\n    manually.\n    The OneHotEncoder previously assumed that the input features take on\n    values in the range [0, max(values)). This behaviour is deprecated.\n\n    This encoding is needed for feeding categorical data to many scikit-learn\n    estimators, notably linear models and SVMs with the standard kernels.\n\n    Note: a one-hot encoding of y labels should use a LabelBinarizer\n    instead.",inputs:[{name:"categories",docstring:"Categories (unique values) per feature:  - 'auto' : Determine categories automatically from the training data. - list : ``categories[i]`` holds the categories expected in the ith   column. The passed categories should not mix strings and numeric   values within a single feature, and should be sorted in case of   numeric values.  The used categories can be found in the ``categories_`` attribute.",param_type:["str","array","list"],expected_shape:null,is_optional:!0,default_value:"auto.",options:null},{name:"drop",docstring:"Specifies a methodology to use to drop one of the categories per feature. This is useful in situations where perfectly collinear features cause problems, such as when feeding the resulting data into a neural network or an unregularized regression.  - None : retain all features (the default). - 'first' : drop the first category in each feature. If only one   category is present, the feature will be dropped entirely. - array : ``drop[i]`` is the category in feature ``X[:, i]`` that   should be dropped.",param_type:["array","list","str"],expected_shape:"(n_features,)",is_optional:!0,default_value:"None",options:null},{name:"sparse",docstring:"Will return sparse matrix if set True else will return an array.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"dtype",docstring:"Desired dtype of output.",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"np.float",options:null},{name:"handle_unknown",docstring:"Whether to raise an error or ignore if an unknown categorical feature is present during transform (default is to raise). When this parameter is set to 'ignore' and an unknown category is encountered during transform, the resulting one-hot encoded columns for this feature will be all zeros. In the inverse transform, an unknown category will be denoted as None.",param_type:["LIST_VALID_OPTIONS"],expected_shape:null,is_optional:!0,default_value:"error",options:["error","ignore"]},{name:"n_values",docstring:"Number of values per feature.  - 'auto' : determine value range from training data. - int : number of categorical values per feature.         Each feature value should be in ``range(n_values)`` - array : ``n_values[i]`` is the number of categorical values in           ``X[:, i]``. Each feature value should be           in ``range(n_values[i])``",param_type:["array","int","str"],expected_shape:null,is_optional:!0,default_value:"auto",options:null},{name:"categorical_features",docstring:"Specify what features are treated as categorical.  - 'all': All features are treated as categorical. - array of indices: Array of categorical feature indices. - mask: Array of length n_features and with dtype=bool.  Non-categorical features are always stacked to the right of the matrix.",param_type:["array","str"],expected_shape:null,is_optional:!0,default_value:"all",options:null}],outputs:[{name:"categories_",docstring:"The categories of each feature determined during fitting (in order of the features in X and corresponding with the output of ``transform``). This includes the category specified in ``drop`` (if any).",param_type:["array","list"],returned:!1},{name:"drop_idx_",docstring:"``drop_idx_[i]`` is\xa0the index in ``categories_[i]`` of the category to be dropped for each feature. None if all the transformed features will be retained.",param_type:["array"],returned:!1},{name:"active_features_",docstring:"Indices for active features, meaning values that actually occur in the training set. Only available when n_values is ``'auto'``.  .. deprecated:: 0.20     The ``active_features_`` attribute was deprecated in version     0.20 and will be removed in 0.22.",param_type:["array"],returned:!1},{name:"feature_indices_",docstring:"Indices to feature ranges. Feature ``i`` in the original data is mapped to features from ``feature_indices_[i]`` to ``feature_indices_[i+1]`` (and then potentially masked by ``active_features_`` afterwards)  .. deprecated:: 0.20     The ``feature_indices_`` attribute was deprecated in version     0.20 and will be removed in 0.22.",param_type:["array"],returned:!1},{name:"n_values_",docstring:"Maximum number of values per feature.  .. deprecated:: 0.20     The ``n_values_`` attribute was deprecated in version     0.20 and will be removed in 0.22.",param_type:["array"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_check_X",docstring:"\n        Perform custom check_array:\n        - convert list of strings to object dtype\n        - check for missing values for object dtype data (check_array does\n          not do that)\n        - return list of features (arrays): this list of features is\n          constructed feature by feature to preserve the data types\n          of pandas DataFrame columns, as otherwise information is lost\n          and cannot be used, eg for the `categories_` attribute.\n\n        ",inputs:[],outputs:[]},{name:"_compute_drop_idx",docstring:"None",inputs:[],outputs:[]},{name:"_fit",docstring:"None",inputs:[],outputs:[]},{name:"_get_feature",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_handle_deprecations",docstring:"None",inputs:[],outputs:[]},{name:"_legacy_fit_transform",docstring:"Assumes X contains only categorical features.",inputs:[],outputs:[]},{name:"_legacy_transform",docstring:"Assumes X contains only categorical features.",inputs:[],outputs:[]},{name:"_transform",docstring:"None",inputs:[],outputs:[]},{name:"_transform_new",docstring:"New implementation assuming categorical input",inputs:[],outputs:[]},{name:"_validate_keywords",docstring:"None",inputs:[],outputs:[]},{name:"fit",docstring:"Fit OneHotEncoder to X.",inputs:[{name:"X",docstring:"The data to determine the categories of each feature.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"",docstring:"",param_type:[null],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_transform",docstring:"Fit OneHotEncoder to X, then transform X.\n\n        Equivalent to fit(X).transform(X) but more convenient.",inputs:[{name:"X",docstring:"The data to encode.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_out",docstring:"Transformed input.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"get_feature_names",docstring:"Return feature names for output features.",inputs:[{name:"input_features",docstring:'String names for input features if available. By default, "x0", "x1", ... "xn_features" is used.',param_type:["list"],expected_shape:null,is_optional:!0,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"output_feature_names",docstring:"",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"inverse_transform",docstring:"Convert the back data to the original representation.\n\n        In case unknown categories are encountered (all zeros in the\n        one-hot encoding), ``None`` is used to represent this category.",inputs:[{name:"X",docstring:"The transformed data.",param_type:["array"],expected_shape:"[n_samples, n_encoded_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_tr",docstring:"Inverse transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"transform",docstring:"Transform X using one-hot encoding.",inputs:[{name:"X",docstring:"The data to encode.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_out",docstring:"Transformed input.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]},{name:"StandardScaler",docstring:"Standardize features by removing the mean and scaling to unit variance\n\n    The standard score of a sample `x` is calculated as:\n\n        z = (x - u) / s\n\n    where `u` is the mean of the training samples or zero if `with_mean=False`,\n    and `s` is the standard deviation of the training samples or one if\n    `with_std=False`.\n\n    Centering and scaling happen independently on each feature by computing\n    the relevant statistics on the samples in the training set. Mean and\n    standard deviation are then stored to be used on later data using the\n    `transform` method.\n\n    Standardization of a dataset is a common requirement for many\n    machine learning estimators: they might behave badly if the\n    individual features do not more or less look like standard normally\n    distributed data (e.g. Gaussian with 0 mean and unit variance).\n\n    For instance many elements used in the objective function of\n    a learning algorithm (such as the RBF kernel of Support Vector\n    Machines or the L1 and L2 regularizers of linear models) assume that\n    all features are centered around 0 and have variance in the same\n    order. If a feature has a variance that is orders of magnitude larger\n    that others, it might dominate the objective function and make the\n    estimator unable to learn from other features correctly as expected.\n\n    This scaler can also be applied to sparse CSR or CSC matrices by passing\n    `with_mean=False` to avoid breaking the sparsity structure of the data.",inputs:[{name:"copy",docstring:"If False, try to avoid a copy and do inplace scaling instead. This is not guaranteed to always work inplace; e.g. if the data is not a NumPy array or scipy.sparse CSR matrix, a copy may still be returned.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"with_mean",docstring:"If True, center the data before scaling. This does not work (and will raise an exception) when attempted on sparse matrices, because centering them entails building a dense matrix which in common use cases is likely to be too large to fit in memory.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null},{name:"with_std",docstring:"If True, scale the data to unit variance (or equivalently, unit standard deviation).",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True",options:null}],outputs:[{name:"scale_",docstring:"Per feature relative scaling of the data. This is calculated using `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.  .. versionadded:: 0.17    *scale_*",param_type:["array",null],returned:!1},{name:"mean_",docstring:"The mean value for each feature in the training set. Equal to ``None`` when ``with_mean=False``.",param_type:["array",null],returned:!1},{name:"var_",docstring:"The variance for each feature in the training set. Used to compute `scale_`. Equal to ``None`` when ``with_std=False``.",param_type:["array",null],returned:!1},{name:"n_samples_seen_",docstring:"The number of samples processed by the estimator for each feature. If there are not missing samples, the ``n_samples_seen`` will be an integer, otherwise it will be an array. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.",param_type:["array","int"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_more_tags",docstring:"None",inputs:[],outputs:[]},{name:"_reset",docstring:"Reset internal data-dependent state of the scaler, if necessary.\n\n        __init__ parameters are not touched.\n        ",inputs:[],outputs:[]},{name:"fit",docstring:"Compute the mean and std to be used for later scaling.",inputs:[{name:"X",docstring:"The data used to compute the mean and standard deviation used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Ignored",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"fit_transform",docstring:"Fit to data, then transform it.\n\n        Fits transformer to X and y with optional parameters fit_params\n        and returns a transformed version of X.",inputs:[{name:"X",docstring:"Training set.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Target values.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_new",docstring:"Transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"inverse_transform",docstring:"Scale back the data to the original representation",inputs:[{name:"X",docstring:"The data used to scale along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"copy",docstring:"Copy the input X or not.",param_type:["bool",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"X_tr",docstring:"Transformed array.",param_type:["array"],returned:!0},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"partial_fit",docstring:"Online computation of mean and std on X for later scaling.\n        All of X is processed as a single batch. This is intended for cases\n        when `fit` is not feasible due to very large number of `n_samples`\n        or because X is read from a continuous stream.",inputs:[{name:"X",docstring:"The data used to compute the mean and standard deviation used for later scaling along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"y",docstring:"Ignored",param_type:[null],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]},{name:"transform",docstring:"Perform standardization by centering and scaling",inputs:[{name:"X",docstring:"The data used to scale along the features axis.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null,options:null},{name:"copy",docstring:"Copy the input X or not.",param_type:["bool",null],expected_shape:null,is_optional:!0,default_value:"None",options:null},{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:!1,options:null}],outputs:[{name:"obj",docstring:"True/False flag to indicate reusing the same instance instead of creating a new one",param_type:["bool"],returned:!0}]}],nodes:[]}],library:"sklearn",module:"preprocessing"},Mm={name:"chemml.wrapper.preprocessing",docstring:"",inputs:[],outputs:[],node_functions:[],nodes:[{name:"SplitColumns",docstring:"\n    This method splits a data matrix by columns.",inputs:[{name:"selection",docstring:"if positive integer, it's the number of columns to be selected from left side of dataframe and returns as first data frame (df1). if negative integer, it's the number of columns to be selected from right side of dataframe and returns as first data frame (df1).",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"1",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"fit",display_name:"split_columns",docstring:"\n        The main function to split the input dataframe.",inputs:[{name:"X",docstring:"the input array",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"X1",docstring:"Left part of the split data matrix",param_type:["array"],returned:!0},{name:"X2",docstring:"Right part of the split data matrix",param_type:["array"],returned:!0}]}],nodes:[]},{name:"TrainTestSplit",docstring:"A module to split a data matrix into train and test (or validation) samples",inputs:[{name:"test_fraction",docstring:"The fraction of samples to be selected for the test. If a value not in (0, 1.0) is provided we default to 0.25",param_type:["float"],expected_shape:null,is_optional:!0,default_value:"0.25",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"split",display_name:"train_test_split",docstring:"The function to call for performing the split of the data matrix",inputs:[{name:"X",docstring:"the input array",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null,options:null}],outputs:[{name:"X1",docstring:"The training data matrix with ((1 - test_fraction) * n_samples) rows",param_type:["array"],returned:!0},{name:"X2",docstring:"The testing data matrix with (test_fraction * n_samples) rows",param_type:["array"],returned:!0}]}],nodes:[]}],library:"chemml",module:"wrapper.preprocessing"},Im={name:"sklearn.model_selection",docstring:"",inputs:[],outputs:[],node_functions:[{name:"train_test_split",docstring:"Split arrays or matrices into random train and test subsets\n\n    Quick utility that wraps input validation and\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\n    into a single call for splitting (and optionally subsampling) data in a\n    oneliner.",inputs:[{name:"*arrays",docstring:"Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.",param_type:["list"],expected_shape:null,is_optional:!1,default_value:null},{name:"test_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"train_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"shuffle",docstring:"Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"stratify",docstring:"If not None, data is split in a stratified fashion, using this as the class labels.",param_type:["array",null],expected_shape:null,is_optional:!0,default_value:"None"}],outputs:[{name:"splitting",docstring:"List containing train-test split of inputs.",param_type:["array","list"],returned:!0}]}],nodes:[{name:"train_test_split",docstring:"Split arrays or matrices into random train and test subsets\n\n    Quick utility that wraps input validation and\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\n    into a single call for splitting (and optionally subsampling) data in a\n    oneliner.",node_functions:[{name:"split2",docstring:"None",inputs:[{name:"*arrays",docstring:"Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.",param_type:["list"],expected_shape:null,is_optional:!1,default_value:null},{name:"test_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"train_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"shuffle",docstring:"Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"stratify",docstring:"If not None, data is split in a stratified fashion, using this as the class labels.",param_type:["array",null],expected_shape:null,is_optional:!0,default_value:"None"}],outputs:[{name:"splitting",docstring:"List containing train-test split of inputs.",param_type:["array","list"],returned:!0}]}],inputs:[{name:"*arrays",docstring:"Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.",param_type:["list"],expected_shape:null,is_optional:!1,default_value:null},{name:"test_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"train_size",docstring:"If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.",param_type:["int","float",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"shuffle",docstring:"Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"stratify",docstring:"If not None, data is split in a stratified fashion, using this as the class labels.",param_type:["array",null],expected_shape:null,is_optional:!0,default_value:"None"}],outputs:[{name:"splitting",docstring:"List containing train-test split of inputs.",param_type:["array","list"],returned:!0}]},{name:"GridSearchCV",docstring:'Exhaustive search over specified parameter values for an estimator.\n\n    Important members are fit, predict.\n\n    GridSearchCV implements a "fit" and a "score" method.\n    It also implements "predict", "predict_proba", "decision_function",\n    "transform" and "inverse_transform" if they are implemented in the\n    estimator used.\n\n    The parameters of the estimator used to apply these methods are optimized\n    by cross-validated grid-search over a parameter grid.',inputs:[{name:"estimator",docstring:"This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.",param_type:["object"],expected_shape:null,is_optional:!1,default_value:null},{name:"param_grid",docstring:"Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.",param_type:["dict","list"],expected_shape:null,is_optional:!1,default_value:null},{name:"scoring",docstring:"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.",param_type:["str","dict","list","tuple","callable",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"n_jobs",docstring:"Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",param_type:["int",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"pre_dispatch",docstring:"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'",param_type:["int","str"],expected_shape:null,is_optional:!0,default_value:null},{name:"iid",docstring:"If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"warn"},{name:"cv",docstring:"Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.",param_type:["int","iter"],expected_shape:null,is_optional:!0,default_value:null},{name:"refit",docstring:"Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given ``cv_results_``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``GridSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. ``best_score_`` is not returned if refit is callable.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.",param_type:["bool","str","callable"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"verbose",docstring:"Controls the verbosity: the higher, the more messages.",param_type:["int"],expected_shape:null,is_optional:!1,default_value:null},{name:"error_score",docstring:"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null},{name:"return_train_score",docstring:"If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False"}],outputs:[{name:"cv_results_",docstring:"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +------------+-----------+------------+-----------------+---+---------+ |param_kernel|param_gamma|param_degree|split0_test_score|...|rank_t...| +============+===========+============+=================+===+=========+ |  'poly'    |     --    |      2     |       0.80      |...|    2    | +------------+-----------+------------+-----------------+---+---------+ |  'poly'    |     --    |      3     |       0.70      |...|    4    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.1   |     --     |       0.80      |...|    3    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.2   |     --     |       0.93      |...|    1    | +------------+-----------+------------+-----------------+---+---------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel': masked_array(data = ['poly', 'poly', 'rbf', 'rbf'],                                  mask = [False False False False]...)     'param_gamma': masked_array(data = [-- -- 0.1 0.2],                                 mask = [ True  True False False]...),     'param_degree': masked_array(data = [2.0 3.0 -- --],                                  mask = [False False  True  True]...),     'split0_test_score'  : [0.80, 0.70, 0.80, 0.93],     'split1_test_score'  : [0.82, 0.50, 0.70, 0.78],     'mean_test_score'    : [0.81, 0.60, 0.75, 0.85],     'std_test_score'     : [0.01, 0.10, 0.05, 0.08],     'rank_test_score'    : [2, 4, 3, 1],     'split0_train_score' : [0.80, 0.92, 0.70, 0.93],     'split1_train_score' : [0.82, 0.55, 0.70, 0.87],     'mean_train_score'   : [0.81, 0.74, 0.70, 0.90],     'std_train_score'    : [0.01, 0.19, 0.00, 0.03],     'mean_fit_time'      : [0.73, 0.63, 0.43, 0.49],     'std_fit_time'       : [0.01, 0.02, 0.01, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00, 0.01],     'params'             : [{'kernel': 'poly', 'degree': 2}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)",param_type:["array","dict"],returned:!1},{name:"best_estimator_",docstring:"Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  See ``refit`` parameter for more information on allowed values.",param_type:["dict"],returned:!1},{name:"best_score_",docstring:"Mean cross-validated score of the best_estimator  For multi-metric evaluation, this is present only if ``refit`` is specified.",param_type:["float"],returned:!1},{name:"best_params_",docstring:"Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is present only if ``refit`` is specified.",param_type:["dict"],returned:!1},{name:"best_index_",docstring:"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is present only if ``refit`` is specified.",param_type:["int"],returned:!1},{name:"scorer_",docstring:"Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.",param_type:["dict"],returned:!1},{name:"n_splits_",docstring:"The number of cross-validation splits (folds/iterations).",param_type:["int"],returned:!1},{name:"refit_time_",docstring:"Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.",param_type:["float"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_check_is_fitted",docstring:"None",inputs:[],outputs:[]},{name:"_format_results",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_run_search",docstring:"Search all candidates in param_grid",inputs:[],outputs:[]},{name:"decision_function",docstring:"Call decision_function on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``decision_function``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"fit",docstring:'Run fit with all sets of parameters.\n\n        Parameters\n        ----------\n\n        X : array-like, shape = [n_samples, n_features]\n            Training vector, where n_samples is the number of samples and\n            n_features is the number of features.\n\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\n            Target relative to X for classification or regression;\n            None for unsupervised learning.\n\n        groups : array-like, with shape (n_samples,), optional\n            Group labels for the samples used while splitting the dataset into\n            train/test set. Only used in conjunction with a "Group" `cv`\n            instance (e.g., `GroupKFold`).\n\n        **fit_params : dict of string -> object\n            Parameters passed to the ``fit`` method of the estimator\n        ',inputs:[{name:"X",docstring:"Training vector, where n_samples is the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null},{name:"y",docstring:"Target relative to X for classification or regression; None for unsupervised learning.",param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_output], optional",is_optional:!0,default_value:null},{name:"groups",docstring:'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a "Group" `cv` instance (e.g., `GroupKFold`).',param_type:["array"],expected_shape:"(n_samples,), optional",is_optional:!0,default_value:null},{name:"**fit_params",docstring:"Parameters passed to the ``fit`` method of the estimator",param_type:["object","str","dict"],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"get_params",docstring:"Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : boolean, optional\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.\n\n        Returns\n        -------\n        params : mapping of string to any\n            Parameter names mapped to their values.\n        ",inputs:[{name:"deep",docstring:"If True, will return the parameters for this estimator and contained subobjects that are estimators.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:null}],outputs:[{name:"params",docstring:"Parameter names mapped to their values.",param_type:["str"],returned:!0}]},{name:"inverse_transform",docstring:"Call inverse_transform on the estimator with the best found params.\n\n        Only available if the underlying estimator implements\n        ``inverse_transform`` and ``refit=True``.\n\n        Parameters\n        ----------\n        Xt : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"Xt",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict",docstring:"Call predict on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict_log_proba",docstring:"Call predict_log_proba on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict_log_proba``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict_proba",docstring:"Call predict_proba on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict_proba``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"score",docstring:"Returns the score on the given data, if the estimator has been refit.\n\n        This uses the score defined by ``scoring`` where provided, and the\n        ``best_estimator_.score`` method otherwise.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            Input data, where n_samples is the number of samples and\n            n_features is the number of features.\n\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\n            Target relative to X for classification or regression;\n            None for unsupervised learning.\n\n        Returns\n        -------\n        score : float\n        ",inputs:[{name:"X",docstring:"Input data, where n_samples is the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null},{name:"y",docstring:"Target relative to X for classification or regression; None for unsupervised learning.",param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_output], optional",is_optional:!0,default_value:null}],outputs:[{name:"score",docstring:"",param_type:["float"],returned:!0}]},{name:"set_params",docstring:"Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as pipelines). The latter have parameters of the form\n        ``<component>__<parameter>`` so that it's possible to update each\n        component of a nested object.\n\n        Returns\n        -------\n        self\n        ",inputs:[],outputs:[{name:"",docstring:"",param_type:[null],returned:!0}]},{name:"transform",docstring:"Call transform on the estimator with the best found parameters.\n\n        Only available if the underlying estimator supports ``transform`` and\n        ``refit=True``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]}],nodes:[]},{name:"RandomizedSearchCV",docstring:"Randomized search on hyper parameters.\n\n    RandomizedSearchCV implements a \"fit\" and a \"score\" method.\n    It also implements \"predict\", \"predict_proba\", \"decision_function\",\n    \"transform\" and \"inverse_transform\" if they are implemented in the\n    estimator used.\n\n    The parameters of the estimator used to apply these methods are optimized\n    by cross-validated search over parameter settings.\n\n    In contrast to GridSearchCV, not all parameter values are tried out, but\n    rather a fixed number of parameter settings is sampled from the specified\n    distributions. The number of parameter settings that are tried is\n    given by n_iter.\n\n    If all parameters are presented as a list,\n    sampling without replacement is performed. If at least one parameter\n    is given as a distribution, sampling with replacement is used.\n    It is highly recommended to use continuous distributions for continuous\n    parameters.\n\n    Note that before SciPy 0.16, the ``scipy.stats.distributions`` do not\n    accept a custom RNG instance and always use the singleton RNG from\n    ``numpy.random``. Hence setting ``random_state`` will not guarantee a\n    deterministic iteration whenever ``scipy.stats`` distributions are used to\n    define the parameter search space.\n\n    Read more in the :ref:`User Guide <randomized_parameter_search>`.\n\n    Parameters\n    ----------\n    estimator : estimator object.\n        A object of that type is instantiated for each grid point.\n        This is assumed to implement the scikit-learn estimator interface.\n        Either estimator needs to provide a ``score`` function,\n        or ``scoring`` must be passed.\n\n    param_distributions : dict\n        Dictionary with parameters names (string) as keys and distributions\n        or lists of parameters to try. Distributions must provide a ``rvs``\n        method for sampling (such as those from scipy.stats.distributions).\n        If a list is given, it is sampled uniformly.\n\n    n_iter : int, default=10\n        Number of parameter settings that are sampled. n_iter trades\n        off runtime vs quality of the solution.\n\n    scoring : string, callable, list/tuple, dict or None, default: None\n        A single string (see :ref:`scoring_parameter`) or a callable\n        (see :ref:`scoring`) to evaluate the predictions on the test set.\n\n        For evaluating multiple metrics, either give a list of (unique) strings\n        or a dict with names as keys and callables as values.\n\n        NOTE that when using custom scorers, each scorer should return a single\n        value. Metric functions returning a list/array of values can be wrapped\n        into multiple scorers that return one value each.\n\n        See :ref:`multimetric_grid_search` for an example.\n\n        If None, the estimator's score method is used.\n\n    n_jobs : int or None, optional (default=None)\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    pre_dispatch : int, or string, optional\n        Controls the number of jobs that get dispatched during parallel\n        execution. Reducing this number can be useful to avoid an\n        explosion of memory consumption when more jobs get dispatched\n        than CPUs can process. This parameter can be:\n\n            - None, in which case all the jobs are immediately\n              created and spawned. Use this for lightweight and\n              fast-running jobs, to avoid delays due to on-demand\n              spawning of the jobs\n\n            - An int, giving the exact number of total jobs that are\n              spawned\n\n            - A string, giving an expression as a function of n_jobs,\n              as in '2*n_jobs'\n\n    iid : boolean, default='warn'\n        If True, return the average score across folds, weighted by the number\n        of samples in each test set. In this case, the data is assumed to be\n        identically distributed across the folds, and the loss minimized is\n        the total loss per sample, and not the mean loss across the folds. If\n        False, return the average score across folds. Default is True, but\n        will change to False in version 0.22, to correspond to the standard\n        definition of cross-validation.\n\n        .. versionchanged:: 0.20\n            Parameter ``iid`` will change from True to False by default in\n            version 0.22, and will be removed in 0.24.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n        - None, to use the default 3-fold cross validation,\n        - integer, to specify the number of folds in a `(Stratified)KFold`,\n        - :term:`CV splitter`,\n        - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer/None inputs, if the estimator is a classifier and ``y`` is\n        either binary or multiclass, :class:`StratifiedKFold` is used. In all\n        other cases, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validation strategies that can be used here.\n\n        .. versionchanged:: 0.20\n            ``cv`` default value if None will change from 3-fold to 5-fold\n            in v0.22.\n\n    refit : boolean, string, or callable, default=True\n        Refit an estimator using the best found parameters on the whole\n        dataset.\n\n        For multiple metric evaluation, this needs to be a string denoting the\n        scorer that would be used to find the best parameters for refitting\n        the estimator at the end.\n\n        Where there are considerations other than maximum score in\n        choosing a best estimator, ``refit`` can be set to a function which\n        returns the selected ``best_index_`` given the ``cv_results``.\n\n        The refitted estimator is made available at the ``best_estimator_``\n        attribute and permits using ``predict`` directly on this\n        ``RandomizedSearchCV`` instance.\n\n        Also for multiple metric evaluation, the attributes ``best_index_``,\n        ``best_score_`` and ``best_params_`` will only be available if\n        ``refit`` is set and all of them will be determined w.r.t this specific\n        scorer. When refit is callable, ``best_score_`` is disabled.\n\n        See ``scoring`` parameter to know more about multiple metric\n        evaluation.\n\n        .. versionchanged:: 0.20\n            Support for callable added.\n\n    verbose : integer\n        Controls the verbosity: the higher, the more messages.\n\n    random_state : int, RandomState instance or None, optional, default=None\n        Pseudo random number generator state used for random uniform sampling\n        from lists of possible values instead of scipy.stats distributions.\n        If int, random_state is the seed used by the random number generator;\n        If RandomState instance, random_state is the random number generator;\n        If None, the random number generator is the RandomState instance used\n        by `np.random`.\n\n    error_score : 'raise' or numeric\n        Value to assign to the score if an error occurs in estimator fitting.\n        If set to 'raise', the error is raised. If a numeric value is given,\n        FitFailedWarning is raised. This parameter does not affect the refit\n        step, which will always raise the error. Default is 'raise' but from\n        version 0.22 it will change to np.nan.\n\n    return_train_score : boolean, default=False\n        If ``False``, the ``cv_results_`` attribute will not include training\n        scores.\n        Computing training scores is used to get insights on how different\n        parameter settings impact the overfitting/underfitting trade-off.\n        However computing the scores on the training set can be computationally\n        expensive and is not strictly required to select the parameters that\n        yield the best generalization performance.\n\n    Attributes\n    ----------\n    cv_results_ : dict of numpy (masked) ndarrays\n        A dict with keys as column headers and values as columns, that can be\n        imported into a pandas ``DataFrame``.\n\n        For instance the below given table\n\n        +--------------+-------------+-------------------+---+---------------+\n        | param_kernel | param_gamma | split0_test_score |...|rank_test_score|\n        +==============+=============+===================+===+===============+\n        |    'rbf'     |     0.1     |       0.80        |...|       2       |\n        +--------------+-------------+-------------------+---+---------------+\n        |    'rbf'     |     0.2     |       0.90        |...|       1       |\n        +--------------+-------------+-------------------+---+---------------+\n        |    'rbf'     |     0.3     |       0.70        |...|       1       |\n        +--------------+-------------+-------------------+---+---------------+\n\n        will be represented by a ``cv_results_`` dict of::\n\n            {\n            'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],\n                                          mask = False),\n            'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),\n            'split0_test_score'  : [0.80, 0.90, 0.70],\n            'split1_test_score'  : [0.82, 0.50, 0.70],\n            'mean_test_score'    : [0.81, 0.70, 0.70],\n            'std_test_score'     : [0.01, 0.20, 0.00],\n            'rank_test_score'    : [3, 1, 1],\n            'split0_train_score' : [0.80, 0.92, 0.70],\n            'split1_train_score' : [0.82, 0.55, 0.70],\n            'mean_train_score'   : [0.81, 0.74, 0.70],\n            'std_train_score'    : [0.01, 0.19, 0.00],\n            'mean_fit_time'      : [0.73, 0.63, 0.43],\n            'std_fit_time'       : [0.01, 0.02, 0.01],\n            'mean_score_time'    : [0.01, 0.06, 0.04],\n            'std_score_time'     : [0.00, 0.00, 0.00],\n            'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],\n            }\n\n        NOTE\n\n        The key ``'params'`` is used to store a list of parameter\n        settings dicts for all the parameter candidates.\n\n        The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and\n        ``std_score_time`` are all in seconds.\n\n        For multi-metric evaluation, the scores for all the scorers are\n        available in the ``cv_results_`` dict at the keys ending with that\n        scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown\n        above. ('split0_test_precision', 'mean_train_precision' etc.)\n\n    best_estimator_ : estimator or dict\n        Estimator that was chosen by the search, i.e. estimator\n        which gave highest score (or smallest loss if specified)\n        on the left out data. Not available if ``refit=False``.\n\n        For multi-metric evaluation, this attribute is present only if\n        ``refit`` is specified.\n\n        See ``refit`` parameter for more information on allowed values.\n\n    best_score_ : float\n        Mean cross-validated score of the best_estimator.\n\n        For multi-metric evaluation, this is not available if ``refit`` is\n        ``False``. See ``refit`` parameter for more information.\n\n    best_params_ : dict\n        Parameter setting that gave the best results on the hold out data.\n\n        For multi-metric evaluation, this is not available if ``refit`` is\n        ``False``. See ``refit`` parameter for more information.\n\n    best_index_ : int\n        The index (of the ``cv_results_`` arrays) which corresponds to the best\n        candidate parameter setting.\n\n        The dict at ``search.cv_results_['params'][search.best_index_]`` gives\n        the parameter setting for the best model, that gives the highest\n        mean score (``search.best_score_``).\n\n        For multi-metric evaluation, this is not available if ``refit`` is\n        ``False``. See ``refit`` parameter for more information.\n\n    scorer_ : function or a dict\n        Scorer function used on the held out data to choose the best\n        parameters for the model.\n\n        For multi-metric evaluation, this attribute holds the validated\n        ``scoring`` dict which maps the scorer key to the scorer callable.\n\n    n_splits_ : int\n        The number of cross-validation splits (folds/iterations).\n\n    refit_time_ : float\n        Seconds used for refitting the best model on the whole dataset.\n\n        This is present only if ``refit`` is not False.\n\n    Notes\n    -----\n    The parameters selected are those that maximize the score of the held-out\n    data, according to the scoring parameter.\n\n    If `n_jobs` was set to a value higher than one, the data is copied for each\n    parameter setting(and not `n_jobs` times). This is done for efficiency\n    reasons if individual jobs take very little time, but may raise errors if\n    the dataset is large and not enough memory is available.  A workaround in\n    this case is to set `pre_dispatch`. Then, the memory is copied only\n    `pre_dispatch` many times. A reasonable value for `pre_dispatch` is `2 *\n    n_jobs`.\n\n    See Also\n    --------\n    :class:`GridSearchCV`:\n        Does exhaustive search over a grid of parameters.\n\n    :class:`ParameterSampler`:\n        A generator over parameter settings, constructed from\n        param_distributions.\n\n    ",inputs:[{name:"estimator",docstring:"A object of that type is instantiated for each grid point. This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.",param_type:["object"],expected_shape:null,is_optional:!1,default_value:null},{name:"param_distributions",docstring:"Dictionary with parameters names (string) as keys and distributions or lists of parameters to try. Distributions must provide a ``rvs`` method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly.",param_type:["dict"],expected_shape:null,is_optional:!1,default_value:null},{name:"n_iter",docstring:"Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution.",param_type:["int"],expected_shape:null,is_optional:!0,default_value:"10"},{name:"scoring",docstring:"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.",param_type:["str","dict","list","tuple","callable",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"n_jobs",docstring:"Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",param_type:["int",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"pre_dispatch",docstring:"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'",param_type:["int","str"],expected_shape:null,is_optional:!0,default_value:null},{name:"iid",docstring:"If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"warn"},{name:"cv",docstring:"Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.",param_type:["int","iter"],expected_shape:null,is_optional:!0,default_value:null},{name:"refit",docstring:"Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given the ``cv_results``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``RandomizedSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. When refit is callable, ``best_score_`` is disabled.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.",param_type:["bool","str","callable"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"verbose",docstring:"Controls the verbosity: the higher, the more messages.",param_type:["int"],expected_shape:null,is_optional:!1,default_value:null},{name:"random_state",docstring:"Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.",param_type:["int",null],expected_shape:null,is_optional:!0,default_value:"None"},{name:"error_score",docstring:"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null},{name:"return_train_score",docstring:"If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False"}],outputs:[{name:"cv_results_",docstring:"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +--------------+-------------+-------------------+---+---------------+ | param_kernel | param_gamma | split0_test_score |...|rank_test_score| +==============+=============+===================+===+===============+ |    'rbf'     |     0.1     |       0.80        |...|       2       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.2     |       0.90        |...|       1       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.3     |       0.70        |...|       1       | +--------------+-------------+-------------------+---+---------------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],                                   mask = False),     'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),     'split0_test_score'  : [0.80, 0.90, 0.70],     'split1_test_score'  : [0.82, 0.50, 0.70],     'mean_test_score'    : [0.81, 0.70, 0.70],     'std_test_score'     : [0.01, 0.20, 0.00],     'rank_test_score'    : [3, 1, 1],     'split0_train_score' : [0.80, 0.92, 0.70],     'split1_train_score' : [0.82, 0.55, 0.70],     'mean_train_score'   : [0.81, 0.74, 0.70],     'std_train_score'    : [0.01, 0.19, 0.00],     'mean_fit_time'      : [0.73, 0.63, 0.43],     'std_fit_time'       : [0.01, 0.02, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00],     'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)",param_type:["array","dict"],returned:!1},{name:"best_estimator_",docstring:"Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  For multi-metric evaluation, this attribute is present only if ``refit`` is specified.  See ``refit`` parameter for more information on allowed values.",param_type:["dict"],returned:!1},{name:"best_score_",docstring:"Mean cross-validated score of the best_estimator.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.",param_type:["float"],returned:!1},{name:"best_params_",docstring:"Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.",param_type:["dict"],returned:!1},{name:"best_index_",docstring:"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.",param_type:["int"],returned:!1},{name:"scorer_",docstring:"Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.",param_type:["dict"],returned:!1},{name:"n_splits_",docstring:"The number of cross-validation splits (folds/iterations).",param_type:["int"],returned:!1},{name:"refit_time_",docstring:"Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.",param_type:["float"],returned:!1}],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"_check_is_fitted",docstring:"None",inputs:[],outputs:[]},{name:"_format_results",docstring:"None",inputs:[],outputs:[]},{name:"_get_param_names",docstring:"Get parameter names for the estimator",inputs:[],outputs:[]},{name:"_get_tags",docstring:"None",inputs:[],outputs:[]},{name:"_run_search",docstring:"Search n_iter candidates from param_distributions",inputs:[],outputs:[]},{name:"decision_function",docstring:"Call decision_function on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``decision_function``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"fit",docstring:'Run fit with all sets of parameters.\n\n        Parameters\n        ----------\n\n        X : array-like, shape = [n_samples, n_features]\n            Training vector, where n_samples is the number of samples and\n            n_features is the number of features.\n\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\n            Target relative to X for classification or regression;\n            None for unsupervised learning.\n\n        groups : array-like, with shape (n_samples,), optional\n            Group labels for the samples used while splitting the dataset into\n            train/test set. Only used in conjunction with a "Group" `cv`\n            instance (e.g., `GroupKFold`).\n\n        **fit_params : dict of string -> object\n            Parameters passed to the ``fit`` method of the estimator\n        ',inputs:[{name:"X",docstring:"Training vector, where n_samples is the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null},{name:"y",docstring:"Target relative to X for classification or regression; None for unsupervised learning.",param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_output], optional",is_optional:!0,default_value:null},{name:"groups",docstring:'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a "Group" `cv` instance (e.g., `GroupKFold`).',param_type:["array"],expected_shape:"(n_samples,), optional",is_optional:!0,default_value:null},{name:"**fit_params",docstring:"Parameters passed to the ``fit`` method of the estimator",param_type:["object","str","dict"],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"get_params",docstring:"Get parameters for this estimator.\n\n        Parameters\n        ----------\n        deep : boolean, optional\n            If True, will return the parameters for this estimator and\n            contained subobjects that are estimators.\n\n        Returns\n        -------\n        params : mapping of string to any\n            Parameter names mapped to their values.\n        ",inputs:[{name:"deep",docstring:"If True, will return the parameters for this estimator and contained subobjects that are estimators.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:null}],outputs:[{name:"params",docstring:"Parameter names mapped to their values.",param_type:["str"],returned:!0}]},{name:"inverse_transform",docstring:"Call inverse_transform on the estimator with the best found params.\n\n        Only available if the underlying estimator implements\n        ``inverse_transform`` and ``refit=True``.\n\n        Parameters\n        ----------\n        Xt : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"Xt",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict",docstring:"Call predict on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict_log_proba",docstring:"Call predict_log_proba on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict_log_proba``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"predict_proba",docstring:"Call predict_proba on the estimator with the best found parameters.\n\n        Only available if ``refit=True`` and the underlying estimator supports\n        ``predict_proba``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]},{name:"score",docstring:"Returns the score on the given data, if the estimator has been refit.\n\n        This uses the score defined by ``scoring`` where provided, and the\n        ``best_estimator_.score`` method otherwise.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            Input data, where n_samples is the number of samples and\n            n_features is the number of features.\n\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\n            Target relative to X for classification or regression;\n            None for unsupervised learning.\n\n        Returns\n        -------\n        score : float\n        ",inputs:[{name:"X",docstring:"Input data, where n_samples is the number of samples and n_features is the number of features.",param_type:["array"],expected_shape:"[n_samples, n_features]",is_optional:!1,default_value:null},{name:"y",docstring:"Target relative to X for classification or regression; None for unsupervised learning.",param_type:["array"],expected_shape:"[n_samples] or [n_samples, n_output], optional",is_optional:!0,default_value:null}],outputs:[{name:"score",docstring:"",param_type:["float"],returned:!0}]},{name:"set_params",docstring:"Set the parameters of this estimator.\n\n        The method works on simple estimators as well as on nested objects\n        (such as pipelines). The latter have parameters of the form\n        ``<component>__<parameter>`` so that it's possible to update each\n        component of a nested object.\n\n        Returns\n        -------\n        self\n        ",inputs:[],outputs:[{name:"",docstring:"",param_type:[null],returned:!0}]},{name:"transform",docstring:"Call transform on the estimator with the best found parameters.\n\n        Only available if the underlying estimator supports ``transform`` and\n        ``refit=True``.\n\n        Parameters\n        ----------\n        X : indexable, length n_samples\n            Must fulfill the input assumptions of the\n            underlying estimator.\n\n        ",inputs:[{name:"X",docstring:"Must fulfill the input assumptions of the underlying estimator.",param_type:[null],expected_shape:null,is_optional:!1,default_value:null}],outputs:[]}],nodes:[]}],library:"sklearn",module:"model_selection"},Fm={name:"sklearn.metrics",docstring:"",inputs:[],outputs:[],node_functions:[],nodes:[{name:"Regression Metrics",docstring:"Module to provide functions for most common metrics to evaluate Regression Models",inputs:[],outputs:[],node_functions:[{name:"r2_score",docstring:"R^2 (coefficient of determination) regression score function.\n\n    Best possible score is 1.0 and it can be negative (because the\n    model can be arbitrarily worse). A constant model that always\n    predicts the expected value of y, disregarding the input features,\n    would get a R^2 score of 0.0.",inputs:[{name:"y_true",docstring:"Ground truth (correct) target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"y_pred",docstring:"Estimated target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"(n_samples), optional",is_optional:!0,default_value:null},{name:"multioutput",docstring:"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \"uniform_average\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.  'variance_weighted' :     Scores of all outputs are averaged, weighted by the variances     of each individual output.",param_type:["array","LIST_VALID_OPTIONS",null],expected_shape:"(n_outputs)",is_optional:!0,default_value:"uniform_average",options:["raw_values","uniform_average","variance_weighted"]}],outputs:[{name:"z",docstring:"The R^2 score or ndarray of scores if 'multioutput' is 'raw_values'.",param_type:["array","float"],returned:!0}]},{name:"mean_absolute_error",docstring:"Mean absolute error regression loss",inputs:[{name:"y_true",docstring:"Ground truth (correct) target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"y_pred",docstring:"Estimated target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"(n_samples), optional",is_optional:!0,default_value:null},{name:"multioutput",docstring:"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \"uniform_average\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.",param_type:["array","LIST_VALID_OPTIONS",null],expected_shape:"(n_outputs)",is_optional:!0,default_value:"uniform_average",options:["raw_values","uniform_average"]}],outputs:[{name:"loss",docstring:"If multioutput is 'raw_values', then mean absolute error is returned for each output separately. If multioutput is 'uniform_average' or an ndarray of weights, then the weighted average of all output errors is returned.  MAE output is non-negative floating point. The best value is 0.0.",param_type:["array","float"],returned:!0}]},{name:"mean_squared_error",docstring:"Mean squared error regression loss",inputs:[{name:"y_true",docstring:"Ground truth (correct) target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"y_pred",docstring:"Estimated target values.",param_type:["array"],expected_shape:"(n_samples) or (n_samples, n_outputs)",is_optional:!1,default_value:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"(n_samples), optional",is_optional:!0,default_value:null},{name:"multioutput",docstring:"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \"uniform_average\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.",param_type:["array","LIST_VALID_OPTIONS",null],expected_shape:"(n_outputs)",is_optional:!0,default_value:"uniform_average",options:["raw_values","uniform_average"]}],outputs:[{name:"loss",docstring:"A non-negative floating point value (the best value is 0.0), or an array of floating point values, one for each individual target.",param_type:["array","float"],returned:!0}]}],nodes:[],placeholder:!0},{name:"Classification Metrics",docstring:"Module to provide functions for most common metrics to evaluate Classification Models",inputs:[],outputs:[],node_functions:[{name:"accuracy_score",docstring:"Accuracy classification score.\n\n    In multilabel classification, this function computes subset accuracy:\n    the set of labels predicted for a sample must *exactly* match the\n    corresponding set of labels in y_true.",inputs:[{name:"y_true",docstring:"Ground truth (correct) labels.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null},{name:"y_pred",docstring:"Predicted labels, as returned by a classifier.",param_type:["array"],expected_shape:null,is_optional:!1,default_value:null},{name:"normalize",docstring:"If ``False``, return the number of correctly classified samples. Otherwise, return the fraction of correctly classified samples.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"True"},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"[n_samples], optional",is_optional:!0,default_value:null}],outputs:[{name:"score",docstring:"If ``normalize == True``, return the fraction of correctly classified samples (float), else returns the number of correctly classified samples (int).  The best performance is 1 with ``normalize == True`` and the number of samples with ``normalize == False``.",param_type:["float"],returned:!0}]},{name:"confusion_matrix",docstring:"Compute confusion matrix to evaluate the accuracy of a classification\n\n    By definition a confusion matrix :math:`C` is such that :math:`C_{i, j}`\n    is equal to the number of observations known to be in group :math:`i` but\n    predicted to be in group :math:`j`.\n\n    Thus in binary classification, the count of true negatives is\n    :math:`C_{0,0}`, false negatives is :math:`C_{1,0}`, true positives is\n    :math:`C_{1,1}` and false positives is :math:`C_{0,1}`.",inputs:[{name:"y_true",docstring:"Ground truth (correct) target values.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null},{name:"y_pred",docstring:"Estimated targets as returned by a classifier.",param_type:["array"],expected_shape:"[n_samples]",is_optional:!1,default_value:null},{name:"labels",docstring:"List of labels to index the matrix. This may be used to reorder or select a subset of labels. If none is given, those that appear at least once in ``y_true`` or ``y_pred`` are used in sorted order.",param_type:["array"],expected_shape:"[n_classes], optional",is_optional:!0,default_value:null},{name:"sample_weight",docstring:"Sample weights.",param_type:["array"],expected_shape:"[n_samples], optional",is_optional:!0,default_value:null}],outputs:[{name:"C",docstring:"Confusion matrix",param_type:["array"],returned:!0}]}],nodes:[],placeholder:!0}],library:"sklearn",module:"metrics"},Dm={name:"chemml.wrapper.preprocessing",docstring:"",inputs:[],outputs:[],node_functions:[],nodes:[{name:"SaveCSV",docstring:"\n    Write pandas DataFrame to a comma-seprated-values(CSV) file.",inputs:[{name:"file_path",docstring:"The path for the CSV file",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"record_time",docstring:"If True, the current time will be added to the file name.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"index",docstring:"If True, the index of the dataframe will be also stored as the first column.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null},{name:"header",docstring:"If True, the header of the dataframe will be stored.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"write",display_name:"write",docstring:"\n        Write DataFrame to a comma-seprated-values CSV) file.",inputs:[{name:"df",docstring:"The input pandas dataframe",param_type:["dataframe"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"main_directory",docstring:"if there is a main directory for entire chemml wrapper project",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"",options:null}],outputs:[]}],nodes:[]},{name:"SaveFile",docstring:"\n    Write any input data to a file in string format.\n    This is good for making text files and keeping track of intermediate data.",inputs:[{name:"file_path",docstring:"The path for the CSV file",param_type:["str"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"record_time",docstring:"If True, the current time will be added to the file name.",param_type:["bool"],expected_shape:null,is_optional:!0,default_value:"False",options:null}],outputs:[],node_functions:[{name:"__init__",docstring:"None",inputs:[],outputs:[]},{name:"write",display_name:"write",docstring:"\n        This function Write an input data X to a file as a string.",inputs:[{name:"df",docstring:"The input pandas dataframe",param_type:["dataframe"],expected_shape:null,is_optional:!1,default_value:null,options:null},{name:"main_directory",docstring:"if there is a main directory for entire chemml wrapper project",param_type:["str"],expected_shape:null,is_optional:!0,default_value:"",options:null}],outputs:[]}],nodes:[]}],library:"chemml",module:"wrapper.preprocessing"};function Am(e,t){if(1&e){var n=Ur();zr(0,"div",19),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit;return Wr(2).selectNodeType(e,a.name)})),ci(1),Lr()}if(2&e){var a=t.$implicit,o=t.index,r=Wr(2);Zr("id","node_",o,"'"),Nr("ngClass",r.select_node_type==o?"selected_button":""),Fr("value",a.name),Fa(1),pi(a.name)}}function Em(e,t){if(1&e){var n=Ur();zr(0,"div",20),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit;return Wr(2).selectClassMethod(e,a.name)})),ci(1),Lr()}if(2&e){var a=t.$implicit,o=t.index,r=Wr(2);Zr("id","class_method_",o,""),Nr("ngClass",r.select_method_type==o?"selected_button":""),Fr("value",a.name),Fa(1),pi(a.name)}}function Rm(e,t){if(1&e){var n=Ur();zr(0,"div",25),zr(1,"input",26),Vr("change",(function(e){Gt(n);var t=Wr().$implicit;return Wr(2).getParameterValue(e,t.name)})),Lr(),zr(2,"div",27),ci(3," Select a CSV file. "),Lr(),zr(4,"div",28),ci(5,"Select File"),Lr(),Xr(6,"p",29),Lr()}}function Nm(e,t){if(1&e){var n=Ur();zr(0,"div",30),zr(1,"input",31),Vr("focusout",(function(e){Gt(n);var t=Wr().$implicit;return Wr(2).getParameterValue(e,t.name)})),Lr(),Lr()}if(2&e){var a=Wr(),o=a.index,r=a.$implicit;Fa(1),Zr("id","parameter_",o,""),Nr("placeholder",null!=r.default_value?r.default_value:"Enter Value")}}function jm(e,t){if(1&e&&(zr(0,"div",21),zr(1,"div",22),ci(2),ls(3,"titlecase"),Lr(),Ar(4,Rm,7,0,"div",23),Ar(5,Nm,2,2,"div",24),Lr()),2&e){var n=t.$implicit;Fa(2),pi(us(3,3,n.name)),Fa(2),Nr("ngIf","object"==n.param_type[0]),Fa(1),Nr("ngIf","object"!=n.param_type[0])}}function zm(e,t){if(1&e){var n=Ur();zr(0,"div",1),zr(1,"div",2),zr(2,"div",3),Vr("click",(function(){return Gt(n),Wr().show=!1})),Xr(3,"img",4),Lr(),zr(4,"div",5),zr(5,"p",6),ci(6),ls(7,"uppercase"),Lr(),zr(8,"div"),ci(9," Properties "),Lr(),Lr(),zr(10,"div",7),zr(11,"div",8),ci(12,"Data"),Lr(),zr(13,"div",9),ci(14,"Preview"),Lr(),Lr(),zr(15,"div",10),zr(16,"div",11),zr(17,"div",12),ci(18,"Node Type"),Lr(),Ar(19,Am,2,4,"div",13),Lr(),zr(20,"div",11),zr(21,"div",12),ci(22,"Class Type"),Lr(),Ar(23,Em,2,4,"div",14),Lr(),zr(24,"div",11),zr(25,"div",12),ci(26,"Base Parameters"),Lr(),Ar(27,jm,6,5,"div",15),Lr(),Lr(),zr(28,"div",16),zr(29,"div",17),ci(30,"Visualize Output From Node"),Lr(),zr(31,"div",18),Vr("click",(function(){return Gt(n),Wr().saveConfig()})),ci(32,"Done"),Lr(),Lr(),Lr(),Lr()}if(2&e){var a=Wr();Fa(6),di(" ",us(7,4,a.tooltype)," "),Fa(13),Nr("ngForOf",a.nodes),Fa(4),Nr("ngForOf",a.filter_methods()),Fa(4),Nr("ngForOf",a.input_parameters)}}var Lm,Xm=((Lm=function(){function e(t){var n=this;_classCallCheck(this,e),this.currentProjectService=t,this.jsonToolTypeMap={csv:{json:xm,parsing_method:0},"chemical-data":{json:wm,parsing_method:0},"svm-model":{json:Cm,parsing_method:1},"linear-model":{json:km,parsing_method:1},"nn-model":{json:Tm,parsing_method:1},"dim-reduction":{json:Pm,parsing_method:1},"chemml-represent":{json:Sm,parsing_method:1},"preprocessing-node":{json:Om,parsing_method:1},"data-splitting":{json:Mm,parsing_method:1},"model-selection":{json:Im,parsing_method:1},"model-metrics":{json:Fm,parsing_method:1},"helper-functions":{json:Dm,parsing_method:1}},this.nodeJson={inputs:{},library:"",method:{inputs:{},name:"",outputs:{}},module:"",name:"",outputs:{}},this.currentProjectService.chemMLJsonChange.subscribe((function(e){n.chemMLJson=e})),this.chemMLJson=this.currentProjectService.getCurrentChemMLJson(),this.show=!1,this.select_node_type=0,this.select_method_type=0}return _createClass(e,[{key:"ngOnInit",value:function(){console.log(this.jsonToolTypeMap,this.tooltype),this.toolConfigParamtersUi=this.jsonToolTypeMap[this.tooltype].json,0==this.jsonToolTypeMap[this.tooltype].parsing_method?(this.nodes=this.toolConfigParamtersUi.node_functions,this.class_methods=this.toolConfigParamtersUi.node_functions[this.select_node_type].outputs,this.input_parameters=this.toolConfigParamtersUi.node_functions[this.select_node_type].inputs):(1==this.jsonToolTypeMap[this.tooltype].parsing_method||2==this.jsonToolTypeMap[this.tooltype].parsing_method)&&(this.nodes=this.toolConfigParamtersUi.nodes,this.class_methods=this.toolConfigParamtersUi.nodes[this.select_node_type].node_functions,this.input_parameters=this.toolConfigParamtersUi.nodes[this.select_node_type].inputs),this.selectNodeType(0,this.nodes[0].name),this.selectClassMethod(0,this.filter_methods()[0].name),this.nodeJson.library=this.toolConfigParamtersUi.library,this.nodeJson.module=this.toolConfigParamtersUi.module}},{key:"filter_methods",value:function(){return this.class_methods.filter((function(e){return"_"!=e.name.charAt(0)}))}},{key:"selectNodeType",value:function(e,t){this.select_node_type=e,this.nodeJson.name=t,console.log(this.nodeJson),0==this.jsonToolTypeMap[this.tooltype].parsing_method?(this.class_methods=this.toolConfigParamtersUi.node_functions[this.select_node_type].outputs,this.input_parameters=this.toolConfigParamtersUi.node_functions[this.select_node_type].inputs):1==this.jsonToolTypeMap[this.tooltype].parsing_method&&(this.class_methods=this.toolConfigParamtersUi.nodes[this.select_node_type].node_functions,this.input_parameters=this.toolConfigParamtersUi.nodes[this.select_node_type].inputs,console.log(this.input_parameters))}},{key:"selectClassMethod",value:function(e,t){this.select_method_type=e,this.nodeJson.method.name=t,console.log(this.nodeJson)}},{key:"getParameterValue",value:function(e,t){this.nodeJson.inputs[t]=e.target.value,console.log(this.nodeJson)}},{key:"saveConfig",value:function(){this.show=!1;var e={};e[this.toolid]=this.nodeJson,console.log("FINAL CONFIG FOR NODE: ",this.toolid,e),console.log("Current Json",JSON.stringify(this.chemMLJson)),this.chemMLJson.nodes[this.toolid]=this.nodeJson}}]),e}()).\u0275fac=function(e){return new(e||Lm)(Er(cm))},Lm.\u0275cmp=ct({type:Lm,selectors:[["app-tool-config"]],inputs:{show:"show",tooltype:"tooltype",tool:"tool",toolid:"toolid"},decls:1,vars:1,consts:[["id","propwrap",4,"ngIf"],["id","propwrap"],["id","properties"],["id","close",3,"click"],["src","assets/close.svg"],["id","header2"],["id","tooltype"],["id","propswitch"],["id","dataprop"],["id","alertprop"],["id","proplist"],[1,"config-block"],[1,"config-title"],["class","node-function-name",3,"ngClass","id","click",4,"ngFor","ngForOf"],["class","node-function-name",3,"id","ngClass","click",4,"ngFor","ngForOf"],["class","base_parameters_container",4,"ngFor","ngForOf"],[1,"tool-config-footer"],["id","removeblock"],["id","visualize_btn",3,"click"],[1,"node-function-name",3,"ngClass","id","click"],[1,"node-function-name",3,"id","ngClass","click"],[1,"base_parameters_container"],[1,"parameter_name"],["style","width: 105%;",4,"ngIf"],["class","paramInput",4,"ngIf"],[2,"width","105%"],["type","file","id","csv_load","value","./temp/Boston.csv","hidden","","multiple","",3,"change"],["id","input_filename"],["onclick","document.getElementById('csv_load').click()","type","file","id","myfile","name","myfile",1,"select_file_btn"],["id","filename"],[1,"paramInput"],["type","text",1,"input_text",3,"placeholder","id","focusout"]],template:function(e,t){1&e&&Ar(0,zm,33,6,"div",0),2&e&&Nr("ngIf",t.show)},directives:[Ru,Au,Fu],pipes:[Ju,Ku],styles:['#propwrap[_ngcontent-%COMP%]{right:0;top:70px;width:40%;height:90%;overflow:hidden;z-index:1000}#properties[_ngcontent-%COMP%], #propwrap[_ngcontent-%COMP%]{position:absolute;padding-left:20px}#properties[_ngcontent-%COMP%]{height:100%;width:85%;background-color:#fff;right:-9%;opacity:1;padding-right:0;z-index:2;box-shadow:0 2px 25px #eae6e6;transition:all .25s cubic-bezier(.05,.03,.35,1);border-left:5px solid #f1f1f1}.config-block[_ngcontent-%COMP%]{clear:both;display:block;padding-top:3%!important;padding-right:8%;margin-bottom:12%}.itson[_ngcontent-%COMP%]{z-index:2!important}#tooltype[_ngcontent-%COMP%]{width:auto;display:inline-block;margin-bottom:2%;background-color:#6d6d6f;color:#fff;border-radius:60px;border-radius:33px;font-size:.8em;padding:1.2% 2.5% .8%}.paramName[_ngcontent-%COMP%]{font-family:Roboto;font-weight:700;font-size:20px;margin-bottom:1%}.paramInput[_ngcontent-%COMP%]{display:inline-block;width:100%}.expanded[_ngcontent-%COMP%]{right:0!important;opacity:1!important;box-shadow:-4px 0 40px rgba(26,26,73,.05);z-index:2}#header2[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;margin-top:19px}#close[_ngcontent-%COMP%]{margin-top:9px;margin-right:9px;position:absolute;right:10%;z-index:9999;transition:all .25s cubic-bezier(.05,.03,.35,1);border-radius:9px;border:2px solid #fff;padding:3px 5px 5px 6px}#close[_ngcontent-%COMP%]:hover{cursor:pointer;border:2px solid #e9e8ef;background-color:#fbfbfb}.paramContainer[_ngcontent-%COMP%]{margin:1% 1% 2%}.select_file_btn[_ngcontent-%COMP%]{display:inline-block;width:26%;padding:1.65%;border:4px solid #227ce8;border-radius:0;color:#fff;font-family:Roboto;background-color:#227ce8;font-size:1em;text-align:center;cursor:pointer;border-top-right-radius:8px;border-bottom-right-radius:8px}#proplist[_ngcontent-%COMP%]{height:65%;overflow:scroll;padding-right:11%;padding-left:3%;margin-bottom:0}.tool-config-footer[_ngcontent-%COMP%]{position:absolute;bottom:5%;z-index:1000;padding-right:4%!important;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;width:91%;padding:3%;clear:both;left:0;background-color:#fff;border-top:1px solid #e2e2e2}.parameter_name[_ngcontent-%COMP%]{padding-top:3%;padding-bottom:1%}.input_text[_ngcontent-%COMP%], .parameter_name[_ngcontent-%COMP%]{font-size:1.2em;font-family:Roboto}.input_text[_ngcontent-%COMP%]{padding:2%;width:100%;display:inline-block;border-radius:0;background-color:#fff;border:1px solid #e2e2e2;outline:None!important}.config-title[_ngcontent-%COMP%]{font-size:20px;font-weight:700;color:#393c44}.config-title[_ngcontent-%COMP%], .node-function-name[_ngcontent-%COMP%]{font-family:Roboto;margin-bottom:1%}.node-function-name[_ngcontent-%COMP%]{background-color:#f1f4fc;border-radius:50px;font-size:1.1em;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1.5% 3%;display:inline-block;cursor:pointer;float:left;margin-right:2%;margin-top:2%;color:#525252;border-radius:29px;border:1px solid #e8e8ef;transition:.2s}.node-function-name[_ngcontent-%COMP%]:hover{background-color:#fbfbfb}.selected_button[_ngcontent-%COMP%]{color:#fff!important;background-color:#217ce8!important}#propswitch[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:100%;margin-top:10px;margin-left:-20px;margin-bottom:30px}#dataprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:44%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#dataprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#alertprop[_ngcontent-%COMP%]{font-weight:500;color:#808292;font-size:14px;height:48px;line-height:48px;width:44%;text-align:center;float:left}#alertprop[_ngcontent-%COMP%], .inputlabel[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto}.inputlabel[_ngcontent-%COMP%]{font-size:1.1em;color:#253134;font-weight:800}.dropme[_ngcontent-%COMP%]{background-color:#fff;border-radius:5px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);font-family:Roboto;font-size:14px;color:#253134;text-indent:20px;height:40px;line-height:40px;width:287px;margin-bottom:25px}.dropme[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:17px;float:right;margin-right:15px}.checkus[_ngcontent-%COMP%]{margin-bottom:10px}.checkus[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;margin-left:10px}#divisionthing[_ngcontent-%COMP%]{height:1px;width:100%;background-color:#e8e8ef;position:absolute;right:0;bottom:85px}#removeblock[_ngcontent-%COMP%]{width:287px;color:#253134}#removeblock[_ngcontent-%COMP%], #visualize_btn[_ngcontent-%COMP%]{border-radius:5px;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;height:38px;line-height:38px;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1);display:inline-block}#visualize_btn[_ngcontent-%COMP%]{width:15%;color:#fff;right:12%;background-color:#247ce8;cursor:pointer;float:right}#input_filename[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;border:1px solid #e2e2e2;padding:2%;width:70%}']}),Lm);function Um(e,t){if(1&e){var n=Ur();zr(0,"div",19),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit;return Wr(2).selectOutputType(e,a.name)})),ci(1),Lr()}if(2&e){var a=t.$implicit,o=t.index,r=Wr(2);Zr("id","node_",o,"'"),Nr("ngClass",r.select_output_type==o?"selected_button":""),Fr("value",a.name),Fa(1),pi(a.name)}}function Bm(e,t){if(1&e){var n=Ur();zr(0,"div",19),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit,o=Wr(),r=o.index,i=o.$implicit;return Wr(2).selectInputType(r,e,i.name,a.name)})),ci(1),Lr()}if(2&e){var a=t.$implicit,o=t.index,r=Wr().index,i=Wr(2);Zr("id","node_",o,"'"),Nr("ngClass",i.select_input_type[r]==o?"selected_button":""),Fr("value",a.name),Fa(1),pi(a.name)}}function Vm(e,t){if(1&e&&(zr(0,"div",20),zr(1,"div",21),ci(2),Lr(),Ar(3,Bm,2,4,"div",14),Lr()),2&e){var n=t.$implicit,a=Wr(2);Fa(2),di(" ",n.name," "),Fa(1),Nr("ngForOf",a.parentOutputs)}}function Hm(e,t){if(1&e){var n=Ur();zr(0,"div",1),zr(1,"div",2),zr(2,"div",3),Vr("click",(function(){return Gt(n),Wr().show=!1})),Xr(3,"img",4),Lr(),zr(4,"div",5),zr(5,"p",6),ci(6),ls(7,"uppercase"),ls(8,"uppercase"),Lr(),zr(9,"div"),ci(10," Properties "),Lr(),Lr(),zr(11,"div",7),zr(12,"div",8),ci(13,"Data"),Lr(),zr(14,"div",9),ci(15,"Preview"),Lr(),zr(16,"div",10),ci(17,"Logs"),Lr(),Lr(),zr(18,"div",11),zr(19,"div",12),zr(20,"div",13),ci(21,"Parent Node Outputs"),Lr(),Ar(22,Um,2,4,"div",14),Lr(),zr(23,"div",12),zr(24,"div",13),ci(25,"Child Node Inputs"),Lr(),Ar(26,Vm,4,2,"div",15),Lr(),Lr(),Xr(27,"div",16),zr(28,"div",17),ci(29,"Visualize Output From Node"),Lr(),zr(30,"div",18),Vr("click",(function(){return Gt(n),Wr().show=!1})),ci(31,"Done"),Lr(),Lr(),Lr()}if(2&e){var a=Wr();Fa(6),hi(" ",us(7,4,a.parentToolType)," - ",us(8,6,a.childToolType)," "),Fa(16),Nr("ngForOf",a.parentOutputs),Fa(4),Nr("ngForOf",a.childInputs)}}var qm,Wm=((qm=function(){function e(t){var n=this;_classCallCheck(this,e),this.currentProjectService=t,this.input_parameters=[],this.jsonToolTypeMap={csv:{json:xm,parsing_method:0},"chemical-data":{json:wm,parsing_method:0},"svm-model":{json:Cm,parsing_method:1},"linear-model":{json:km,parsing_method:1},"nn-model":{json:Tm,parsing_method:1},"dim-reduction":{json:Pm,parsing_method:1},"chemml-represent":{json:Sm,parsing_method:1},"preprocessing-node":{json:Om,parsing_method:1},"data-splitting":{json:Mm,parsing_method:1},"model-selection":{json:Im,parsing_method:1},"model-metrics":{json:Fm,parsing_method:1},"helper-functions":{json:Dm,parsing_method:1}},this.select_input_type=[],this.currentProjectService.chemMLJsonChange.subscribe((function(e){n.chemMLJson=e})),this.chemMLJson=this.currentProjectService.getCurrentChemMLJson()}return _createClass(e,[{key:"ngOnInit",value:function(){this.select_output_type=0,this.parentToolType=this.parentId.split("_")[1],this.childToolType=this.childId.split("_")[1];var e=this.chemMLJson.nodes[this.parentId],t=this.chemMLJson.nodes[this.childId];if(0==this.jsonToolTypeMap[this.parentToolType].parsing_method)for(var n=this.jsonToolTypeMap[this.parentToolType].json.node_functions,a=0;a<n.length;a++)if(n[a].name==e.name){this.parentOutputs=n[a].outputs;break}if(1==this.jsonToolTypeMap[this.parentToolType].parsing_method){var o=this.jsonToolTypeMap[this.parentToolType].json.nodes;for(console.log(o),a=0;a<o.length;a++)if(console.log(e),o[a].name==e.name){n=o[a].node_functions;break}for(console.log(n),a=0;a<n.length;a++)if(n[a].name==e.method.name){this.parentOutputs=n[a].outputs;break}}if(1==this.jsonToolTypeMap[this.childToolType].parsing_method){for(console.log(this.jsonToolTypeMap[this.childToolType].json.nodes,this.jsonToolTypeMap[this.childToolType].json.nodes[t.name],t.name),o=this.jsonToolTypeMap[this.childToolType].json.nodes,a=0;a<o.length;a++)if(o[a].name==t.name){n=o[a].node_functions;break}for(a=0;a<n.length;a++)if(n[a].name==t.method.name){this.childInputs=n[a].inputs;break}for(a=0;a<this.childInputs.length;a++)this.select_input_type.push(0)}console.log(this.parentOutputs,this.childInputs)}},{key:"selectOutputType",value:function(e,t){this.select_output_type=e,"data"==t&&(t="df"),"csv"!=this.parentToolType&&"chemical-data"!=this.parentToolType||(this.chemMLJson.nodes[this.parentId].outputs[t]=!0),"csv"==this.parentToolType?(this.chemMLJson.nodes[this.parentId].inputs.filepath_or_buffer="./temp/Boston.csv",this.chemMLJson.nodes[this.parentId].module=""):this.chemMLJson.nodes[this.parentId].method.outputs[t]=!0,console.log(this.chemMLJson)}},{key:"selectInputType",value:function(e,t,n,a){this.select_input_type[e]=t,"data"==a&&(a="df"),"helper-functions"==this.childToolType&&(n="X"),this.chemMLJson.nodes[this.childId].method.inputs[n]="@"+this.parentId+"@"+a,console.log(e,t),console.log(this.chemMLJson)}}]),e}()).\u0275fac=function(e){return new(e||qm)(Er(cm))},qm.\u0275cmp=ct({type:qm,selectors:[["app-input-output-config"]],inputs:{parentId:"parentId",childId:"childId",show:"show"},decls:1,vars:1,consts:[["id","propwrap",4,"ngIf"],["id","propwrap"],["id","properties"],["id","close",3,"click"],["src","assets/close.svg"],["id","header2"],["id","tooltype"],["id","propswitch"],["id","dataprop"],["id","alertprop"],["id","logsprop"],["id","proplist"],[1,"config-block"],[1,"config-title"],["class","node-function-name",3,"ngClass","id","click",4,"ngFor","ngForOf"],["class","config-input",4,"ngFor","ngForOf"],["id","divisionthing"],["id","removeblock"],["id","visualize_btn",3,"click"],[1,"node-function-name",3,"ngClass","id","click"],[1,"config-input"],[1,"config-subtitle"]],template:function(e,t){1&e&&Ar(0,Hm,32,8,"div",0),2&e&&Nr("ngIf",t.show)},directives:[Ru,Au,Fu],pipes:[Ju],styles:['#propwrap[_ngcontent-%COMP%]{right:0;top:0;width:40%;overflow:hidden;z-index:1000}#properties[_ngcontent-%COMP%], #propwrap[_ngcontent-%COMP%]{position:absolute;height:100%;padding-left:20px}#properties[_ngcontent-%COMP%]{width:100%;background-color:#fff;right:-9%;opacity:1;padding-right:0;z-index:2;box-shadow:0 2px 25px #eae6e6;transition:all .25s cubic-bezier(.05,.03,.35,1);border-left:5px solid #f1f1f1}.config-block[_ngcontent-%COMP%]{clear:both;display:block;padding-top:3%!important;padding-right:8%}.itson[_ngcontent-%COMP%]{z-index:2!important}#tooltype[_ngcontent-%COMP%]{width:auto;display:inline-block;margin-bottom:2%;background-color:#6d6d6f;color:#fff;border-radius:33px;padding:1.2% 2.5% .8%;font-size:.8em}.paramName[_ngcontent-%COMP%]{font-family:Roboto;font-weight:700;font-size:20px;margin-bottom:1%}.paramInput[_ngcontent-%COMP%]{display:inline-block;width:100%}.expanded[_ngcontent-%COMP%]{right:0!important;opacity:1!important;box-shadow:-4px 0 40px rgba(26,26,73,.05);z-index:2}#header2[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;margin-top:101px}#close[_ngcontent-%COMP%]{margin-top:100px;position:absolute;right:10%;z-index:9999;transition:all .25s cubic-bezier(.05,.03,.35,1);border-radius:9px;border:2px solid #fff;padding:9px 9px 4px}#close[_ngcontent-%COMP%]:hover{cursor:pointer;border:2px solid #e9e8ef;background-color:#fbfbfb}.paramContainer[_ngcontent-%COMP%]{margin:1% 1% 2%}.select_file_btn[_ngcontent-%COMP%]{display:inline-block;width:17%;padding:1.65%;border:4px solid #227ce8;border-radius:0;color:#fff;font-family:Roboto;background-color:#227ce8;font-size:1em;text-align:center;cursor:pointer;border-top-right-radius:8px;border-bottom-right-radius:8px}#proplist[_ngcontent-%COMP%]{height:68%;overflow:scroll;padding-right:11%;padding-left:3%}.parameter_name[_ngcontent-%COMP%]{padding-top:3%;padding-bottom:1%}.input_text[_ngcontent-%COMP%], .parameter_name[_ngcontent-%COMP%]{font-size:1.2em;font-family:Roboto}.input_text[_ngcontent-%COMP%]{padding:2%;width:100%;display:inline-block;border-radius:0;background-color:#fff;border:1px solid #e2e2e2;outline:None!important}.config-input[_ngcontent-%COMP%]{margin-top:2%;display:block;height:110px;border-top:1px solid #e2e2e2;padding-top:3%}.config-subtitle[_ngcontent-%COMP%]{font-weight:600}.config-title[_ngcontent-%COMP%]{font-size:20px;font-weight:700;color:#393c44}.config-title[_ngcontent-%COMP%], .node-function-name[_ngcontent-%COMP%]{font-family:Roboto;margin-bottom:1%}.node-function-name[_ngcontent-%COMP%]{background-color:#f1f4fc;border-radius:50px;font-size:1.1em;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1.5% 3%;display:inline-block;cursor:pointer;float:left;margin-right:2%;margin-top:2%;color:#525252;border-radius:29px;border:1px solid #e8e8ef;transition:.2s}.node-function-name[_ngcontent-%COMP%]:hover{background-color:#fbfbfb}.selected_button[_ngcontent-%COMP%]{color:#fff!important;background-color:#217ce8!important}#propswitch[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:100%;margin-top:10px;margin-left:-20px;margin-bottom:30px}#dataprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#dataprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#alertprop[_ngcontent-%COMP%]{float:left}#alertprop[_ngcontent-%COMP%], #logsprop[_ngcontent-%COMP%]{font-weight:500;color:#808292;font-size:14px;height:48px;line-height:48px;width:29.33333%;text-align:center}#alertprop[_ngcontent-%COMP%], #logsprop[_ngcontent-%COMP%], .inputlabel[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto}.inputlabel[_ngcontent-%COMP%]{font-size:1.1em;color:#253134;font-weight:800}.dropme[_ngcontent-%COMP%]{background-color:#fff;border-radius:5px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);font-family:Roboto;font-size:14px;color:#253134;text-indent:20px;height:40px;line-height:40px;width:287px;margin-bottom:25px}.dropme[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:17px;float:right;margin-right:15px}.checkus[_ngcontent-%COMP%]{margin-bottom:10px}.checkus[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;margin-left:10px}#divisionthing[_ngcontent-%COMP%]{height:1px;width:100%;background-color:#e8e8ef;position:absolute;right:0;bottom:85px}#removeblock[_ngcontent-%COMP%]{width:287px;color:#253134}#removeblock[_ngcontent-%COMP%], #visualize_btn[_ngcontent-%COMP%]{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;height:38px;line-height:38px;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}#visualize_btn[_ngcontent-%COMP%]{width:15%;color:#fff;right:12%;background-color:#247ce8;cursor:pointer}#input_filename[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;border:1px solid #e2e2e2;padding:2%;width:74%}']}),qm);function Gm(e,t){if(1&e&&(zr(0,"div",18),ci(1),Lr()),2&e){var n=t.$implicit;Gr("id",n),Fa(1),pi(n)}}function Zm(e,t){if(1&e&&(zr(0,"div",18),ci(1),Lr()),2&e){var n=t.$implicit;Gr("id",n),Fa(1),pi(n)}}var Km,Jm,Qm=((Jm=function(){function e(t,n){_classCallCheck(this,e),this.currentProjectService=t,this.dataServiceService=n,this.emitter=new ds,this.imageFiles=[],this.documentFiles=[],this.image_extensions=["png","jpg","jpeg","svg"],this.document_extensions=["pdf","csv","txt","tsv"]}return _createClass(e,[{key:"ngOnInit",value:function(){var e=this;this.dataServiceService.getProjectFiles(this.currentProject.project_name).subscribe((function(t){for(var n in e.projectFiles=t.data,e.projectFiles)console.log(e.projectFiles[n].split(".").pop()),e.image_extensions.indexOf(e.projectFiles[n].split(".").pop())>-1?e.imageFiles.push(e.projectFiles[n]):e.documentFiles.push(e.projectFiles[n]);console.log(t)}))}},{key:"closeMenu",value:function(){this.emitter.emit(this.show)}},{key:"selectFiles",value:function(){document.getElementById("file-input").click()}},{key:"UploadFiles",value:function(e){var t=this;console.log(e,this.currentProject.project_name),this.filesToUpload=e;for(var n=0;n<this.filesToUpload.length;n++)console.log("Files Upload: ",this.filesToUpload[n]),this.dataServiceService.postFile(this.filesToUpload[n],this.currentProject.project_name).subscribe((function(e){e.type===Sf.UploadProgress&&(t.fileUploadProgress=Math.round(100*e.loaded/e.total),console.log(t.fileUploadProgress)),t.reRenderMenu()}))}},{key:"reRenderMenu",value:function(){var e=this;this.imageFiles=[],this.documentFiles=[],this.dataServiceService.getProjectFiles(this.currentProject.project_name).subscribe((function(t){for(var n in e.projectFiles=t.data,e.projectFiles)console.log(e.projectFiles[n].split(".").pop()),e.image_extensions.indexOf(e.projectFiles[n].split(".").pop())>-1?e.imageFiles.push(e.projectFiles[n]):e.documentFiles.push(e.projectFiles[n]);console.log(t)}))}}]),e}()).\u0275fac=function(e){return new(e||Jm)(Er(cm),Er(um))},Jm.\u0275cmp=ct({type:Jm,selectors:[["app-left-files-bar-component"]],inputs:{show:"show",currentProject:"currentProject"},outputs:{emitter:"emitter"},decls:29,vars:2,consts:[[1,"container"],[1,"close-btn",3,"click"],[1,"header"],["clas","title"],[1,"sub-title"],[1,"btns-menu"],["id","file",1,"upload-btn",3,"click"],["id","file-input","type","file","name","name","hidden","","multiple","",3,"change"],[1,"tabs-menu"],["id","propswitch"],["id","projectfilesprop",1,"tab"],["id","samplefilesprop",1,"tab"],[1,"body"],[1,"body-element"],["id","documentType",1,"file-type"],[1,"files-body"],["class","file",3,"id",4,"ngFor","ngForOf"],["id","imageType",1,"file-type"],[1,"file",3,"id"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),Vr("click",(function(){return t.closeMenu()})),ci(2," X "),Lr(),zr(3,"div",2),zr(4,"div",3),ci(5," Files "),Lr(),zr(6,"div",4),ci(7," Upload files here to import them to your project "),Lr(),Lr(),zr(8,"div",5),zr(9,"div",6),Vr("click",(function(){return t.selectFiles()})),ci(10," Upload Files "),Lr(),zr(11,"input",7),Vr("change",(function(e){return t.UploadFiles(e.target.files)})),Lr(),Lr(),zr(12,"div",8),zr(13,"div",9),zr(14,"div",10),ci(15,"Project Files"),Lr(),zr(16,"div",11),ci(17,"Sample Files"),Lr(),Lr(),Lr(),zr(18,"div",12),zr(19,"div",13),zr(20,"div",14),ci(21," Documents "),Lr(),zr(22,"div",15),Ar(23,Gm,2,2,"div",16),Lr(),Lr(),zr(24,"div",13),zr(25,"div",17),ci(26," Images "),Lr(),zr(27,"div",15),Ar(28,Zm,2,2,"div",16),Lr(),Lr(),Lr(),Lr()),2&e&&(Fa(23),Nr("ngForOf",t.documentFiles),Fa(5),Nr("ngForOf",t.imageFiles))},directives:[Au],styles:['.container[_ngcontent-%COMP%]{position:absolute;top:70px;height:86%;width:22%;background-color:#fff;z-index:1000;border-right:1px solid #e2e2e2;padding:0}.header[_ngcontent-%COMP%]{font-size:1.5em;font-family:Roboto;padding:3% 3% 3% 5%;background-color:#f1f4fc;color:#3f4248;border-bottom:1px solid rgba(238,34,238,.13);font-weight:800}.sub-title[_ngcontent-%COMP%]{padding-top:1%;font-size:.6em;font-family:Roboto;color:#747474;font-weight:200}#propswitch[_ngcontent-%COMP%]{width:100%;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;padding:2% 1% 1%}.upload-btn[_ngcontent-%COMP%]{width:80%;text-align:center;padding:4%;margin:5% 11% 2%;border:2px solid #217ce8;border-radius:6px;color:#217ce8;font-weight:500;font-family:Roboto;cursor:pointer;transition:.5s}.upload-btn[_ngcontent-%COMP%]:hover{background-color:#217ce8;color:#fff}#projectfilesprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:46%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#projectfilesprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}.close-btn[_ngcontent-%COMP%]{position:absolute;top:0;right:0;padding:1.2% 3% 1.1%;background-color:#b9b9b9;color:#fff;border-radius:3px;margin:2%;font-size:12px;font-weight:500;font-family:cursive;cursor:pointer}.close-btn[_ngcontent-%COMP%]:hover{background-color:#9f9f9f}.body[_ngcontent-%COMP%]{clear:both;padding:1% 5% 5%;overflow:scroll;height:66%}.body-element[_ngcontent-%COMP%]{margin-top:3%}.file[_ngcontent-%COMP%]{padding:2% 2% 2% 4%;border-bottom:1px solid #e2e2e2;cursor:pointer}.file[_ngcontent-%COMP%]:hover{background-color:#e2e2e2}.file-type[_ngcontent-%COMP%]{clear:both;font-size:15px;margin-bottom:3%;margin-top:8%}#samplefilesprop[_ngcontent-%COMP%], .file-type[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500}#samplefilesprop[_ngcontent-%COMP%]{display:inline-block;color:#808292;font-size:14px;height:48px;line-height:48px;width:46%;text-align:center;float:left}']}),Jm),Ym=((Km=function(){function e(t,n){var a=this;_classCallCheck(this,e),this.dataServiceService=t,this.currentProjectService=n,this.closeBoxEmit=new ds,this.currentProjectService.execChange.subscribe((function(e){a.currentProject=e}))}return _createClass(e,[{key:"closeBox",value:function(){this.closeBoxEmit.emit()}},{key:"ngOnInit",value:function(){}},{key:"createProject",value:function(e){var t=this;this.dataServiceService.createProject(e).subscribe((function(e){t.currentProject=e.data,t.currentProjectService.updateProjectInfo(t.currentProject)})),this.closeBox()}}]),e}()).\u0275fac=function(e){return new(e||Km)(Er(um),Er(cm))},Km.\u0275cmp=ct({type:Km,selectors:[["app-new-project-box"]],outputs:{closeBoxEmit:"closeBoxEmit"},decls:10,vars:0,consts:[[1,"overlay"],[1,"np-box-container"],[1,"title"],["placeholder","Name for your project","type","text",1,"input_text"],["projectname",""],[1,"submit-btn",3,"click"],[1,"close-btn",3,"click"]],template:function(e,t){if(1&e){var n=Ur();Xr(0,"div",0),zr(1,"div",1),zr(2,"div",2),ci(3,"Start New Project"),Lr(),Xr(4,"input",3,4),zr(6,"div",5),Vr("click",(function(){Gt(n);var e=Rt(Vt.lFrame.contextLView,5);return t.createProject(e.value)})),ci(7,"Create Project"),Lr(),zr(8,"div",6),Vr("click",(function(){return t.closeBox()})),ci(9,"Cancel"),Lr(),Lr()}},styles:[".np-box-container[_ngcontent-%COMP%]{position:absolute;left:42%;top:40%;background-color:#fff;padding:2%;border-radius:11px;box-shadow:2px 2px 25px 2px #292929;z-index:1000;border-top:19px solid #227ce8}.title[_ngcontent-%COMP%]{font-family:Roboto;font-weight:800;font-size:19px;margin-bottom:8%;color:#393c44}.overlay[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;background-color:rgba(0,0,0,.72);z-index:999}.input_text[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-sizing:border-box;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-size:20px;width:100%;color:#393c44;padding:8% 3%}.input_text[_ngcontent-%COMP%], .submit-btn[_ngcontent-%COMP%]{background-color:#fff;font-family:Roboto}.submit-btn[_ngcontent-%COMP%]{font-weight:800;color:#217ce8;border-radius:5px;border:2px solid #217ce8;margin-top:8%;font-size:14px;padding:1% 5%;float:right;display:inline-block;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.submit-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#217ce8}.close-btn[_ngcontent-%COMP%]{font-family:Roboto;font-weight:800;color:#9c9c9c;background-color:#fff;border-radius:5px;border:2px solid #9c9c9c;margin-top:8%;font-size:14px;padding:1% 5%;float:left;display:inline-block;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.close-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#9c9c9c}"]}),Km);function $m(e,t){if(1&e){var n=Ur();zr(0,"div",13),Vr("click",(function(){Gt(n);var e=t.index,a=t.$implicit;return Wr().selectProject("project_"+e,a)})),zr(1,"span",14),ci(2),Lr(),zr(3,"span",9),ci(4),ls(5,"timePipe"),Lr(),Lr()}if(2&e){var a=t.$implicit,o=t.index;Zr("id","project_",o,""),Fr("data-index",o),Fa(2),pi(a.project_name),Fa(2),pi(us(5,4,a.created_date.$date))}}var e_,t_,n_,a_=((n_=function(){function e(t,n){_classCallCheck(this,e),this.dataServiceService=t,this.currentProjectService=n,this.closeBoxEmit=new ds}return _createClass(e,[{key:"closeBox",value:function(){this.closeBoxEmit.emit()}},{key:"createProject",value:function(){console.log("Create a new project")}},{key:"ngOnInit",value:function(){this.getProjects()}},{key:"getProjects",value:function(){var e=this;this.dataServiceService.getProjects().subscribe((function(t){e.projectsList=t.data,e.renderList=e.projectsList,console.log(t)}))}},{key:"selectProject",value:function(e,t){for(var n=document.getElementById(e),a=n.parentElement,o=0;o<a.children.length;o++)if(console.log(a.children[o].classList),a.children[o].classList.contains("selectedProject")){a.children[o].classList.remove("selectedProject"),a.children[o].classList.add("project_list_item");break}this.selectedProject=t,n.classList.remove("project_list_item"),n.classList.add("selectedProject")}},{key:"searchFilter",value:function(e){var t=this,n=e.srcElement.value;0!=n.length?(this.renderList=[],this.projectsList.forEach((function(e){e.project_name.includes(n)&&t.renderList.push(e)}))):this.renderList=this.projectsList}},{key:"openProject",value:function(){this.currentProjectService.updateProjectInfo(this.selectedProject),this.closeBox()}}]),e}()).\u0275fac=function(e){return new(e||n_)(Er(um),Er(cm))},n_.\u0275cmp=ct({type:n_,selectors:[["app-open-project"]],outputs:{closeBoxEmit:"closeBoxEmit"},decls:19,vars:1,consts:[[1,"overlay"],[1,"np-box-container"],[1,"title"],[1,"btm_container"],["id","search"],["src","assets/search.svg"],["type","text","placeholder","Search Pipeline Toolbox",3,"keydown"],[1,"project_list_container"],[1,"project_list_header",2,"cursor","default"],[1,"created_date"],["class","project_list_item",3,"id","click",4,"ngFor","ngForOf"],[1,"submit-btn",3,"click"],[1,"close-btn",3,"click"],[1,"project_list_item",3,"id","click"],[1,"project_name"]],template:function(e,t){1&e&&(Xr(0,"div",0),zr(1,"div",1),zr(2,"div",2),ci(3,"Select a project"),Lr(),zr(4,"div",3),zr(5,"div",4),Xr(6,"img",5),zr(7,"input",6),Vr("keydown",(function(e){return t.searchFilter(e)})),Lr(),Lr(),zr(8,"div",7),zr(9,"div",8),zr(10,"span"),ci(11,"Project Name"),Lr(),zr(12,"span",9),ci(13,"Created Date"),Lr(),Lr(),Ar(14,$m,6,6,"div",10),Lr(),zr(15,"div",11),Vr("click",(function(){return t.openProject()})),ci(16,"Open Project"),Lr(),zr(17,"div",12),Vr("click",(function(){return t.closeBox()})),ci(18,"Cancel"),Lr(),Lr(),Lr()),2&e&&(Fa(14),Nr("ngForOf",t.renderList))},directives:[Au],pipes:[hm],styles:[".np-box-container[_ngcontent-%COMP%]{position:absolute;left:39%;top:24%;background-color:#fff;border-radius:11px;box-shadow:2px 2px 25px 2px #292929;z-index:1000;width:33%;padding-bottom:2%}.title[_ngcontent-%COMP%]{font-weight:800;border-top:20px solid #277fe8;font-size:21px;color:#393c44;border-top-left-radius:11px;border-top-right-radius:11px;padding:6% 6% 2%}#search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .title[_ngcontent-%COMP%]{font-family:Roboto;background-color:#fff}#search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:40px;border:1px solid #e8e8ef;box-sizing:border-box;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-size:16px}#search[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:absolute;margin-top:10px;width:18px;margin-left:12px}#search[_ngcontent-%COMP%]{margin-left:3%;margin-right:3%}.project_list_container[_ngcontent-%COMP%]{margin:3% 3% 5%;height:340px;overflow:scroll}.btm_container[_ngcontent-%COMP%]{padding:2%}.overlay[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;background-color:rgba(0,0,0,.72);z-index:999;overflow:hidden;top:0;bottom:0;left:0}.selectedProject[_ngcontent-%COMP%]{margin:0;background-color:#2f85e9;color:#fff;border-radius:5px;font-weight:900;border:6px solid #2f85e9}.project_list_item[_ngcontent-%COMP%], .selectedProject[_ngcontent-%COMP%]{font-family:Roboto;padding:2%;cursor:pointer}.project_list_item[_ngcontent-%COMP%]{border-bottom:1px solid #e2e2e2}.created_date[_ngcontent-%COMP%]{float:right}.project_name[_ngcontent-%COMP%]{font-family:Roboto}.project_list_header[_ngcontent-%COMP%]{font-family:Roboto;padding:2%;border-bottom:1px solid #e2e2e2;cursor:pointer;font-weight:500}.project_list_item[_ngcontent-%COMP%]:hover{background-color:#1744be}.input_text[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-sizing:border-box;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-size:20px;width:100%;color:#393c44;padding:8% 3%}.input_text[_ngcontent-%COMP%], .submit-btn[_ngcontent-%COMP%]{background-color:#fff;font-family:Roboto}.submit-btn[_ngcontent-%COMP%]{margin-right:4%;font-weight:800;color:#217ce8;border-radius:5px;border:2px solid #217ce8;font-size:14px;padding:1% 5%;float:right;display:inline-block;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.submit-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#217ce8}.close-btn[_ngcontent-%COMP%]{margin-left:4%;font-family:Roboto;font-weight:800;color:#9c9c9c;background-color:#fff;border-radius:5px;border:2px solid #9c9c9c;font-size:14px;padding:1% 5%;float:left;display:inline-block;vertical-align:top;text-align:center;line-height:38px;transition:all .2s cubic-bezier(.05,.03,.35,1);cursor:pointer}.close-btn[_ngcontent-%COMP%]:hover{color:#fff;background-color:#9c9c9c}"]}),n_),o_=((t_=function e(){_classCallCheck(this,e)}).\u0275fac=function(e){return new(e||t_)},t_.\u0275cmp=ct({type:t_,selectors:[["app-toolbox-component"]],inputs:{description:"description",title:"title",toot_type:"toot_type",tool:"tool"},decls:15,vars:15,consts:[[1,"blockelem","create-flowy","noselect",3,"id"],["type","hidden","name","blockelemtype","value","4",1,"blockelemtype",3,"id"],[1,"tool_header",3,"id"],[1,"grabme",3,"id"],["src","assets/grabme.svg",3,"id"],[1,"blockin",3,"id"],[1,"blockico",3,"id"],[3,"id","src"],[1,"blocktext",3,"id"],[1,"blocktitle",3,"id"],[1,"blockdesc",3,"id"],[1,"tool_footer",3,"id"]],template:function(e,t){1&e&&(zr(0,"div",0),Xr(1,"input",1),Xr(2,"div",2),zr(3,"div",3),Xr(4,"img",4),Lr(),zr(5,"div",5),zr(6,"div",6),Xr(7,"span"),Xr(8,"img",7),Lr(),zr(9,"div",8),zr(10,"p",9),ci(11),Lr(),zr(12,"p",10),ci(13),Lr(),Lr(),Lr(),Xr(14,"div",11),Lr()),2&e&&(Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(2),Zr("id","tool_",t.tool,""),Zr("src","assets/tool_",t.tool,".svg",da),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),pi(t.title),Fa(1),Zr("id","tool_",t.tool,""),Fa(1),pi(t.description),Fa(1),Zr("id","tool_",t.tool,""))},styles:[".tool_header[_ngcontent-%COMP%]{display:None;height:11px;border-bottom:1px solid #f1f4fc;border-top-left-radius:45px;cursor:pointer;border-top-right-radius:45px}.tool_header[_ngcontent-%COMP%]:hover{background-color:#217ce8}.tool_footer[_ngcontent-%COMP%]{display:None;height:11px;border-top:1px solid #f1f4fc;border-bottom-left-radius:45px;cursor:pointer;border-bottom-right-radius:45px}.tool_footer[_ngcontent-%COMP%]:hover{background-color:#217ce8}#blocklist[_ngcontent-%COMP%]{height:calc(100% - 195px);overflow:auto}.blockelem[_ngcontent-%COMP%]:first-child{margin-top:20px}.blockelem[_ngcontent-%COMP%]{width:350px;transition-property:box-shadow,height;transition-duration:.2s;background-color:#fff;transition-timing-function:cubic-bezier(.05,.03,.35,1);border-radius:12px;box-sizing:border-box}.blockico[_ngcontent-%COMP%], .grabme[_ngcontent-%COMP%]{display:inline-block}.grabme[_ngcontent-%COMP%]{height:97px;width:7%;background-color:#fff;padding:10% 2% 2%;vertical-align:middle}.blockelem[_ngcontent-%COMP%]:hover{box-shadow:0 4px 30px rgba(22,33,74,.08);border-radius:12px;background-color:#fff;cursor:pointer}.grabme[_ngcontent-%COMP%]:hover{background-color:#f1f4fc}.noselect[_ngcontent-%COMP%]{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blockin[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;margin-left:12px;padding-top:3%}.blockico[_ngcontent-%COMP%]{width:36px;height:36px;background-color:#f1f4fc;border-radius:5px;text-align:center;white-space:nowrap}.blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{height:100%;width:0}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:auto;width:52%;margin-right:auto}.blocktext[_ngcontent-%COMP%]{display:inline-block;width:220px;vertical-align:top;margin-left:12px}.blocktitle[_ngcontent-%COMP%]{margin:0!important;padding:0!important;font-family:Roboto;font-weight:500;font-size:16px;color:#393c44}.blockdesc[_ngcontent-%COMP%]{margin-top:5px;font-family:Roboto;color:#808292;font-size:14px;line-height:21px;width:233px}.blockdisabled[_ngcontent-%COMP%]{background-color:#f0f2f9;opacity:.5}#proplist[_ngcontent-%COMP%]{height:calc(100% - 305px);overflow:auto;margin-top:-30px;padding-top:13px}.blockintree[_ngcontent-%COMP%]{box-shadow:1px 2px 15px #e2e2e2;margin-bottom:20%;border-radius:12px}"]}),t_),r_=((e_=function(){function e(){_classCallCheck(this,e),this.is_toolbox_show=0,this.selectedToolSet="Data"}return _createClass(e,[{key:"toolbox_show",value:function(){0==this.is_toolbox_show?(document.getElementById("leftcard").style.left="-18%",this.is_toolbox_show=180,document.getElementById("close_img").style.transform="rotate("+this.is_toolbox_show+"deg)",console.log(document.getElementById("close_img").style.transform,"rotate("+this.is_toolbox_show+"deg);")):(document.getElementById("leftcard").style.left="0%",this.is_toolbox_show=0,document.getElementById("close_img").style.transform="rotate("+this.is_toolbox_show+"deg)")}},{key:"ngOnInit",value:function(){}}]),e}()).\u0275fac=function(e){return new(e||e_)},e_.\u0275cmp=ct({type:e_,selectors:[["app-toolbox"]],decls:40,vars:12,consts:[["id","leftcard"],["id","closecard",3,"click"],["id","close_img","src","assets/closeleft.svg"],["id","header"],["id","search"],["src","assets/search.svg"],["type","text","placeholder","Search Pipeline Toolbox"],["id","subnav"],["id","actions",1,"side",3,"ngClass","click"],["id","loggers",1,"side",3,"ngClass","click"],[1,"toolset_container"],["tooltype","Represent",1,"toolset-holder",3,"hidden"],["tooltype","Represent","tool","dim-reduction","title","Dimentionality Reduction","description","Drag the tool to perform FactorAnalysis, PCA etc."],["tooltype","Represent","tool","chemml-represent","title","Chemical Representation","description","Drag the tool to represent data using chemml chemical representations"],["tooltype","Data",1,"toolset-holder",3,"hidden"],["tooltype","Data","tool","csv","title","Import data from CSV","description","Drag the button to add a CSV Data tool to the pipeline"],["tooltype","Data","tool","chemical-data","title","Import chemical data","description","Drag the button to add a chemistry Data tool to the pipeline"],["tooltype","Preprocessing",1,"toolset-holder",3,"hidden"],["tooltype","Preprocessing","tool","preprocessing-node","title","Preprocessing","description","Perform preprocessing like scaling each feature"],["tooltype","Preprocessing","tool","data-splitting","title","Data Splitting","description","Split your data for test, training and validation"],["tooltype","Model",1,"toolset-holder",3,"hidden"],["tooltype","Model","tool","linear-model","title","Linear Model","description","Drag the button to add a Linear Model"],["tooltype","Model","tool","nn-model","title","Neural Network","description","Drag the button to add a Neural Network"],["tooltype","Model","tool","svm-model","title","Support Vector Machines","description","Drag the button to add a Support Vector Machines"],["tooltype","Optimize","tool","model-selection","title","Model Selection","description","Drag the button to add a search and evaluate models"],["tooltype","Optimize","tool","model-metrics","title","Model Metrics","description","Drag the button to add a select metrics"],["tooltype","Helper",1,"toolset-holder",3,"hidden"],["tooltype","Helper","tool","helper-functions","title","Saving Results","description","Drag this tool to save your results in a file"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),Vr("click",(function(){return t.toolbox_show()})),Xr(2,"img",2),Lr(),zr(3,"p",3),ci(4,"Pipeline Toolbox"),Lr(),zr(5,"div",4),Xr(6,"img",5),Xr(7,"input",6),Lr(),zr(8,"div",7),zr(9,"div",8),Vr("click",(function(){return t.selectedToolSet="Data"})),ci(10,"Data"),Lr(),zr(11,"div",8),Vr("click",(function(){return t.selectedToolSet="Represent"})),ci(12,"Represent"),Lr(),zr(13,"div",8),Vr("click",(function(){return t.selectedToolSet="Preprocessing"})),ci(14,"Prepare"),Lr(),zr(15,"div",9),Vr("click",(function(){return t.selectedToolSet="Model"})),ci(16,"Model"),Lr(),zr(17,"div",9),Vr("click",(function(){return t.selectedToolSet="Optimize"})),ci(18,"Optimize"),Lr(),zr(19,"div",9),Vr("click",(function(){return t.selectedToolSet="Helper"})),ci(20,"Helper Functions"),Lr(),Lr(),zr(21,"div",10),zr(22,"div",11),Xr(23,"app-toolbox-component",12),Xr(24,"app-toolbox-component",13),Lr(),zr(25,"div",14),Xr(26,"app-toolbox-component",15),Xr(27,"app-toolbox-component",16),Lr(),zr(28,"div",17),Xr(29,"app-toolbox-component",18),Xr(30,"app-toolbox-component",19),Lr(),zr(31,"div",20),Xr(32,"app-toolbox-component",21),Xr(33,"app-toolbox-component",22),Xr(34,"app-toolbox-component",23),Lr(),zr(35,"div",20),Xr(36,"app-toolbox-component",24),Xr(37,"app-toolbox-component",25),Lr(),zr(38,"div",26),Xr(39,"app-toolbox-component",27),Lr(),Lr(),Lr()),2&e&&(Fa(9),Nr("ngClass","Data"===t.selectedToolSet?"navactive":"navdisabled"),Fa(2),Nr("ngClass","Represent"===t.selectedToolSet?"navactive":"navdisabled"),Fa(2),Nr("ngClass","Preprocessing"===t.selectedToolSet?"navactive":"navdisabled"),Fa(2),Nr("ngClass","Model"===t.selectedToolSet?"navactive":"navdisabled"),Fa(2),Nr("ngClass","Optimize"===t.selectedToolSet?"navactive":"navdisabled"),Fa(2),Nr("ngClass","Helper"===t.selectedToolSet?"navactive":"navdisabled"),Fa(3),Nr("hidden","Represent"!==t.selectedToolSet),Fa(3),Nr("hidden","Data"!==t.selectedToolSet),Fa(3),Nr("hidden","Preprocessing"!==t.selectedToolSet),Fa(3),Nr("hidden","Model"!==t.selectedToolSet),Fa(4),Nr("hidden","Optimize"!==t.selectedToolSet),Fa(3),Nr("hidden","Helper"!==t.selectedToolSet))},directives:[Fu,o_],styles:['body[_ngcontent-%COMP%], html[_ngcontent-%COMP%]{margin:0;padding:0;overflow:hidden;background-image:url(/tile.fbe7a47e69fceb215897.png);background-repeat:repeat;background-size:30px 30px;background-color:#fbfbfb;height:100%}.side[_ngcontent-%COMP%]{width:25%!important;margin-left:10%!important}.select_file_btn[_ngcontent-%COMP%]{display:inline-block;border-radius:5px;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:287px;height:38px;line-height:38px;color:#253134;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}.select_file_btn[_ngcontent-%COMP%]:hover{background-color:#217ce8;color:#fff}.items[_ngcontent-%COMP%]{display:inline-block;background-color:#237ce8;color:#fff;border-radius:26px;font-family:Roboto;padding:11px 1%;margin:15px 15px 15px 2%}.visualize[_ngcontent-%COMP%]{height:90%;background-color:#fff;padding:0;border-radius:15px;margin:9% 3% 5%}.axis[_ngcontent-%COMP%]   line[_ngcontent-%COMP%], .axis[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{fill:none;stroke:#000;shape-rendering:crispEdges}.axis[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{font-family:sans-serif;font-size:11px}#navigation[_ngcontent-%COMP%]{border-radius:18px;height:71px;background-color:#fff;border-bottom:1px solid #e8e8ef;width:96%;display:table;box-sizing:border-box;position:fixed;top:0;margin:2%}#back[_ngcontent-%COMP%]{width:40px;height:40px;border-radius:100px;background-color:#f1f4fc;text-align:center;display:inline-block;vertical-align:top;margin-top:15px;margin-right:10px}#back[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:13px}#names[_ngcontent-%COMP%]{display:inline-block;vertical-align:top}#title[_ngcontent-%COMP%]{font-weight:500;font-size:16px;color:#393c44;margin-bottom:0}#subtitle[_ngcontent-%COMP%], #title[_ngcontent-%COMP%]{font-family:Roboto}#subtitle[_ngcontent-%COMP%]{color:#808292;font-size:14px;margin-top:5px}#leftside[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle;margin-left:20px}#centerswitch[_ngcontent-%COMP%]{position:absolute;width:222px;left:50%;margin-left:-111px;top:15px}#leftswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef;background-color:#fbfbfb;width:111px;border-radius:5px 0 0 5px;color:#393c44}#leftswitch[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{height:39px;line-height:39px;font-family:Roboto;display:inline-block;font-size:14px;text-align:center}#rightswitch[_ngcontent-%COMP%]{color:#808292;border-radius:0 5px 5px 0;width:102px;margin-left:-5px}#discard[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef}#discard[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#a6a6b3;width:95px;height:38px;border-radius:5px;text-align:center;line-height:38px;display:inline-block;vertical-align:top;transition:all .2s cubic-bezier(.05,.03,.35,1)}#discard[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#publish[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#217ce8;background-color:#fff;width:143px;height:38px;margin-left:10px;display:inline-block;vertical-align:top;text-align:center;line-height:38px;margin-right:20px;transition:all .2s cubic-bezier(.05,.03,.35,1)}#publish[_ngcontent-%COMP%], #publish[_ngcontent-%COMP%]:hover{border-radius:5px;border:2px solid #217ce8}#publish[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7;background-color:#217ce8;color:#fff}#buttonsright[_ngcontent-%COMP%]{float:right;margin-top:15px}#close_img[_ngcontent-%COMP%]{transition:1.2s;transform:rotate(0deg);cursor:pointer}#leftcard[_ngcontent-%COMP%]{transition:.5s;width:370px;border:1px solid #e8e8ef;padding-top:1%;left:0;padding-left:20px;height:60%;position:absolute;z-index:2;vertical-align:middle;margin-top:8%;border-radius:16px;margin-left:2%;box-shadow:2px 2px 25px 2px #e2e2e2;padding-bottom:1%}#leftcard[_ngcontent-%COMP%], #search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{background-color:#fff;box-sizing:border-box}#search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-family:Roboto;font-size:16px}[_ngcontent-%COMP%]::-moz-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::placeholder{color:#c9c9d5}#search[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:absolute;margin-top:10px;width:18px;margin-left:12px}#header[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;z-index:1000!important}#subnav[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:calc(100% + 20px);margin-left:-20px;margin-top:10px;overflow:scroll;display:flex;border-top:1px solid #e8e8ef}.navdisabled[_ngcontent-%COMP%]{transition:all .3s cubic-bezier(.05,.03,.35,1)}.navdisabled[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.navactive[_ngcontent-%COMP%]{color:#393c44!important}#triggers[_ngcontent-%COMP%]{margin-left:20px;font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#808292;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left}.navactive[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#actions[_ngcontent-%COMP%]{float:left}#actions[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{display:inline-block;font-weight:500;color:#808292;height:48px;line-height:48px;width:29.33333%;text-align:center}#actions[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px}#footer[_ngcontent-%COMP%]{position:absolute;left:0;padding-left:20px;line-height:40px;bottom:0;width:362px;border:1px solid #e8e8ef;height:67px;box-sizing:border-box;background-color:#fff}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;color:#393c44;transition:all .2s cubic-bezier(.05,.03,.35,1)}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{opacity:.5}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#808292}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block}#footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:5px;margin-right:5px}#closecard[_ngcontent-%COMP%]{position:absolute;margin-left:347px;background-color:#fff;border-radius:0 5px 5px 0;border-bottom:1px solid #e8e8ef;border-right:1px solid #e8e8ef;border-top:1px solid #e8e8ef;width:53px;height:53px;text-align:center;z-index:10;top:9%}#closecard[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:15px}.toolset_container[_ngcontent-%COMP%]{padding-bottom:8%;height:63%;clear:both;overflow:scroll}#canvas[_ngcontent-%COMP%]{position:absolute;width:calc(100% - 361px);height:calc(100% - 71px);top:71px;left:361px;z-index:0;overflow:auto}#header[_ngcontent-%COMP%]{margin-left:1%!important}#search[_ngcontent-%COMP%]{margin-bottom:7%!important}#propwrap[_ngcontent-%COMP%]{right:0;width:95%;overflow:hidden;z-index:-2}#properties[_ngcontent-%COMP%], #propwrap[_ngcontent-%COMP%]{position:absolute;top:0;height:100%;padding-left:20px}#properties[_ngcontent-%COMP%]{width:70%;background-color:#fff;right:-150px;opacity:0;z-index:2;box-shadow:-4px 0 40px rgba(26,26,73,0);transition:all .25s cubic-bezier(.05,.03,.35,1)}.itson[_ngcontent-%COMP%]{z-index:2!important}.expanded[_ngcontent-%COMP%]{right:0!important;opacity:1!important;box-shadow:-4px 0 40px rgba(26,26,73,.05);z-index:2}#header2[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;margin-top:101px}#close[_ngcontent-%COMP%]{margin-top:100px;position:absolute;right:20px;z-index:9999;transition:all .25s cubic-bezier(.05,.03,.35,1)}#close[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#propswitch[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:100%;margin-top:10px;margin-left:-20px;margin-bottom:30px}#dataprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#dataprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#alertprop[_ngcontent-%COMP%]{float:left}#alertprop[_ngcontent-%COMP%], #logsprop[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;font-weight:500;color:#808292;font-size:14px;height:48px;line-height:48px;width:29.33333%;text-align:center}.dropme[_ngcontent-%COMP%], .inputlabel[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#253134}.dropme[_ngcontent-%COMP%]{background-color:#fff;border-radius:5px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);text-indent:20px;height:40px;line-height:40px;width:287px;margin-bottom:25px}.dropme[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:17px;float:right;margin-right:15px}.checkus[_ngcontent-%COMP%]{margin-bottom:10px}.checkus[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;margin-left:10px}#divisionthing[_ngcontent-%COMP%]{height:1px;width:100%;background-color:#e8e8ef;position:absolute;right:0;bottom:80}#removeblock[_ngcontent-%COMP%]{width:287px;color:#253134}#removeblock[_ngcontent-%COMP%], #visualize_btn[_ngcontent-%COMP%]{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;height:38px;line-height:38px;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}#visualize_btn[_ngcontent-%COMP%]{width:23%;color:#fff;right:21px;background-color:#247ce8}#table_preview[_ngcontent-%COMP%]{font-family:Trebuchet MS,Arial,Helvetica,sans-serif;border-collapse:collapse;width:81%;margin-left:2%}#customers[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], #table_preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:8px}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(2n){background-color:#f2f2f2}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#ddd}#table_preview[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#247ce8;color:#fff;text-align:center}#visualize_btn[_ngcontent-%COMP%]:hover{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:23%;height:38px;line-height:38px;color:#247ce8;right:21px;border:1px solid #e8e8ef;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1)}#filename[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;margin-left:2%;font-weight:800}#removeblock[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.noselect[_ngcontent-%COMP%]{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blockyname[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;color:#253134;margin-left:8px;font-size:16px}.blockyleft[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockyname[_ngcontent-%COMP%], .blockyright[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockyright[_ngcontent-%COMP%]{float:right;margin-right:20px;margin-top:10px;width:28px;height:28px;border-radius:5px;text-align:center;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1);z-index:10}.blockyright[_ngcontent-%COMP%]:hover{background-color:#f1f4fc;cursor:pointer}.blockyright[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:12px}.blockyleft[_ngcontent-%COMP%]{display:inline-block;margin-left:20px}.blockydiv[_ngcontent-%COMP%]{width:100%;height:1px;background-color:#e9e9ef}.blockyinfo[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#808292;margin-top:15px;text-indent:20px;margin-bottom:20px}.blockyinfo[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#253134;font-weight:500;display:inline-block;border-bottom:1px solid #d3dcea;line-height:20px;text-indent:0}.block[_ngcontent-%COMP%]{width:40%!important;background-color:#fff;margin-top:0!important;box-shadow:0 4px 30px rgba(22,33,74,.05)}.selectedblock[_ngcontent-%COMP%]{border:2px solid #217ce8;box-shadow:0 4px 30px rgba(22,33,74,.08)}.custom-select[_ngcontent-%COMP%]{position:relative;font-family:Arial}.custom-select[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{display:none}.select-selected[_ngcontent-%COMP%]{background-color:#1e90ff}.select-selected[_ngcontent-%COMP%]:after{position:absolute;content:"";top:14px;right:10px;width:0;height:0;border:6px solid transparent;border-top-color:#fff}.select-selected.select-arrow-active[_ngcontent-%COMP%]:after{border-color:transparent transparent #fff;top:7px}.select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%], .select-selected[_ngcontent-%COMP%]{color:#fff;padding:8px 16px;border:1px solid transparent;border-bottom-color:rgba(0,0,0,.1);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-items[_ngcontent-%COMP%]{position:absolute;background-color:#1e90ff;top:100%;left:0;right:0;z-index:99}.select-hide[_ngcontent-%COMP%]{display:none}.same-as-selected[_ngcontent-%COMP%], .select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:hover{background-color:rgba(0,0,0,.1)}@media only screen and (max-width:832px){#centerswitch[_ngcontent-%COMP%]{display:none}}@media only screen and (max-width:560px){#names[_ngcontent-%COMP%]{display:none}}']}),e_);function i_(e,t){if(1&e&&(zr(0,"div",6),zr(1,"div",7),zr(2,"div",8),ci(3),Lr(),zr(4,"div",9),ci(5),Lr(),Xr(6,"div",10),zr(7,"div",11),ci(8),ls(9,"date"),Lr(),Xr(10,"div",12),Lr(),Lr()),2&e){var n=t.$implicit,a=t.index;Fa(3),di(" Result ",a+1," "),Fa(2),di(" ",n.run_status," "),Fa(3),di(" ",n.scheduled_time?(o=n.scheduled_time.$date,r="mmmm dS, yyyy, HH:mm:ss TT",i=qt(),s=Rt(i,9),ps(i,cs(i,9)?function(e,t,n,a,o,r,i){var s=t+3;return Ir(e,s,o,r)?Or(e,s+2,i?a.call(i,o,r):a(o,r)):ss(e,s+2)}(i,$t(),0,s.transform,o,r,s):s.transform(o,r))):"Execution Time"," ")}var o,r,i,s}var s_,l_=((s_=function(){function e(t,n){_classCallCheck(this,e),this.currentProjectService=t,this.dataServiceService=n,this.results=[]}return _createClass(e,[{key:"ngAfterViewInit",value:function(){var e=this;this.dataServiceService.getResults(this.project_name).subscribe((function(t){for(var n=t.data,a=Object.keys(n),o=0;o<a.length;o++)e.results.push(n[a[o]]);console.log(e.results)}))}}]),e}()).\u0275fac=function(e){return new(e||s_)(Er(cm),Er(um))},s_.\u0275cmp=ct({type:s_,selectors:[["app-results-page-component"]],inputs:{project_name:"project_name"},decls:8,vars:1,consts:[[1,"background"],["id","main_container",1,"main_container"],[1,"header"],[1,"close"],[1,"runs"],["class","body",4,"ngFor","ngForOf"],[1,"body"],[1,"run_row"],[1,"title"],[1,"status"],[1,"expand_icon"],[1,"schedule_time"],[1,"run_result_body"]],template:function(e,t){1&e&&(zr(0,"div",0),zr(1,"div",1),zr(2,"div",2),ci(3," Results "),zr(4,"div",3),ci(5," X "),Lr(),Lr(),zr(6,"div",4),Ar(7,i_,11,6,"div",5),Lr(),Lr(),Lr()),2&e&&(Fa(7),Nr("ngForOf",t.results))},directives:[Au],pipes:[Qu],styles:[".main_container[_ngcontent-%COMP%]{position:absolute;top:10%;left:25%;background-color:#fff;border-radius:18px;border:1px solid #e2e2e2;box-shadow:0 0 20px 0 #5f5b5b;width:50%;overflow:hidden;height:600px}.runs[_ngcontent-%COMP%]{overflow:scroll;height:86%}.close[_ngcontent-%COMP%]{font-family:cursive;cursor:pointer}.schedule_time[_ngcontent-%COMP%]{font-size:.9em;margin-top:1%}.time[_ngcontent-%COMP%]{font-family:Roboto;font-size:1.2em;font-weight:500}.status[_ngcontent-%COMP%], .title[_ngcontent-%COMP%]{font-size:1.2em;font-weight:500;display:inline-block}.status[_ngcontent-%COMP%]{float:right;background-color:#00c100;color:#fff;padding:1% 2%;border-radius:45px;border:3px solid #009e00}.background[_ngcontent-%COMP%]{position:absolute;top:0;left:0;padding:1%;width:100%;height:100%;background-color:rgba(60,60,60,.72);z-index:100}.header[_ngcontent-%COMP%]{font-size:20px;font-weight:800;padding:3% 3% 2%}.body[_ngcontent-%COMP%], .header[_ngcontent-%COMP%]{font-family:Roboto;border-bottom:1px solid #e2e2e2}.body[_ngcontent-%COMP%]{background-color:#f7f7f7}.body[_ngcontent-%COMP%], .run_row[_ngcontent-%COMP%]{padding:1%}"]}),s_),u_=["appenHere"],c_=["inputOutputAppend"];function p_(e,t){if(1&e){var n=Ur();zr(0,"app-landing-page",12),Vr("closeBoxEmit",(function(){return Gt(n),Wr().showLandingPage=!1})),Lr()}}function d_(e,t){1&e&&(zr(0,"div",13),Xr(1,"img",14),zr(2,"div",15),Xr(3,"img",16),zr(4,"p",17),ci(5," MaDE@UB Machine Learning Toolkit "),Lr(),Lr(),Lr())}function h_(e,t){if(1&e){var n=Ur();zr(0,"app-left-files-bar-component",18),Vr("emitter",(function(e){return Gt(n),Wr().closeFilesMenu(e)})),Lr()}if(2&e){var a=Wr();Nr("currentProject",a.currentProject)("show",a.showFilesMenu)}}function f_(e,t){if(1&e){var n=Ur();zr(0,"div",19),zr(1,"div",20),zr(2,"div",21),zr(3,"div",22),Vr("click",(function(){return Gt(n),Wr().showFilesMenu=!0})),Xr(4,"img",23),Lr(),zr(5,"div",24),zr(6,"p",25),ci(7),Lr(),zr(8,"p",26),ci(9,"Portal"),Lr(),Lr(),Lr(),Lr(),zr(10,"nav-button",27),Vr("callFunction",(function(e){return Gt(n),Wr().goHome(e)})),Lr(),zr(11,"nav-button",28),Vr("callFunction",(function(e){return Gt(n),Wr().newProject(e)})),Lr(),zr(12,"nav-button",29),Vr("callFunction",(function(e){return Gt(n),Wr().openProject(e)})),Lr(),zr(13,"nav-button",30),Vr("callFunction",(function(e){return Gt(n),Wr().openResultsPage(e)})),Lr(),zr(14,"div",31),zr(15,"div",32),Vr("click",(function(){return Gt(n),Wr().runPipeline()})),ci(16,"Run Pipeline"),Lr(),Lr(),Lr()}if(2&e){var a=Wr();Fa(7),pi(a.projectName)}}function m_(e,t){1&e&&Xr(0,"div",33,34)}function __(e,t){if(1&e){var n=Ur();zr(0,"app-new-project-box",35),Vr("closeBoxEmit",(function(){return Gt(n),Wr().showNewProjectBox=!1})),Lr()}}function g_(e,t){if(1&e){var n=Ur();zr(0,"app-open-project",35),Vr("closeBoxEmit",(function(){return Gt(n),Wr().openProjectBox=!1})),Lr()}}function v_(e,t){1&e&&Xr(0,"app-toolbox")}function y_(e,t){1&e&&Xr(0,"app-results-page-component",36),2&e&&Nr("project_name",Wr().projectName)}var b_,x_,w_=((x_=function(){function e(t,n,a,o,r){var i=this;_classCallCheck(this,e),this.elementRef=t,this.CFR=n,this.currentProjectService=a,this.dataServiceService=o,this.router=r,this.title="chemmlAngluar",this.toolConfigMapping=[],this.showNewProjectBox=!1,this.openProjectBox=!1,this.showFilesMenu=!1,this.showLandingPage=!1,this.inputOutputConfigMapping=[],this.showResultsPage=!1,this.exitMainPage=!1,this.arrowClicking=function(e,t){if(console.log("This arrow has been clicked",e,t),e in i.inputOutputConfigMapping)if(t in i.inputOutputConfigMapping[e])(a=i.inputOutputConfigMapping[e][t]).instance.show=!0;else{var n=i.CFR.resolveComponentFactory(Wm);i.inputOutputComponentRef=i.inputOutputTarget.createComponent(n),i.inputOutputConfigMapping[e][t]=i.inputOutputComponentRef;var a=i.inputOutputConfigMapping[e][t];i.inputOutputComponentRef.instance.parentId=t,i.inputOutputComponentRef.instance.childId=e,a.instance.show=!0}else{var o=i.CFR.resolveComponentFactory(Wm);i.inputOutputComponentRef=i.inputOutputTarget.createComponent(o),i.inputOutputConfigMapping[e]=[],i.inputOutputConfigMapping[e][t]=i.inputOutputComponentRef,a=i.inputOutputConfigMapping[e][t],i.inputOutputComponentRef.instance.parentId=t,i.inputOutputComponentRef.instance.childId=e,console.log(i.inputOutputConfigMapping)}},this.release=function(){console.log("RELEASE")},this.rearrange=function(){return!0},this.snapping=function(e,t,n){if(console.log("Snapping",e,t,n),e.classList.add("blockintree"),e.querySelector(".tool_header").style.display="block",e.querySelector(".tool_footer").style.display="block",!(e.id in i.toolConfigMapping)){var a=i.CFR.resolveComponentFactory(Xm);i.componentRef=i.target.createComponent(a),e.id+="_"+i.globalCounter,i.globalCounter+=1,i.toolConfigMapping[e.id]=i.componentRef,i.componentRef.instance.toolid=e.id;var o=e.id.split("_");o=o[o.length-2],console.log(o),i.componentRef.instance.tooltype=o;for(var r=e.childNodes,s=0;s<r.length;s++)r[s].id=e.id}return t||(console.log(e),console.log(n)),!0},this.router.events.subscribe((function(e){e instanceof Op&&(console.log("ROUTER EVENT",e),"/portal"==e.url&&(i.showLandingPage=!0,i.exitMainPage=!0)),e instanceof Fp&&console.log(e.error)}))}return _createClass(e,[{key:"ngAfterViewInit",value:function(){var e=this;this.currentProjectService.chemMLJsonChange.subscribe((function(t){e.chemMLJson=t})),this.chemMLJson=this.currentProjectService.getCurrentChemMLJson(),this.globalCounter=0,this.currentProjectService.execChange.subscribe((function(t){e.currentProject=t,e.projectName=e.currentProject.project_name})),this.currentProject=this.currentProjectService.getCurrentProject(),this.projectName=this.currentProject.project_name,this.currentProjectService.updateProjectInfo(this.currentProject),this.elementRef.nativeElement.addEventListener("click",(function(t){var n=t.target.id,a=t.target.classList;if("tool"==n.substring(0,4)&&a.contains("grabme")&&(console.log(t.target),console.log(n,e.toolConfigMapping),n in e.toolConfigMapping)){var o=e.toolConfigMapping[n];o.instance.show=!0,console.log("Opening Tool-config of block: ",o.instance.type)}})),flowy(document.getElementById("canvas"),this.drag,this.release,this.arrowClicking,this.snapping,this.rearrange)}},{key:"reRender",value:function(){var e=this;this.elementRef.nativeElement.addEventListener("click",(function(t){var n=t.target.id;if("tool"==n.substring(0,4)&&(console.log(t.target),console.log(n,e.toolConfigMapping),n in e.toolConfigMapping)){var a=e.toolConfigMapping[n];a.instance.show=!0,console.log("Opening Tool-config of block: ",a.instance.type)}})),flowy(document.getElementById("canvas"),this.drag,this.release,this.arrowClicking,this.snapping)}},{key:"drag",value:function(e){console.log("DRAG",e)}},{key:"openProject",value:function(e){console.log(e),this.openProjectBox=!0}},{key:"goHome",value:function(e){console.log(e)}},{key:"openResultsPage",value:function(e){this.showResultsPage=!0}},{key:"newProject",value:function(e){console.log(e),this.showNewProjectBox=!0,console.log("Calling URL: ",_f.newProject)}},{key:"runPipeline",value:function(){this.currentProjectService.updateProjectInfo(this.currentProject),this.dataServiceService.runPipeline(this.projectName,this.chemMLJson).subscribe((function(e){console.log("Pipeline Result:",e),alert(e.data.error)}))}},{key:"closeFilesMenu",value:function(e){console.log("DATA PRINT",e),1==e&&(this.showFilesMenu=!1)}}]),e}()).\u0275fac=function(e){return new(e||x_)(Er(vi),Er(gi),Er(cm),Er(um),Er(qh))},x_.\u0275cmp=ct({type:x_,selectors:[["app-root"]],viewQuery:function(e,t){var n;1&e&&(ks(u_,!0,Vi),ks(c_,!0,Vi)),2&e&&(Cs(n=Ts())&&(t.target=n.first),Cs(n=Ts())&&(t.inputOutputTarget=n.first))},decls:15,vars:10,consts:[[3,"closeBoxEmit",4,"ngIf"],["id","header",4,"ngIf"],[3,"currentProject","show","emitter",4,"ngIf"],["id","navigation",4,"ngIf"],["id","canvas",3,"ngClass"],["class","config_box",4,"ngIf"],["id","new_project_box",3,"closeBoxEmit",4,"ngIf"],[1,"input_output_toolConfig"],["inputOutputAppend",""],[1,"botton"],[4,"ngIf"],[3,"project_name",4,"ngIf"],[3,"closeBoxEmit"],["id","header"],["src","../../assets/University_at_Buffalo_logo.svg.png",1,"ub_logo"],[1,"header-left"],["src","../../assets/nsf_logo.png",1,"nsf_logo"],[1,"made_logo"],[3,"currentProject","show","emitter"],["id","navigation"],["id","leftside"],["id","details"],["id","back",3,"click"],["src","assets/open-menu.svg"],["id","names"],["id","title"],["id","subtitle"],["description","Home",1,"button",3,"callFunction"],["description","New Project",1,"button",3,"callFunction"],["description","Open Project",1,"button",3,"callFunction"],["description","Results",1,"button",3,"callFunction"],["id","buttonsright"],["id","publish",3,"click"],[1,"config_box"],["appenHere",""],["id","new_project_box",3,"closeBoxEmit"],[3,"project_name"]],template:function(e,t){1&e&&(Ar(0,p_,1,0,"app-landing-page",0),zr(1,"div"),Ar(2,d_,6,0,"div",1),Ar(3,h_,1,2,"app-left-files-bar-component",2),Ar(4,f_,17,1,"div",3),Xr(5,"div",4),Ar(6,m_,2,0,"div",5),Ar(7,__,1,0,"app-new-project-box",6),Ar(8,g_,1,0,"app-open-project",6),Xr(9,"div",7,8),Xr(11,"div",9),Ar(12,v_,1,0,"app-toolbox",10),Xr(13,"app-global-footer"),Ar(14,y_,1,1,"app-results-page-component",11),Lr()),2&e&&(Nr("ngIf",t.showLandingPage),Fa(2),Nr("ngIf",!t.showLandingPage),Fa(1),Nr("ngIf",t.showFilesMenu),Fa(1),Nr("ngIf",!t.showLandingPage&&t.exitMainPage),Fa(1),Nr("ngClass",t.showLandingPage?"not_show_canvas":"show_canvas"),Fa(1),Nr("ngIf",!t.showLandingPage),Fa(1),Nr("ngIf",t.showNewProjectBox),Fa(1),Nr("ngIf",t.openProjectBox),Fa(4),Nr("ngIf",!t.showLandingPage),Fa(2),Nr("ngIf",t.showResultsPage))},directives:[Ru,Fu,dm,vm,Qm,pm,Ym,a_,r_,l_],styles:['.side[_ngcontent-%COMP%]{width:25%!important;margin-left:10%!important}.select_file_btn[_ngcontent-%COMP%]{display:inline-block;border-radius:5px;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:287px;height:38px;line-height:38px;color:#253134;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}.select_file_btn[_ngcontent-%COMP%]:hover{background-color:#217ce8;color:#fff}.items[_ngcontent-%COMP%]{display:inline-block;background-color:#237ce8;color:#fff;border-radius:26px;font-family:Roboto;padding:11px 1%;margin:15px 15px 15px 2%}.visualize[_ngcontent-%COMP%]{height:90%;background-color:#fff;padding:0;border-radius:15px;margin:9% 3% 5%}.axis[_ngcontent-%COMP%]   line[_ngcontent-%COMP%], .axis[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{fill:none;stroke:#000;shape-rendering:crispEdges}.axis[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{font-family:sans-serif;font-size:11px}#navigation[_ngcontent-%COMP%]{border-radius:18px;height:71px;background-color:#fff;border-bottom:1px solid #e8e8ef;width:96%;display:table;box-sizing:border-box;position:fixed;top:0;z-index:100;margin:5% 2% 2%}#back[_ngcontent-%COMP%]{width:40px;height:40px;border-radius:100px;background-color:#f1f4fc;text-align:center;display:inline-block;vertical-align:top;border:3px solid #f1f4fc;margin-top:17px;margin-right:10px;cursor:pointer}#back[_ngcontent-%COMP%]:hover{background-color:#fff}#back[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:15%;width:60%}#names[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;margin-top:6%}#title[_ngcontent-%COMP%]{font-weight:500;font-size:16px;color:#393c44;margin-bottom:0;margin-top:5%}#subtitle[_ngcontent-%COMP%], #title[_ngcontent-%COMP%]{font-family:Roboto}#subtitle[_ngcontent-%COMP%]{color:#808292;font-size:14px;margin-top:0}#leftside[_ngcontent-%COMP%]{margin-right:2%;display:inline-block;vertical-align:middle;margin-left:20px}#centerswitch[_ngcontent-%COMP%]{position:absolute;width:222px;left:50%;margin-left:-111px;top:15px}#leftswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef;background-color:#fbfbfb;width:111px;border-radius:5px 0 0 5px;color:#393c44}#leftswitch[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{height:39px;line-height:39px;font-family:Roboto;display:inline-block;font-size:14px;text-align:center}#rightswitch[_ngcontent-%COMP%]{color:#808292;border-radius:0 5px 5px 0;width:102px;margin-left:-5px}#discard[_ngcontent-%COMP%], #rightswitch[_ngcontent-%COMP%]{border:1px solid #e8e8ef}#discard[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#a6a6b3;width:95px;height:38px;border-radius:5px;text-align:center;line-height:38px;display:inline-block;vertical-align:top;transition:all .2s cubic-bezier(.05,.03,.35,1)}#discard[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#publish[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;color:#217ce8;background-color:#fff;width:auto;padding-left:23px;padding-right:23px;height:45px;padding-top:1%;margin-left:18px;display:inline-block;vertical-align:top;text-align:center;line-height:38px;margin-right:20px;transition:all .2s cubic-bezier(.05,.03,.35,1)}#publish[_ngcontent-%COMP%], #publish[_ngcontent-%COMP%]:hover{border-radius:5px;border:2px solid #217ce8}#publish[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7;background-color:#217ce8;color:#fff}#buttonsright[_ngcontent-%COMP%]{float:right;margin-top:15px}#leftcard[_ngcontent-%COMP%]{width:370px;border:1px solid #e8e8ef;padding-top:3%;padding-left:20px;height:auto;position:absolute;z-index:2;vertical-align:middle;margin-top:9%;border-radius:16px;margin-left:2%;box-shadow:2px 2px 25px 2px #e2e2e2;transition:.5s;padding-bottom:5%}#leftcard[_ngcontent-%COMP%], #search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{background-color:#fff;box-sizing:border-box}#search[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:318px;height:40px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);border-radius:5px;text-indent:35px;font-family:Roboto;font-size:16px}[_ngcontent-%COMP%]::-moz-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#c9c9d5}[_ngcontent-%COMP%]::placeholder{color:#c9c9d5}#search[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:absolute;margin-top:10px;width:18px;margin-left:12px}#header[_ngcontent-%COMP%]{padding:1% 2%;background-color:#fff;border-bottom:1px solid #e2e2e2;z-index:1000}.ub_logo[_ngcontent-%COMP%]{width:8%;display:inline-block}.made_logo[_ngcontent-%COMP%]{display:inline-block!important;float:right!important;margin:0!important;font-family:Roboto!important;font-weight:800!important;font-size:1.3em!important;color:#393c44!important;width:108%!important;padding-left:5%!important;border-left:2px solid #d4d4d4!important}.tool_header[_ngcontent-%COMP%]{height:11px;background-color:#f1f4fc;border-top-left-radius:45px;border-top-right-radius:45px}.tool_header[_ngcontent-%COMP%]:hover{background-color:#217ce8}.tool_footer[_ngcontent-%COMP%]{height:11px;background-color:#f1f4fc;border-bottom-left-radius:45px;border-bottom-right-radius:45px}.tool_footer[_ngcontent-%COMP%]:hover{background-color:#217ce8}.show_canvas[_ngcontent-%COMP%]{display:block;z-index:0!important}.not_show_canvas[_ngcontent-%COMP%]{display:none;z-index:-1000!important}.nsf_logo[_ngcontent-%COMP%]{width:65px!important;position:absolute!important;top:-12px!important;left:-101px!important;padding-right:10px!important}.header-left[_ngcontent-%COMP%]{display:inline-block;float:right;position:relative}#subnav[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:calc(100% + 20px);margin-left:-20px;margin-top:10px;overflow:scroll;display:flex;border-top:1px solid #e8e8ef}.navdisabled[_ngcontent-%COMP%]{transition:all .3s cubic-bezier(.05,.03,.35,1)}.navdisabled[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.navactive[_ngcontent-%COMP%]{color:#393c44!important}#triggers[_ngcontent-%COMP%]{margin-left:20px;font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#808292;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left}.navactive[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#actions[_ngcontent-%COMP%]{float:left}#actions[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{display:inline-block;font-weight:500;color:#808292;height:48px;line-height:48px;width:29.33333%;text-align:center}#actions[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%], #loggers[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px}#footer[_ngcontent-%COMP%]{position:absolute;left:0;padding-left:20px;line-height:40px;bottom:0;width:362px;border:1px solid #e8e8ef;height:67px;box-sizing:border-box;background-color:#fff}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;color:#393c44;transition:all .2s cubic-bezier(.05,.03,.35,1)}#footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{opacity:.5}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], #footer[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#808292}#footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block}#footer[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:5px;margin-right:5px}.blockelem[_ngcontent-%COMP%]:first-child{margin-top:20px}.block[_ngcontent-%COMP%], .blockintree[_ngcontent-%COMP%]{padding-top:10px;width:350px;border:1px solid transparent;transition-property:box-shadow,height;transition-duration:.2s;transition-timing-function:cubic-bezier(.05,.03,.35,1);border-radius:5px;box-shadow:11px 11px 30px #e2e2e2;box-sizing:border-box}.blockintree[_ngcontent-%COMP%]{background-color:#fff;margin-bottom:20%}.blockelem[_ngcontent-%COMP%]{padding-top:10px;width:350px;border:1px solid transparent;transition-property:box-shadow,height;transition-duration:.2s;transition-timing-function:cubic-bezier(.05,.03,.35,1);border-radius:5px;box-shadow:0 0 30px rgba(22,33,74,0);box-sizing:border-box;margin-bottom:20%}.blockelem[_ngcontent-%COMP%]:hover{box-shadow:0 4px 30px rgba(22,33,74,.08);border-radius:5px;background-color:#fff;cursor:pointer}.blockico[_ngcontent-%COMP%], .grabme[_ngcontent-%COMP%]{display:inline-block}.grabme[_ngcontent-%COMP%]{margin-top:10px;margin-left:10px;margin-bottom:-14px;width:15px}#blocklist[_ngcontent-%COMP%]{height:calc(100% - 220px);overflow:auto}#proplist[_ngcontent-%COMP%]{height:calc(100% - 305px);overflow:auto;margin-top:-30px;padding-top:13px}.blockin[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;margin-left:12px}.blockico[_ngcontent-%COMP%]{width:36px;height:36px;background-color:#f1f4fc;border-radius:5px;text-align:center;white-space:nowrap}.blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{height:100%;width:0}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockico[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockico[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:auto;margin-right:auto;width:52%}.blocktext[_ngcontent-%COMP%]{display:inline-block;width:220px;vertical-align:top;margin-left:12px}.blocktitle[_ngcontent-%COMP%]{margin:0!important;padding:0!important;font-family:Roboto;font-weight:500;font-size:16px;color:#393c44}.blockdesc[_ngcontent-%COMP%]{margin-top:5px;font-family:Roboto;color:#808292;font-size:14px;line-height:21px}.blockdisabled[_ngcontent-%COMP%]{background-color:#f0f2f9;opacity:.5}#closecard[_ngcontent-%COMP%]{position:absolute;margin-left:348px;background-color:#fff;border-radius:0 5px 5px 0;border-bottom:1px solid #e8e8ef;border-right:1px solid #e8e8ef;border-top:1px solid #e8e8ef;width:53px;height:53px;text-align:center;z-index:10}#closecard[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:15px}#canvas[_ngcontent-%COMP%]{position:absolute;width:calc(100% - 361px);height:calc(100% - 184px);top:184px;left:361px;z-index:0;overflow:auto}#search[_ngcontent-%COMP%]{margin-bottom:7%!important}#propwrap[_ngcontent-%COMP%]{right:0;width:40%;overflow:hidden;z-index:-2}#properties[_ngcontent-%COMP%], #propwrap[_ngcontent-%COMP%]{position:absolute;top:0;height:100%;padding-left:20px}#properties[_ngcontent-%COMP%]{width:70%;background-color:#fff;right:-150px;opacity:0;z-index:2;box-shadow:-4px 0 40px rgba(26,26,73,0);transition:all .25s cubic-bezier(.05,.03,.35,1)}.itson[_ngcontent-%COMP%]{z-index:2!important}.expanded[_ngcontent-%COMP%]{right:0!important;opacity:1!important;box-shadow:-4px 0 40px rgba(26,26,73,.05);z-index:2}#header2[_ngcontent-%COMP%]{font-size:20px;font-family:Roboto;font-weight:700;color:#393c44;margin-top:101px}#close[_ngcontent-%COMP%]{margin-top:100px;position:absolute;right:20px;z-index:9999;transition:all .25s cubic-bezier(.05,.03,.35,1)}#close[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.7}#propswitch[_ngcontent-%COMP%]{border-bottom:1px solid #e8e8ef;width:100%;margin-top:10px;margin-left:-20px;margin-bottom:30px}#dataprop[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;font-size:14px;text-align:center;color:#393c44;width:29.33333%;height:48px;line-height:48px;display:inline-block;float:left;margin-left:20px}#dataprop[_ngcontent-%COMP%]:after{display:block;content:"";width:100%;height:4px;background-color:#217ce8;margin-top:-4px}#alertprop[_ngcontent-%COMP%]{float:left}#alertprop[_ngcontent-%COMP%], #logsprop[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;font-weight:500;color:#808292;font-size:14px;height:48px;line-height:48px;width:29.33333%;text-align:center}.dropme[_ngcontent-%COMP%], .inputlabel[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#253134}.dropme[_ngcontent-%COMP%]{background-color:#fff;border-radius:5px;border:1px solid #e8e8ef;box-shadow:0 2px 8px rgba(34,34,87,.05);text-indent:20px;height:40px;line-height:40px;width:287px;margin-bottom:25px}.dropme[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:17px;float:right;margin-right:15px}.checkus[_ngcontent-%COMP%]{margin-bottom:10px}.checkus[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.checkus[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;margin-left:10px}#divisionthing[_ngcontent-%COMP%]{height:1px;width:100%;background-color:#e8e8ef;position:absolute;right:0;bottom:80}#removeblock[_ngcontent-%COMP%]{width:287px;color:#253134}#removeblock[_ngcontent-%COMP%], #visualize_btn[_ngcontent-%COMP%]{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;height:38px;line-height:38px;border:1px solid #e8e8ef;transition:all .3s cubic-bezier(.05,.03,.35,1)}#visualize_btn[_ngcontent-%COMP%]{width:23%;color:#fff;right:21px;background-color:#247ce8}#table_preview[_ngcontent-%COMP%]{font-family:Trebuchet MS,Arial,Helvetica,sans-serif;border-collapse:collapse;width:81%;margin-left:2%}#customers[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], #table_preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:8px}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(2n){background-color:#f2f2f2}#table_preview[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#ddd}#table_preview[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#247ce8;color:#fff;text-align:center}#visualize_btn[_ngcontent-%COMP%]:hover{border-radius:5px;position:absolute;bottom:20px;font-family:Roboto;font-size:14px;text-align:center;width:23%;height:38px;line-height:38px;color:#247ce8;right:21px;border:1px solid #e8e8ef;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1)}#filename[_ngcontent-%COMP%]{display:inline-block;font-family:Roboto;margin-left:2%;font-weight:800}#removeblock[_ngcontent-%COMP%]:hover{cursor:pointer;opacity:.5}.noselect[_ngcontent-%COMP%]{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blockyname[_ngcontent-%COMP%]{font-family:Roboto;font-weight:500;color:#253134;margin-left:8px;font-size:16px}.blockyleft[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], .blockyname[_ngcontent-%COMP%], .blockyright[_ngcontent-%COMP%]{display:inline-block;vertical-align:middle}.blockyright[_ngcontent-%COMP%]{float:right;margin-right:20px;margin-top:10px;width:28px;height:28px;border-radius:5px;text-align:center;background-color:#fff;transition:all .3s cubic-bezier(.05,.03,.35,1);z-index:10}.blockyright[_ngcontent-%COMP%]:hover{background-color:#f1f4fc;cursor:pointer}.blockyright[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-top:12px}.blockyleft[_ngcontent-%COMP%]{display:inline-block;margin-left:20px}.blockydiv[_ngcontent-%COMP%]{width:100%;height:1px;background-color:#e9e9ef}.blockyinfo[_ngcontent-%COMP%]{font-family:Roboto;font-size:14px;color:#808292;margin-top:15px;text-indent:20px;margin-bottom:20px}.blockyinfo[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#253134;font-weight:500;display:inline-block;border-bottom:1px solid #d3dcea;line-height:20px;text-indent:0}.block[_ngcontent-%COMP%]{width:40%!important;background-color:#fff;margin-top:0!important;box-shadow:0 4px 30px rgba(22,33,74,.05)}.selectedblock[_ngcontent-%COMP%]{border:2px solid #217ce8;box-shadow:0 4px 30px rgba(22,33,74,.08)}.custom-select[_ngcontent-%COMP%]{position:relative;font-family:Arial}.custom-select[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{display:none}.select-selected[_ngcontent-%COMP%]{background-color:#1e90ff}.select-selected[_ngcontent-%COMP%]:after{position:absolute;content:"";top:14px;right:10px;width:0;height:0;border:6px solid transparent;border-top-color:#fff}.select-selected.select-arrow-active[_ngcontent-%COMP%]:after{border-color:transparent transparent #fff;top:7px}.select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%], .select-selected[_ngcontent-%COMP%]{color:#fff;padding:8px 16px;border:1px solid transparent;border-bottom-color:rgba(0,0,0,.1);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-items[_ngcontent-%COMP%]{position:absolute;background-color:#1e90ff;top:100%;left:0;right:0;z-index:99}.select-hide[_ngcontent-%COMP%]{display:none}.same-as-selected[_ngcontent-%COMP%], .select-items[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:hover{background-color:rgba(0,0,0,.1)}@media only screen and (max-width:832px){#centerswitch[_ngcontent-%COMP%]{display:none}}@media only screen and (max-width:560px){#names[_ngcontent-%COMP%]{display:none}}']}),x_),C_=((b_=function e(){_classCallCheck(this,e)}).\u0275mod=ft({type:b_,bootstrap:[w_]}),b_.\u0275inj=pe({factory:function(e){return new(e||b_)},providers:[],imports:[[Fc,bm,lm]]}),b_);(function(){if(sa)throw new Error("Cannot enable prod mode after platform setup.");ia=!1})(),Mc().bootstrapModule(C_).catch((function(e){return console.error(e)}))},zn8P:function(e,t){function n(e){return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="zn8P"}},[[0,0]]]);